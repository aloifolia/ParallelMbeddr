package TasksAndSyncs.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.smodel.SModelUtil_new;

public class checkNamedResourceForResourceRefSiblings_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public checkNamedResourceForResourceRefSiblings_NonTypesystemRule() {
  }

  public void applyRule(final SNode namedResource, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(namedResource, "expression", true), "com.mbeddr.core.pointers.structure.ReferenceExpr")) {
      return;
    }

    for (SNode syncResourceRef : ListSequence.fromList(SNodeOperations.getDescendants(namedResource, "TasksAndSyncs.structure.SyncResourceRef", false, new String[]{}))) {
      if (ListSequence.fromList(SNodeOperations.getPrevSiblings(namedResource, false)).contains(SLinkOperations.getTarget(syncResourceRef, "syncResource", false))) {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(syncResourceRef, "may not refer to a named resource that is declared in the same context due to the pointer type of the whole expression", "r:daf934de-3466-4fa8-a227-270fedb7e2f2(TasksAndSyncs.typesystem)", "4065868335594694841", null, errorTarget);
        }
      }
    }

    for (final SNode varRef : ListSequence.fromList(SNodeOperations.getDescendants(namedResource, "com.mbeddr.core.statements.structure.IVariableReference", false, new String[]{}))) {
      if (ListSequence.fromList(SNodeOperations.getPrevSiblings(namedResource, false)).any(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(it, "TasksAndSyncs.structure.SyncResource"), "expression", true), "com.mbeddr.core.statements.structure.IVariableReference") && BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(it, "TasksAndSyncs.structure.SyncResource"), "expression", true), "com.mbeddr.core.statements.structure.IVariableReference"), "virtual_getVariable_2486081302460156153", new Object[]{}) == BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), varRef, "virtual_getVariable_2486081302460156153", new Object[]{});
        }
      })) {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(varRef, "may not refer to a shared resource that is synced in the same context due to the pointer type of the whole expression", "r:daf934de-3466-4fa8-a227-270fedb7e2f2(TasksAndSyncs.typesystem)", "4065868335594767014", null, errorTarget);
        }
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "TasksAndSyncs.structure.SyncResourceNamed";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
