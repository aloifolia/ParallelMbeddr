package TasksAndSyncs.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.smodel.SModelUtil_new;

public class checkAssignmentForSynchronizedness_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public checkAssignmentForSynchronizedness_NonTypesystemRule() {
  }

  public void applyRule(final SNode assignmentExpr, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    SNode target = SLinkOperations.getTarget(assignmentExpr, "left", true);
    if (!(SNodeOperations.isInstanceOf(target, "com.mbeddr.core.pointers.structure.PointerType") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(target), "com.mbeddr.core.pointers.structure.PointerType"), "baseType", true), "TasksAndSyncs.structure.SharedType"))) {
      return;
    }

    // TODO: extend check for to work for whole paths instead of just variable references 
    if (SNodeOperations.isInstanceOf(target, "com.mbeddr.core.statements.structure.IVariableReference")) {
      final SNode variable = BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), SNodeOperations.cast(target, "com.mbeddr.core.statements.structure.IVariableReference"), "virtual_getVariable_2486081302460156153", new Object[]{});
      if (Sequence.fromIterable(SNodeOperations.ofConcept(SNodeOperations.getAncestors(assignmentExpr, null, false), "TasksAndSyncs.structure.SyncStatement")).any(new IWhereFilter<SNode>() {
        public boolean accept(SNode sync) {
          return ListSequence.fromList(SLinkOperations.getTargets(sync, "resources", true)).any(new IWhereFilter<SNode>() {
            public boolean accept(SNode res) {
              return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(res, "expression", true), "com.mbeddr.core.statements.structure.IVariableReference") && BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), SNodeOperations.cast(SLinkOperations.getTarget(res, "expression", true), "com.mbeddr.core.statements.structure.IVariableReference"), "virtual_getVariable_2486081302460156153", new Object[]{}) == variable;
            }
          });
        }
      })) {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(target, "may not overwrite synchronized pointer", "r:daf934de-3466-4fa8-a227-270fedb7e2f2(TasksAndSyncs.typesystem)", "5721544581291286519", null, errorTarget);
        }
      }
    } else if (SNodeOperations.isInstanceOf(target, "TasksAndSyncs.structure.SyncResourceRef")) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(target, "may not overwrite synchronized pointer", "r:daf934de-3466-4fa8-a227-270fedb7e2f2(TasksAndSyncs.typesystem)", "5721544581291274342", null, errorTarget);
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "com.mbeddr.core.expressions.structure.AssignmentExpr";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
