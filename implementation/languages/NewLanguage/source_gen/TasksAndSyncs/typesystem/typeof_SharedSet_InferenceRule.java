package TasksAndSyncs.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_SharedSet_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_SharedSet_InferenceRule() {
  }

  public void applyRule(final SNode sharedSet, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(sharedSet), "com.mbeddr.core.expressions.structure.GenericDotExpression")) {
      {
        final SNode expressionType = typeCheckingContext.typeOf(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(sharedSet), "com.mbeddr.core.expressions.structure.GenericDotExpression"), "expression", true), "r:daf934de-3466-4fa8-a227-270fedb7e2f2(TasksAndSyncs.typesystem)", "3570654511859465230", true);
        typeCheckingContext.whenConcrete(expressionType, new Runnable() {
          public void run() {
            System.out.println("expressionType:" + typeCheckingContext.getExpandedNode(expressionType));
            if (SNodeOperations.isInstanceOf(typeCheckingContext.getExpandedNode(expressionType), "TasksAndSyncs.structure.SharedType")) {
              {
                final SNode valueType = typeCheckingContext.typeOf(SLinkOperations.getTarget(sharedSet, "value", true), "r:daf934de-3466-4fa8-a227-270fedb7e2f2(TasksAndSyncs.typesystem)", "3570654511859521315", true);
                typeCheckingContext.whenConcrete(valueType, new Runnable() {
                  public void run() {
                    System.out.println("sharedBaseType:" + SLinkOperations.getTarget(SNodeOperations.cast(typeCheckingContext.getExpandedNode(expressionType), "TasksAndSyncs.structure.SharedType"), "baseType", true));
                    System.out.println("valueType:" + typeCheckingContext.getExpandedNode(valueType));
                    SNode sharedBaseType = SLinkOperations.getTarget(SNodeOperations.cast(typeCheckingContext.getExpandedNode(expressionType), "TasksAndSyncs.structure.SharedType"), "baseType", true);
                    {
                      SNode _nodeToCheck_1029348928467 = sharedSet;
                      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, trim_go4jj6_a0a0d0a0b0a0a0b(BehaviorReflection.invokeVirtual(String.class, typeCheckingContext.getExpandedNode(valueType), "virtual_getPresentation_1213877396640", new Object[]{})) + " is not a subtype of " + sharedBaseType, "r:daf934de-3466-4fa8-a227-270fedb7e2f2(TasksAndSyncs.typesystem)", "3570654511859525175", 0, null);
                      typeCheckingContext.createLessThanInequality((SNode) typeCheckingContext.getExpandedNode(valueType), (SNode) sharedBaseType, false, true, _info_12389875345);
                    }
                  }
                }, "r:daf934de-3466-4fa8-a227-270fedb7e2f2(TasksAndSyncs.typesystem)", "3570654511859521192", false, false);
              }
            }
          }
        }, "r:daf934de-3466-4fa8-a227-270fedb7e2f2(TasksAndSyncs.typesystem)", "3570654511859322099", false, false);
      }
    }
    {
      SNode _nodeToCheck_1029348928467 = sharedSet;
      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:daf934de-3466-4fa8-a227-270fedb7e2f2(TasksAndSyncs.typesystem)", "3570654511858807004", 0, null);
      typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:daf934de-3466-4fa8-a227-270fedb7e2f2(TasksAndSyncs.typesystem)", "3570654511858807071", true), (SNode) SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.VoidType", null), _info_12389875345);
    }
  }

  public String getApplicableConceptFQName() {
    return "TasksAndSyncs.structure.SharedSet";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }

  public static String trim_go4jj6_a0a0d0a0b0a0a0b(String str) {
    return (str == null ? null : str.trim());
  }
}
