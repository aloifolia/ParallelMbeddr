package TasksAndSyncs.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_TaskClear_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_TaskClear_InferenceRule() {
  }

  public void applyRule(final SNode taskClear, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    {
      final SNode expressionType = typeCheckingContext.typeOf(SNodeOperations.cast(SNodeOperations.getParent(taskClear), "com.mbeddr.core.expressions.structure.GenericDotExpression"), "r:daf934de-3466-4fa8-a227-270fedb7e2f2(TasksAndSyncs.typesystem)", "8001979070760399697", true);
      typeCheckingContext.whenConcrete(expressionType, new Runnable() {
        public void run() {
          {
            SNode _nodeToCheck_1029348928467 = taskClear;
            EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:daf934de-3466-4fa8-a227-270fedb7e2f2(TasksAndSyncs.typesystem)", "8001979070760405372", 0, null);
            typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:daf934de-3466-4fa8-a227-270fedb7e2f2(TasksAndSyncs.typesystem)", "8001979070760405256", true), (SNode) new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode node_8001979070760405392 = new _FunctionTypes._return_P0_E0<SNode>() {
                  public SNode invoke() {
                    SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.VoidType", null);
                    return res;
                  }
                }.invoke();
                return node_8001979070760405392;
              }
            }.invoke(), _info_12389875345);
          }
        }
      }, "r:daf934de-3466-4fa8-a227-270fedb7e2f2(TasksAndSyncs.typesystem)", "8001979070760399607", false, false);
    }
  }

  public String getApplicableConceptFQName() {
    return "TasksAndSyncs.structure.TaskClear";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
