package TasksAndSyncs.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.smodel.SModelUtil_new;

public class checkTaskForReference_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public checkTaskForReference_NonTypesystemRule() {
  }

  public void applyRule(final SNode task, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    Iterable<SNode> expressionsToCheck = Sequence.fromIterable(Sequence.<SNode>singleton(SLinkOperations.getTarget(task, "expression", true))).concat(ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(task, "expression", true), "com.mbeddr.core.expressions.structure.Expression", false, new String[]{})));

    for (SNode expression : Sequence.fromIterable(expressionsToCheck)) {
      if (Checker.refersToRessource(expression) && Checker.isInCopyPosition(expression)) {
        if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(expression), "com.mbeddr.core.pointers.structure.ArrayType")) {
          String arrayString = trim_f7dij5_a0a0a0a0a2a1(BehaviorReflection.invokeVirtual(String.class, SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(expression), "com.mbeddr.core.pointers.structure.ArrayType"), "virtual_getPresentation_1213877396640", new Object[]{}));
          {
            MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(expression, "array " + arrayString + " cannot be used in pointer-like copy position => use safe access through: *shared<" + arrayString + ">", "r:daf934de-3466-4fa8-a227-270fedb7e2f2(TasksAndSyncs.typesystem)", "6480032978539178806", null, errorTarget);
          }
        } else {
          for (String errorMessage : Checker.checkExprForUnsyncedPointers(expression)) {
            {
              MessageTarget errorTarget = new NodeMessageTarget();
              IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(expression, errorMessage, "r:daf934de-3466-4fa8-a227-270fedb7e2f2(TasksAndSyncs.typesystem)", "6480032978538683224", null, errorTarget);
            }
          }
        }
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "TasksAndSyncs.structure.Task";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }

  public static String trim_f7dij5_a0a0a0a0a2a1(String str) {
    return (str == null ? null : str.trim());
  }
}
