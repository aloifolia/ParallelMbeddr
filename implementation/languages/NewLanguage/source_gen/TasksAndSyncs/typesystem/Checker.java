package TasksAndSyncs.typesystem;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import com.mbeddr.core.udt.behavior.SUDeclaration_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class Checker {
  public static boolean isInCopyPosition(SNode expression) {
    SNode parent = SNodeOperations.getParent(expression);
    if (SNodeOperations.isInstanceOf(parent, "com.mbeddr.core.expressions.structure.ParensExpression")) {
      return isInCopyPosition(SNodeOperations.getParent(expression));
    }
    if (SNodeOperations.isInstanceOf(parent, "com.mbeddr.core.pointers.structure.DerefExpr") || SNodeOperations.isInstanceOf(parent, "com.mbeddr.core.pointers.structure.ReferenceExpr")) {
      return false;
    }
    if (SNodeOperations.isInstanceOf(parent, "com.mbeddr.core.expressions.structure.GenericDotExpression")) {
      return false;
    }
    if (SNodeOperations.isInstanceOf(parent, "com.mbeddr.core.pointers.structure.ArrayAccessExpr")) {
      return false;
    }
    return true;
  }



  public static boolean refersToRessource(SNode expression) {
    return SNodeOperations.isInstanceOf(expression, "com.mbeddr.core.statements.structure.LocalVarRef") || SNodeOperations.isInstanceOf(expression, "com.mbeddr.core.modules.structure.GlobalVarRef") || SNodeOperations.isInstanceOf(expression, "com.mbeddr.core.pointers.structure.ArrayAccessExpr") || SNodeOperations.isInstanceOf(expression, "com.mbeddr.core.expressions.structure.GenericDotExpression");
  }



  public static List<String> checkExprForUnsharedPointers(SNode expression) {
    return checkTypeForUnsharedPointers(TypeChecker.getInstance().getTypeOf(expression));
  }



  public static List<String> checkTypeForUnsharedPointers(SNode type) {
    List<String> errorMessages = ListSequence.fromList(new ArrayList<String>());
    if (SNodeOperations.isInstanceOf(type, "com.mbeddr.core.pointers.structure.PointerType")) {
      SNode pointerType = SNodeOperations.cast(type, "com.mbeddr.core.pointers.structure.PointerType");
      if (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(pointerType, "baseType", true), "TasksAndSyncs.structure.SharedType"))) {
        ListSequence.fromList(errorMessages).addElement("node of pointer type must point to shared ressource");
      } else {
        ListSequence.fromList(errorMessages).addSequence(ListSequence.fromList(checkTypeForUnsharedPointers(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(pointerType, "baseType", true), "TasksAndSyncs.structure.SharedType"), "baseType", true))));
      }
    } else if (SNodeOperations.isInstanceOf(type, "com.mbeddr.core.udt.structure.StructType")) {
      SNode structType = SNodeOperations.cast(type, "com.mbeddr.core.udt.structure.StructType");
      for (SNode field : ListSequence.fromList(SUDeclaration_Behavior.call_members_9101132143318613823(SLinkOperations.getTarget(structType, "struct", false)))) {
        ListSequence.fromList(errorMessages).addSequence(ListSequence.fromList(checkTypeForUnsharedPointers(SLinkOperations.getTarget(field, "type", true))));
      }
    } else if (SNodeOperations.isInstanceOf(type, "TasksAndSyncs.structure.SharedType")) {
      SNode sharedType = SNodeOperations.cast(type, "TasksAndSyncs.structure.SharedType");
      ListSequence.fromList(errorMessages).addSequence(ListSequence.fromList(checkTypeForUnsharedPointers(SLinkOperations.getTarget(sharedType, "baseType", true))));
    }
    return errorMessages;
  }



  public static List<String> checkStructFieldForUnsyncedPointers(SNode field, String structName) {
    // TODO: remove 
    List<String> errorMessages = ListSequence.fromList(new ArrayList<String>());
    {
      SNode pointerType = SLinkOperations.getTarget(field, "type", true);
      if (SNodeOperations.isInstanceOf(pointerType, "com.mbeddr.core.pointers.structure.PointerType")) {
        if (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(pointerType, "baseType", true), "TasksAndSyncs.structure.SharedType"))) {
          ListSequence.fromList(errorMessages).addElement("field '" + SPropertyOperations.getString(field, "name") + "' of pointer type in struct '" + structName + "' must point to shared ressource");
        }
      }
    }
    {
      SNode structType = TypeChecker.getInstance().getTypeOf(field);
      if (SNodeOperations.isInstanceOf(structType, "com.mbeddr.core.udt.structure.StructType")) {
        for (SNode subField : ListSequence.fromList(SUDeclaration_Behavior.call_members_9101132143318613823(SLinkOperations.getTarget(structType, "struct", false)))) {
          ListSequence.fromList(errorMessages).addSequence(ListSequence.fromList(checkStructFieldForUnsyncedPointers(subField, SPropertyOperations.getString(SLinkOperations.getTarget(structType, "struct", false), "name"))));
        }
      }
    }
    return errorMessages;
  }



  public static boolean arePathsEqual(SNode expression1, SNode expression2) {
    // todo: remove 
    if (!(SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(expression1), "name").equals(SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(expression2), "name")))) {
      return false;
    }
    {
      SNode localVarRef1 = expression1;
      if (SNodeOperations.isInstanceOf(localVarRef1, "com.mbeddr.core.statements.structure.LocalVarRef")) {
        return SLinkOperations.getTarget(localVarRef1, "var", false) == SLinkOperations.getTarget(SNodeOperations.cast(expression2, "com.mbeddr.core.statements.structure.LocalVarRef"), "var", false);
      }
    }
    {
      SNode globalVarRef1 = expression1;
      if (SNodeOperations.isInstanceOf(globalVarRef1, "com.mbeddr.core.modules.structure.GlobalVarRef")) {
        return SLinkOperations.getTarget(globalVarRef1, "var", false) == SLinkOperations.getTarget(SNodeOperations.cast(expression2, "com.mbeddr.core.modules.structure.GlobalVarRef"), "var", false);
      }
    }
    {
      SNode gde1 = expression1;
      if (SNodeOperations.isInstanceOf(gde1, "com.mbeddr.core.expressions.structure.GenericDotExpression")) {
        SNode gde2 = SNodeOperations.cast(expression2, "com.mbeddr.core.expressions.structure.GenericDotExpression");
        if (SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(gde1, "target", true)), "name") != SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(gde2, "target", true)), "name")) {
          return false;
        }
        if (SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(gde1, "expression", true)), "name") != SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(gde2, "expression", true)), "name")) {
          return false;
        }
        {
          SNode exprType1 = TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(gde1, "expression", true));
          if (SNodeOperations.isInstanceOf(exprType1, "TasksAndSyncs.structure.SharedType")) {
            if (!(SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(gde1, "expression", true)), "TasksAndSyncs.structure.SharedType"))) {
              return false;
            }
            if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(gde1, "target", true), "TasksAndSyncs.structure.SharedGet") && !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(gde2, "target", true), "TasksAndSyncs.structure.SharedGet"))) {
              return false;
            }
            if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(gde1, "target", true), "TasksAndSyncs.structure.SharedSet") && !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(gde2, "target", true), "TasksAndSyncs.structure.SharedSet"))) {
              return false;
            }
            // TODO 
          }
        }
      }
    }
    // dummy 
    return false;
  }
}
