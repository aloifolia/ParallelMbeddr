package TasksAndSyncs.actions;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.openapi.editor.cells.SubstituteAction;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.action.SideTransformActionsBuilderContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.action.AbstractSideTransformHintSubstituteAction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.constraints.ModelConstraints;
import jetbrains.mps.smodel.action.SideTransformPreconditionContext;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;

public class QueriesGenerated {
  public static List<SubstituteAction> sideTransform_ActionsFactory_Expression_1304213873206411434(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("TasksAndSyncs.structure.RunningTask"), _context.getSourceNode()) {
      public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
        SNode runningTask = SConceptOperations.createNewNode("TasksAndSyncs.structure.RunningTask", null);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(), runningTask);
        return SLinkOperations.setTarget(runningTask, "task", _context.getSourceNode(), true);
      }

      public String getMatchingText(String pattern) {
        return ".run";
      }

      public String getVisibleMatchingText(String pattern) {
        return getMatchingText(pattern);
      }

      @Override
      protected boolean isEnabled() {
        SNode sourceNode = getSourceNode();
        SNode parent = SNodeOperations.getParent(sourceNode);
        SNode containingLink = SNodeOperations.getContainingLinkDeclaration(sourceNode);
        return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent, SConceptOperations.findConceptDeclaration("TasksAndSyncs.structure.RunningTask"), containingLink, null, null) && ModelConstraints.canBeAncestor(parent, null, SConceptOperations.findConceptDeclaration("TasksAndSyncs.structure.RunningTask"), null));
      }
    });
    return result;
  }

  public static boolean sideTransformHintSubstituteActionsBuilder_Precondition_Expression_1304213873206411459(final IOperationContext operationContext, final SideTransformPreconditionContext _context) {
    return SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(_context.getSourceNode()), "TasksAndSyncs.structure.TaskType");
  }

  public static List<SubstituteAction> sideTransform_ActionsFactory_Expression_1304213873206816219(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("TasksAndSyncs.structure.RunningTask"), _context.getSourceNode()) {
      public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
        SNode joinedTask = SConceptOperations.createNewNode("TasksAndSyncs.structure.JoinedTask", null);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(), joinedTask);
        return SLinkOperations.setTarget(joinedTask, "runningTask", _context.getSourceNode(), true);
      }

      public String getMatchingText(String pattern) {
        return ".join";
      }

      public String getVisibleMatchingText(String pattern) {
        return getMatchingText(pattern);
      }

      @Override
      protected boolean isEnabled() {
        SNode sourceNode = getSourceNode();
        SNode parent = SNodeOperations.getParent(sourceNode);
        SNode containingLink = SNodeOperations.getContainingLinkDeclaration(sourceNode);
        return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent, SConceptOperations.findConceptDeclaration("TasksAndSyncs.structure.RunningTask"), containingLink, null, null) && ModelConstraints.canBeAncestor(parent, null, SConceptOperations.findConceptDeclaration("TasksAndSyncs.structure.RunningTask"), null));
      }
    });
    return result;
  }

  public static boolean sideTransformHintSubstituteActionsBuilder_Precondition_Expression_1304213873206816247(final IOperationContext operationContext, final SideTransformPreconditionContext _context) {
    System.out.println("task to join: " + BehaviorReflection.invokeVirtual(String.class, _context.getSourceNode(), "virtual_getPresentation_1213877396640", new Object[]{}));
    System.out.println("has type: " + BehaviorReflection.invokeVirtual(String.class, TypeChecker.getInstance().getTypeOf(_context.getSourceNode()), "virtual_getPresentation_1213877396640", new Object[]{}));
    System.out.println("is running task? " + SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(_context.getSourceNode()), "TasksAndSyncs.structure.RunningTaskType"));
    return SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(_context.getSourceNode()), "TasksAndSyncs.structure.RunningTaskType");
  }
}
