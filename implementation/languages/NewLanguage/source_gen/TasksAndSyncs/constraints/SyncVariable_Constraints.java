package TasksAndSyncs.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.SNodePointer;

public class SyncVariable_Constraints extends BaseConstraintsDescriptor {
  public SyncVariable_Constraints() {
    super("TasksAndSyncs.structure.SyncVariable");
  }

  @Override
  public boolean hasOwnCanBeChildMethod() {
    return true;
  }

  @Override
  public boolean canBeChild(@Nullable SNode node, SNode parentNode, SNode link, SNode childConcept, final IOperationContext operationContext, @Nullable final CheckingNodeContext checkingNodeContext) {
    boolean result = static_canBeAChild(node, parentNode, link, childConcept, operationContext);

    if (!(result) && checkingNodeContext != null) {
      checkingNodeContext.setBreakingNode(canBeChildBreakingPoint);
    }

    return result;
  }

  public static boolean static_canBeAChild(final SNode node, SNode parentNode, SNode link, SNode childConcept, final IOperationContext operationContext) {
    boolean rightPlace = SNodeOperations.isInstanceOf(parentNode, "TasksAndSyncs.structure.Sync") && ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(parentNode, "TasksAndSyncs.structure.Sync"), "ressources", true)).contains(node);
    if (!(rightPlace)) {
      return rightPlace;
    }
    boolean rightType = SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "ref", true), "com.mbeddr.core.pointers.structure.DerefExpr") || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "ref", true), "com.mbeddr.core.statements.structure.IVariableReference");
    if (!(rightType)) {
      return rightType;
    }
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "ref", true), "com.mbeddr.core.pointers.structure.DerefExpr")) {
      ListSequence.fromList(SNodeOperations.getPrevSiblings(node, false)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(it, "TasksAndSyncs.structure.SyncVariable"), "ref", true), "com.mbeddr.core.pointers.structure.DerefExpr");
        }
      });

      return ListSequence.fromList(SNodeOperations.getPrevSiblings(node, false)).all(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SLinkOperations.getTarget(SNodeOperations.cast(it, "TasksAndSyncs.structure.SyncVariable"), "ref", true) != SLinkOperations.getTarget(node, "ref", true);
        }
      });
    }
    return SNodeOperations.isInstanceOf(parentNode, "TasksAndSyncs.structure.Sync") && ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(parentNode, "TasksAndSyncs.structure.Sync"), "ressources", true)).contains(node) && ListSequence.fromList(SNodeOperations.getPrevSiblings(node, false)).all(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SLinkOperations.getTarget(SNodeOperations.cast(it, "TasksAndSyncs.structure.SyncVariable"), "ref", true) != SLinkOperations.getTarget(node, "ref", true);
      }
    });
  }

  private static SNodePointer canBeChildBreakingPoint = new SNodePointer("r:1131838a-735d-45d7-9c86-9e6994478367(TasksAndSyncs.constraints)", "3604883996549885947");
}
