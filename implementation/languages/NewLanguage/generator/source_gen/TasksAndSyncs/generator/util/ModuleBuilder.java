package TasksAndSyncs.generator.util;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.generator.template.TemplateQueryContext;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public class ModuleBuilder {


  public static SNode buildGeneric(final String name, SModel model) {
    final SNode implementationModule = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        SNode node_3074299910032730427 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.ImplementationModule", null);
            SPropertyOperations.set(res, "name", (name));
            return res;
          }
        }.invoke();
        return node_3074299910032730427;
      }
    }.invoke();

    for (SNode module : ListSequence.fromList(SModelOperations.getNodes(model, "com.mbeddr.core.modules.structure.Module"))) {
      ListSequence.fromList(SLinkOperations.getTargets(module, "imports", true)).addElement(new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          SNode node_6079605392877971291 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.ModuleImport", null);
              SLinkOperations.setTarget(res, "module", implementationModule, false);
              return res;
            }
          }.invoke();
          return node_6079605392877971291;
        }
      }.invoke());
    }

    SModelOperations.addRootNode(model, implementationModule);

    ListSequence.fromList(SLinkOperations.getTargets(ListSequence.fromList(SLinkOperations.getTargets(ListSequence.fromList(SModelOperations.getRoots(model, "com.mbeddr.core.buildconfig.structure.BuildConfiguration")).first(), "binaries", true)).first(), "referencedModules", true)).addElement(new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        SNode node_6079605392877649516 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.buildconfig.structure.ModuleRef", null);
            SLinkOperations.setTarget(res, "module", implementationModule, false);
            return res;
          }
        }.invoke();
        return node_6079605392877649516;
      }
    }.invoke());

    return implementationModule;
  }



  public static SNode buildSharedModuleFor(final SNode implementationModule, final TemplateQueryContext genContext, SModel model) {
    final SNode sharedModule = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        SNode node_483189195593417237 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.ImplementationModule", null);
            SPropertyOperations.set(res, "name", (genContext.createUniqueName(SPropertyOperations.getString(implementationModule, "name") + "_SharedTypes", null)));
            return res;
          }
        }.invoke();
        return node_483189195593417237;
      }
    }.invoke();

    ListSequence.fromList(SLinkOperations.getTargets(implementationModule, "imports", true)).addElement(new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        SNode node_483189195593417255 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.ModuleImport", null);
            SLinkOperations.setTarget(res, "module", sharedModule, false);
            return res;
          }
        }.invoke();
        return node_483189195593417255;
      }
    }.invoke());

    SModelOperations.addRootNode(model, sharedModule);

    ListSequence.fromList(SLinkOperations.getTargets(ListSequence.fromList(SLinkOperations.getTargets(ListSequence.fromList(SModelOperations.getRoots(model, "com.mbeddr.core.buildconfig.structure.BuildConfiguration")).first(), "binaries", true)).first(), "referencedModules", true)).addElement(new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        SNode node_483189195593417281 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.buildconfig.structure.ModuleRef", null);
            SLinkOperations.setTarget(res, "module", sharedModule, false);
            return res;
          }
        }.invoke();
        return node_483189195593417281;
      }
    }.invoke());

    return sharedModule;
  }



  public static void importModule(SNode moduleToImport, final SNode target) {
    if (!(Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getTargets(target, "imports", true), "com.mbeddr.core.base.structure.DefaultGenericChunkDependency")).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SLinkOperations.getTarget(it, "chunk", false) == target;
      }
    }))) {
      SNode newImport = SConceptOperations.createNewNode("com.mbeddr.core.base.structure.DefaultGenericChunkDependency", null);
      SLinkOperations.setTarget(newImport, "chunk", moduleToImport, false);
      ListSequence.fromList(SLinkOperations.getTargets(target, "imports", true)).addElement(newImport);
    }
  }
}
