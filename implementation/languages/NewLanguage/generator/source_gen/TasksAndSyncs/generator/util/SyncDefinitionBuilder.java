package TasksAndSyncs.generator.util;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.generator.template.TemplateQueryContext;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import com.mbeddr.core.expressions.behavior.Type_Behavior;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.ArrayList;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import com.mbeddr.core.udt.behavior.SUDeclaration_Behavior;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;

public class SyncDefinitionBuilder {


  public static SNode addStructForType(TemplateQueryContext genContext, List<Pair<SNode, SNode>> typesAndStructs, SNode sharedType) {
    // create a new entry 
    Pair<SNode, SNode> typeAndStruct = new Pair(SLinkOperations.getTarget(sharedType, "baseType", true), buildSharedStruct(genContext, sharedType));
    ListSequence.fromList(typesAndStructs).addElement(typeAndStruct);
    return typeAndStruct.second;
  }



  public static SNode getStructForType(TemplateQueryContext genContext, List<Pair<SNode, SNode>> typesAndStructs, SNode sharedType) {
    // try to find an existing entry in the list 
    for (Pair<SNode, SNode> typeAndStruct : ListSequence.fromList(typesAndStructs)) {
      SNode currentType = typeAndStruct.first;
      SNode baseType = SLinkOperations.getTarget(sharedType, "baseType", true);
      if (Type_Behavior.call_isSubtypeOf_2124837493917340416(currentType, baseType) && Type_Behavior.call_isSubtypeOf_2124837493917340416(baseType, currentType)) {
        return typeAndStruct.second;
      }
    }
    return null;
  }



  public static SNode buildSharedStruct(final TemplateQueryContext genContext, final SNode sharedType) {
    String rawName = BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(sharedType, "baseType", true), "virtual_getPresentation_1213877396640", new Object[]{}).replaceAll("\\s|\\d", "").replaceAll("\\*", "_Pointer").replaceAll("\\[\\]", "_Array");
    System.out.println("from:" + BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(sharedType, "baseType", true), "virtual_getPresentation_1213877396640", new Object[]{}));
    System.out.println("  to:" + rawName);
    String namePart1 = "Shared" + rawName.substring(0, 1).toUpperCase();
    String namePart2 = rawName.substring(1);
    final String name = namePart1 + namePart2;
    return new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_2852056939580659788 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.AbritraryTextItem", null);
            SPropertyOperations.set(res, "text", ("pthread_mutexattr_t"));
            return res;
          }
        }.invoke();
        final SNode node_2852056939580657256 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArbitraryTextType", null);
            SPropertyOperations.set(res, "requiredStdHeader", ("<pthread.h>"));
            ListSequence.fromList(SLinkOperations.getTargets(res, "items", true)).addElement(node_2852056939580659788);
            return res;
          }
        }.invoke();
        final SNode node_2852056939580655953 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.Member", null);
            SPropertyOperations.set(res, "name", ("mutexAttribute"));
            SLinkOperations.setTarget(res, "type", node_2852056939580657256, true);
            return res;
          }
        }.invoke();
        final SNode node_2852056939580667987 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.AbritraryTextItem", null);
            SPropertyOperations.set(res, "text", ("pthread_mutex_t"));
            return res;
          }
        }.invoke();
        final SNode node_2852056939580667984 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArbitraryTextType", null);
            SPropertyOperations.set(res, "requiredStdHeader", ("<pthread.h>"));
            ListSequence.fromList(SLinkOperations.getTargets(res, "items", true)).addElement(node_2852056939580667987);
            return res;
          }
        }.invoke();
        final SNode node_2852056939580666649 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.Member", null);
            SPropertyOperations.set(res, "name", ("mutex"));
            SLinkOperations.setTarget(res, "type", node_2852056939580667984, true);
            return res;
          }
        }.invoke();
        final SNode node_2852056939580671093 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SNodeOperations.copyNode(SLinkOperations.getTarget(sharedType, "baseType", true));
            return res;
          }
        }.invoke();
        final SNode node_2852056939580671092 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.Member", null);
            SPropertyOperations.set(res, "name", ("value"));
            SLinkOperations.setTarget(res, "type", node_2852056939580671093, true);
            return res;
          }
        }.invoke();
        SNode node_2852056939580462351 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.StructDeclaration", null);
            SPropertyOperations.set(res, "exported", "" + ((true)));
            SPropertyOperations.set(res, "name", (genContext.createUniqueName(name, null)));
            ListSequence.fromList(SLinkOperations.getTargets(res, "members", true)).addElement(node_2852056939580655953);
            ListSequence.fromList(SLinkOperations.getTargets(res, "members", true)).addElement(node_2852056939580666649);
            ListSequence.fromList(SLinkOperations.getTargets(res, "members", true)).addElement(node_2852056939580671092);
            return res;
          }
        }.invoke();
        return node_2852056939580462351;
      }
    }.invoke();
  }



  public static SNode buildInitMutexFunction(TemplateQueryContext genContext) {
    final SNode mutexAttribute = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_2648922052118567399 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.AbritraryTextItem", null);
            SPropertyOperations.set(res, "text", ("pthread_mutexattr_t"));
            return res;
          }
        }.invoke();
        final SNode node_5244467561015440013 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArbitraryTextType", null);
            SPropertyOperations.set(res, "requiredStdHeader", ("<pthread.h>"));
            ListSequence.fromList(SLinkOperations.getTargets(res, "items", true)).addElement(node_2648922052118567399);
            return res;
          }
        }.invoke();
        final SNode node_5244467561015436772 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.PointerType", null);
            SLinkOperations.setTarget(res, "baseType", node_5244467561015440013, true);
            return res;
          }
        }.invoke();
        SNode node_2648922052118563000 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.Argument", null);
            SPropertyOperations.set(res, "name", ("mutexAttribute"));
            SLinkOperations.setTarget(res, "type", node_5244467561015436772, true);
            return res;
          }
        }.invoke();
        return node_2648922052118563000;
      }
    }.invoke();
    final SNode mutex = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_2648922052118570353 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.AbritraryTextItem", null);
            SPropertyOperations.set(res, "text", ("pthread_mutex_t"));
            return res;
          }
        }.invoke();
        final SNode node_5244467561015443541 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArbitraryTextType", null);
            SPropertyOperations.set(res, "requiredStdHeader", ("<pthread.h>"));
            ListSequence.fromList(SLinkOperations.getTargets(res, "items", true)).addElement(node_2648922052118570353);
            return res;
          }
        }.invoke();
        final SNode node_5244467561015443540 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.PointerType", null);
            SLinkOperations.setTarget(res, "baseType", node_5244467561015443541, true);
            return res;
          }
        }.invoke();
        SNode node_2648922052118570347 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.Argument", null);
            SPropertyOperations.set(res, "name", ("mutex"));
            SLinkOperations.setTarget(res, "type", node_5244467561015443540, true);
            return res;
          }
        }.invoke();
        return node_2648922052118570347;
      }
    }.invoke();
    List<SNode> arguments = new ArrayList<SNode>();
    ListSequence.fromList(arguments).addElement(mutexAttribute);
    ListSequence.fromList(arguments).addElement(mutex);

    SNode callMutexAttr = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_5244467561006555012 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.ArgumentRef", null);
            SLinkOperations.setTarget(res, "arg", mutexAttribute, false);
            return res;
          }
        }.invoke();
        final SNode node_5244467561006555018 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.AbritraryTextItem", null);
            SPropertyOperations.set(res, "text", ("PTHREAD_MUTEX_RECURSIVE"));
            return res;
          }
        }.invoke();
        final SNode node_5244467561006555015 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArbitraryTextExpression", null);
            SPropertyOperations.set(res, "requiredStdHeader", ("<pthread.h>"));
            ListSequence.fromList(SLinkOperations.getTargets(res, "items", true)).addElement(node_5244467561006555018);
            return res;
          }
        }.invoke();
        final SNode node_5244467561006555007 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArbitraryFunctionCall", null);
            SPropertyOperations.set(res, "requiredStdHeader", ("<pthread.h>"));
            SPropertyOperations.set(res, "calledFunctionName", ("pthread_mutexattr_settype"));
            ListSequence.fromList(SLinkOperations.getTargets(res, "arguments", true)).addElement(node_5244467561006555012);
            ListSequence.fromList(SLinkOperations.getTargets(res, "arguments", true)).addElement(node_5244467561006555015);
            return res;
          }
        }.invoke();
        SNode node_5244467561006554481 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ExpressionStatement", null);
            SLinkOperations.setTarget(res, "expr", node_5244467561006555007, true);
            return res;
          }
        }.invoke();
        return node_5244467561006554481;
      }
    }.invoke();
    SNode callMutex = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_5244467561015451296 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.ArgumentRef", null);
            SLinkOperations.setTarget(res, "arg", mutex, false);
            return res;
          }
        }.invoke();
        final SNode node_5244467561015452180 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.ArgumentRef", null);
            SLinkOperations.setTarget(res, "arg", mutexAttribute, false);
            return res;
          }
        }.invoke();
        final SNode node_5244467561006571994 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArbitraryFunctionCall", null);
            SPropertyOperations.set(res, "requiredStdHeader", ("<pthread.h>"));
            SPropertyOperations.set(res, "calledFunctionName", ("pthread_mutex_init"));
            ListSequence.fromList(SLinkOperations.getTargets(res, "arguments", true)).addElement(node_5244467561015451296);
            ListSequence.fromList(SLinkOperations.getTargets(res, "arguments", true)).addElement(node_5244467561015452180);
            return res;
          }
        }.invoke();
        SNode node_5244467561006562606 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ExpressionStatement", null);
            SLinkOperations.setTarget(res, "expr", node_5244467561006571994, true);
            return res;
          }
        }.invoke();
        return node_5244467561006562606;
      }
    }.invoke();
    List<SNode> statements = new ArrayList<SNode>();
    ListSequence.fromList(statements).addElement(callMutexAttr);
    ListSequence.fromList(statements).addElement(callMutex);

    String functionName = genContext.createUniqueName("initMutex", null);

    return buildVoidExportedFunction(statements, arguments, functionName);
  }



  public static SNode buildDestroyMutexFunction(TemplateQueryContext genContext) {
    final SNode mutex = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_5244467561005167628 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.AbritraryTextItem", null);
            SPropertyOperations.set(res, "text", ("pthread_mutex_t"));
            return res;
          }
        }.invoke();
        final SNode node_5244467561015461257 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArbitraryTextType", null);
            SPropertyOperations.set(res, "requiredStdHeader", ("<pthread.h>"));
            ListSequence.fromList(SLinkOperations.getTargets(res, "items", true)).addElement(node_5244467561005167628);
            return res;
          }
        }.invoke();
        final SNode node_5244467561015460615 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.PointerType", null);
            SLinkOperations.setTarget(res, "baseType", node_5244467561015461257, true);
            return res;
          }
        }.invoke();
        SNode node_5244467561005167622 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.Argument", null);
            SPropertyOperations.set(res, "name", ("mutex"));
            SLinkOperations.setTarget(res, "type", node_5244467561015460615, true);
            return res;
          }
        }.invoke();
        return node_5244467561005167622;
      }
    }.invoke();
    List<SNode> arguments = new ArrayList<SNode>();
    ListSequence.fromList(arguments).addElement(mutex);

    SNode destroyMutex = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_5244467561006746390 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.ArgumentRef", null);
            SLinkOperations.setTarget(res, "arg", mutex, false);
            return res;
          }
        }.invoke();
        final SNode node_5244467561006746385 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArbitraryFunctionCall", null);
            SPropertyOperations.set(res, "requiredStdHeader", ("<pthread.h>"));
            SPropertyOperations.set(res, "calledFunctionName", ("pthread_mutex_destroy"));
            ListSequence.fromList(SLinkOperations.getTargets(res, "arguments", true)).addElement(node_5244467561006746390);
            return res;
          }
        }.invoke();
        SNode node_5244467561006745825 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ExpressionStatement", null);
            SLinkOperations.setTarget(res, "expr", node_5244467561006746385, true);
            return res;
          }
        }.invoke();
        return node_5244467561006745825;
      }
    }.invoke();
    List<SNode> statements = new ArrayList<SNode>();
    ListSequence.fromList(statements).addElement(destroyMutex);

    String functionName = genContext.createUniqueName("destroyMutex", null);

    return buildVoidExportedFunction(statements, arguments, functionName);
  }



  public static boolean nestedTypeIsShared(SNode type) {
    if (SNodeOperations.isInstanceOf(type, "TasksAndSyncs.structure.SharedType")) {
      return true;
    }
    {
      SNode typeDefType = type;
      if (SNodeOperations.isInstanceOf(typeDefType, "com.mbeddr.core.udt.structure.TypeDefType")) {
        return nestedTypeIsShared(SLinkOperations.getTarget(SLinkOperations.getTarget(typeDefType, "typeDef", false), "original", true));
      }
    }
    {
      SNode arrayType = type;
      if (SNodeOperations.isInstanceOf(arrayType, "com.mbeddr.core.pointers.structure.ArrayType")) {
        return nestedTypeIsShared(SLinkOperations.getTarget(arrayType, "baseType", true));
      }
    }
    return false;
  }



  public static SNode sizeOfArray(final SNode arrayDeclaration) {
    if (!(SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), arrayDeclaration, "virtual_getType_704069370490430475", new Object[]{})), "com.mbeddr.core.pointers.structure.ArrayType"))) {
      return null;
    }
    if ((SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), arrayDeclaration, "virtual_getType_704069370490430475", new Object[]{})), "com.mbeddr.core.pointers.structure.ArrayType"), "sizeExpr", true) != null)) {
      return SNodeOperations.copyNode(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), arrayDeclaration, "virtual_getType_704069370490430475", new Object[]{})), "com.mbeddr.core.pointers.structure.ArrayType"), "sizeExpr", true));
    }
    if (SNodeOperations.isInstanceOf(arrayDeclaration, "com.mbeddr.core.statements.structure.LocalVariableDeclaration")) {
      return new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          SNode node_483189195580155346 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.NumberLiteral", null);
              SPropertyOperations.set(res, "value", (String.valueOf(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(arrayDeclaration, "com.mbeddr.core.statements.structure.LocalVariableDeclaration"), "init", true), "com.mbeddr.core.pointers.structure.ArrayInitExpression"), "exprs", true)).count())));
              return res;
            }
          }.invoke();
          return node_483189195580155346;
        }
      }.invoke();
    }
    if (SNodeOperations.isInstanceOf(arrayDeclaration, "com.mbeddr.core.modules.structure.GlobalVariableDeclaration")) {
      return new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          SNode node_483189195580259761 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.NumberLiteral", null);
              SPropertyOperations.set(res, "value", (String.valueOf(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(arrayDeclaration, "com.mbeddr.core.modules.structure.GlobalVariableDeclaration"), "init", true), "com.mbeddr.core.pointers.structure.ArrayInitExpression"), "exprs", true)).count())));
              return res;
            }
          }.invoke();
          return node_483189195580259761;
        }
      }.invoke();
    }
    return null;
  }



  public static List<SNode> buildInitMutexCallsFor(TemplateQueryContext genContext, SNode initMutexFunction, SNode type, SNode path, SNode variableDeclaration) {
    // If the variable type is a one dimensional array the dimension may have to be extracted from the 
    // initialization list. In comparison, multi-dimensional arrays and arrays as struct fields carry    
    // their dimensions always with themselves. 
    {
      SNode arrayType = type;
      if (SNodeOperations.isInstanceOf(arrayType, "com.mbeddr.core.pointers.structure.ArrayType")) {
        SNode arrayLength = sizeOfArray(variableDeclaration);
        return buildNestedInitMutexCallsForArrayType(genContext, initMutexFunction, arrayType, path, arrayLength);
      }
    }

    return buildNestedInitMutexCallsFor(genContext, initMutexFunction, type, path);
  }



  private static List<SNode> buildNestedInitMutexCallsFor(TemplateQueryContext genContext, SNode initMutexFunction, SNode currentType, SNode currentPath) {
    {
      SNode sharedType = currentType;
      if (SNodeOperations.isInstanceOf(sharedType, "TasksAndSyncs.structure.SharedType")) {
        List<SNode> calls = new ArrayList<SNode>();
        ListSequence.fromList(calls).insertElement(0, buildInitMutexCallFor(initMutexFunction, currentPath));
        ListSequence.fromList(calls).addSequence(ListSequence.fromList(buildNestedInitMutexCallsFor(genContext, initMutexFunction, SLinkOperations.getTarget(sharedType, "baseType", true), currentPath)));
        return calls;
      }
    }
    {
      SNode typeDefType = currentType;
      if (SNodeOperations.isInstanceOf(typeDefType, "com.mbeddr.core.udt.structure.TypeDefType")) {
        return buildNestedInitMutexCallsFor(genContext, initMutexFunction, SLinkOperations.getTarget(SLinkOperations.getTarget(typeDefType, "typeDef", false), "original", true), currentPath);
      }
    }
    {
      SNode structType = currentType;
      if (SNodeOperations.isInstanceOf(structType, "com.mbeddr.core.udt.structure.StructType")) {
        return buildNestedInitMutexCallsForStructType(genContext, initMutexFunction, currentType, currentPath);
      }
    }
    {
      SNode arrayType = currentType;
      if (SNodeOperations.isInstanceOf(arrayType, "com.mbeddr.core.pointers.structure.ArrayType")) {
        return buildNestedInitMutexCallsForArrayType(genContext, initMutexFunction, arrayType, currentPath, SLinkOperations.getTarget(arrayType, "sizeExpr", true));
      }
    }

    return null;
  }



  private static List<SNode> buildNestedInitMutexCallsForArrayType(TemplateQueryContext genContext, SNode initMutexFunction, SNode currentType, final SNode currentPath, SNode arrayLength) {
    SNode forRange = SNodeFactoryOperations.createNewNode("com.mbeddr.core.util.structure.ForRangeStatement", null);
    SPropertyOperations.set(forRange, "name", genContext.createUniqueName("i_", null));
    SLinkOperations.setTarget(SLinkOperations.getTarget(forRange, "range", true), "left", new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        SNode node_2648922052123525840 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.NumberLiteral", null);
            SPropertyOperations.set(res, "value", ("0"));
            return res;
          }
        }.invoke();
        return node_2648922052123525840;
      }
    }.invoke(), true);
    SLinkOperations.setTarget(SLinkOperations.getTarget(forRange, "range", true), "right", SNodeOperations.copyNode(arrayLength), true);

    final SNode indexRef = SConceptOperations.createNewNode("com.mbeddr.core.util.structure.ForRangeRef", null);
    SLinkOperations.setTarget(indexRef, "forRange", forRange, false);

    SNode subPath = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_2648922052123525871 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = currentPath;
            return res;
          }
        }.invoke();
        final SNode node_2648922052123525874 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = indexRef;
            return res;
          }
        }.invoke();
        SNode node_2648922052123525870 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.ArrayAccessExpr", null);
            SLinkOperations.setTarget(res, "expression", node_2648922052123525871, true);
            SLinkOperations.setTarget(res, "index", node_2648922052123525874, true);
            return res;
          }
        }.invoke();
        return node_2648922052123525870;
      }
    }.invoke();

    List<SNode> subCalls = buildNestedInitMutexCallsFor(genContext, initMutexFunction, SLinkOperations.getTarget(currentType, "baseType", true), subPath);

    if (subCalls == null || ListSequence.fromList(subCalls).isEmpty()) {
      return null;
    }

    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(forRange, "body", true), "statements", true)).addSequence(ListSequence.fromList(subCalls));
    List<SNode> calls = new ArrayList<SNode>();
    ListSequence.fromList(calls).addElement(forRange);
    return calls;
  }



  private static List<SNode> buildNestedInitMutexCallsForStructType(TemplateQueryContext genContext, SNode initMutexFunction, SNode currentType, final SNode currentPath) {
    List<SNode> calls = new ArrayList<SNode>();
    for (final SNode member : ListSequence.fromList(SUDeclaration_Behavior.call_members_9101132143318613823(SLinkOperations.getTarget(currentType, "struct", false)))) {
      SNode subPath = new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          final SNode node_2648922052123187170 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = currentPath;
              return res;
            }
          }.invoke();
          final SNode node_2648922052123187173 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.GenericMemberRef", null);
              SLinkOperations.setTarget(res, "member", member, false);
              return res;
            }
          }.invoke();
          SNode node_2648922052123187169 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.GenericDotExpression", null);
              SLinkOperations.setTarget(res, "expression", node_2648922052123187170, true);
              SLinkOperations.setTarget(res, "target", node_2648922052123187173, true);
              return res;
            }
          }.invoke();
          return node_2648922052123187169;
        }
      }.invoke();
      ListSequence.fromList(calls).addSequence(ListSequence.fromList(buildNestedInitMutexCallsFor(genContext, initMutexFunction, SLinkOperations.getTarget(member, "type", true), subPath)));
    }
    return calls;
  }



  private static SNode buildInitMutexCallFor(final SNode initMutexFunction, final SNode path) {
    return new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_5147307853652782375 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SNodeOperations.copyNode(path);
            return res;
          }
        }.invoke();
        final SNode node_5147307853652782374 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.AnyNodeItem", null);
            SLinkOperations.setTarget(res, "theNode", node_5147307853652782375, true);
            return res;
          }
        }.invoke();
        final SNode node_5147307853652782381 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.AbritraryTextItem", null);
            SPropertyOperations.set(res, "text", (".mutexAttribute"));
            return res;
          }
        }.invoke();
        final SNode node_5147307853652782371 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArbitraryTextExpression", null);
            SPropertyOperations.set(res, "requiredStdHeader", (""));
            ListSequence.fromList(SLinkOperations.getTargets(res, "items", true)).addElement(node_5147307853652782374);
            ListSequence.fromList(SLinkOperations.getTargets(res, "items", true)).addElement(node_5147307853652782381);
            return res;
          }
        }.invoke();
        final SNode node_5147307853652782370 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.ReferenceExpr", null);
            SLinkOperations.setTarget(res, "expression", node_5147307853652782371, true);
            return res;
          }
        }.invoke();
        final SNode node_5147307853652782392 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SNodeOperations.copyNode(path);
            return res;
          }
        }.invoke();
        final SNode node_5147307853652782391 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.AnyNodeItem", null);
            SLinkOperations.setTarget(res, "theNode", node_5147307853652782392, true);
            return res;
          }
        }.invoke();
        final SNode node_5147307853652782398 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.AbritraryTextItem", null);
            SPropertyOperations.set(res, "text", (".mutex"));
            return res;
          }
        }.invoke();
        final SNode node_5147307853652782388 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArbitraryTextExpression", null);
            SPropertyOperations.set(res, "requiredStdHeader", (""));
            ListSequence.fromList(SLinkOperations.getTargets(res, "items", true)).addElement(node_5147307853652782391);
            ListSequence.fromList(SLinkOperations.getTargets(res, "items", true)).addElement(node_5147307853652782398);
            return res;
          }
        }.invoke();
        final SNode node_5147307853652782387 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.ReferenceExpr", null);
            SLinkOperations.setTarget(res, "expression", node_5147307853652782388, true);
            return res;
          }
        }.invoke();
        final SNode node_5147307853652782367 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.FunctionCall", null);
            ListSequence.fromList(SLinkOperations.getTargets(res, "actuals", true)).addElement(node_5147307853652782370);
            ListSequence.fromList(SLinkOperations.getTargets(res, "actuals", true)).addElement(node_5147307853652782387);
            SLinkOperations.setTarget(res, "function", initMutexFunction, false);
            return res;
          }
        }.invoke();
        SNode node_5147307853652782366 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ExpressionStatement", null);
            SLinkOperations.setTarget(res, "expr", node_5147307853652782367, true);
            return res;
          }
        }.invoke();
        return node_5147307853652782366;
      }
    }.invoke();
  }



  private static SNode buildDestroyMutexCallFor(final SNode destroyMutexFunction, final SNode path) {
    return new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_5244467561005270383 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SNodeOperations.copyNode(path);
            return res;
          }
        }.invoke();
        final SNode node_5244467561005270382 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.AnyNodeItem", null);
            SLinkOperations.setTarget(res, "theNode", node_5244467561005270383, true);
            return res;
          }
        }.invoke();
        final SNode node_5244467561005270389 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.AbritraryTextItem", null);
            SPropertyOperations.set(res, "text", (".mutex"));
            return res;
          }
        }.invoke();
        final SNode node_5244467561005270379 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArbitraryTextExpression", null);
            SPropertyOperations.set(res, "requiredStdHeader", (""));
            ListSequence.fromList(SLinkOperations.getTargets(res, "items", true)).addElement(node_5244467561005270382);
            ListSequence.fromList(SLinkOperations.getTargets(res, "items", true)).addElement(node_5244467561005270389);
            return res;
          }
        }.invoke();
        final SNode node_5244467561005270378 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.ReferenceExpr", null);
            SLinkOperations.setTarget(res, "expression", node_5244467561005270379, true);
            return res;
          }
        }.invoke();
        final SNode node_5244467561005270358 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.FunctionCall", null);
            ListSequence.fromList(SLinkOperations.getTargets(res, "actuals", true)).addElement(node_5244467561005270378);
            SLinkOperations.setTarget(res, "function", destroyMutexFunction, false);
            return res;
          }
        }.invoke();
        SNode node_5244467561005270357 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ExpressionStatement", null);
            SLinkOperations.setTarget(res, "expr", node_5244467561005270358, true);
            return res;
          }
        }.invoke();
        return node_5244467561005270357;
      }
    }.invoke();
  }




  public static void convertInitToDestroyMutexCall(SNode context, SNode initFunction, SNode destroyFunction) {
    for (SNode functionCall : ListSequence.fromList(SNodeOperations.getDescendants(context, "com.mbeddr.core.modules.structure.FunctionCall", false, new String[]{}))) {
      if (SLinkOperations.getTarget(functionCall, "function", false) == initFunction) {
        SLinkOperations.setTarget(functionCall, "function", destroyFunction, false);
        ListSequence.fromList(SLinkOperations.getTargets(functionCall, "actuals", true)).removeElementAt(0);
      }
    }
  }



  public static SNode buildVoidExportedFunction(List<SNode> statements, List<SNode> arguments, final String name) {
    SNode function = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_5244467561006211517 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.VoidType", null);
            return res;
          }
        }.invoke();
        final SNode node_5244467561006211521 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.StatementList", null);
            return res;
          }
        }.invoke();
        SNode node_5244467561006211514 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.Function", null);
            SPropertyOperations.set(res, "exported", "" + ((true)));
            SPropertyOperations.set(res, "name", (name));
            SPropertyOperations.set(res, "__inlinetext", (""));
            SPropertyOperations.set(res, "contextModelId", (null));
            SPropertyOperations.set(res, "contextNodeId", (null));
            SPropertyOperations.set(res, "overriddenCodeLocation", (null));
            SLinkOperations.setTarget(res, "type", node_5244467561006211517, true);
            SLinkOperations.setTarget(res, "body", node_5244467561006211521, true);
            return res;
          }
        }.invoke();
        return node_5244467561006211514;
      }
    }.invoke();
    ListSequence.fromList(SLinkOperations.getTargets(function, "arguments", true)).addSequence(ListSequence.fromList(arguments));
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(function, "body", true), "statements", true)).addSequence(ListSequence.fromList(statements));
    return function;
  }



  public static SNode buildVoidInlineFunction(List<SNode> statements, List<SNode> arguments, final String name) {
    SNode function = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_5147307853645499662 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.VoidType", null);
            return res;
          }
        }.invoke();
        final SNode node_5147307853645499666 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.StatementList", null);
            return res;
          }
        }.invoke();
        SNode node_5147307853645499659 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.Function", null);
            SPropertyOperations.set(res, "exported", "" + ((false)));
            SPropertyOperations.set(res, "inline", "" + ((true)));
            SPropertyOperations.set(res, "name", (name));
            SPropertyOperations.set(res, "__inlinetext", (""));
            SPropertyOperations.set(res, "contextModelId", (null));
            SPropertyOperations.set(res, "contextNodeId", (null));
            SPropertyOperations.set(res, "overriddenCodeLocation", (null));
            SLinkOperations.setTarget(res, "type", node_5147307853645499662, true);
            SLinkOperations.setTarget(res, "body", node_5147307853645499666, true);
            return res;
          }
        }.invoke();
        return node_5147307853645499659;
      }
    }.invoke();
    ListSequence.fromList(SLinkOperations.getTargets(function, "arguments", true)).addSequence(ListSequence.fromList(arguments));
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(function, "body", true), "statements", true)).addSequence(ListSequence.fromList(statements));
    return function;
  }



  public static SNode mapArrayTypeToPointerType(SNode type) {
    {
      SNode arrayType = type;
      if (SNodeOperations.isInstanceOf(arrayType, "com.mbeddr.core.pointers.structure.ArrayType")) {
        final SNode newBaseType = mapArrayTypeToPointerType(SLinkOperations.getTarget(arrayType, "baseType", true));
        return new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            final SNode node_5147307853650413032 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = newBaseType;
                return res;
              }
            }.invoke();
            SNode node_5147307853650412866 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.PointerType", null);
                SLinkOperations.setTarget(res, "baseType", node_5147307853650413032, true);
                return res;
              }
            }.invoke();
            return node_5147307853650412866;
          }
        }.invoke();
      }
    }
    return SNodeOperations.copyNode(type);
  }



  public static SNode buildStartSyncFunction(final TemplateQueryContext genContext, int numberOfArguments) {
    final SNode whileLoop = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_3348893923577374856 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.TrueLiteral", null);
            return res;
          }
        }.invoke();
        final SNode node_3348893923577369592 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.StatementList", null);
            return res;
          }
        }.invoke();
        SNode node_3348893923577369095 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.WhileStatement", null);
            SLinkOperations.setTarget(res, "condition", node_3348893923577374856, true);
            SLinkOperations.setTarget(res, "body", node_3348893923577369592, true);
            return res;
          }
        }.invoke();
        return node_3348893923577369095;
      }
    }.invoke();

    List<SNode> arguments = new ArrayList<SNode>();
    List<SNode> argumentRefs = new ArrayList<SNode>();
    for (int i = 0; i < numberOfArguments; ++i) {
      final SNode argument = new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          final SNode node_3348893923579976538 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.AbritraryTextItem", null);
              SPropertyOperations.set(res, "text", ("pthread_mutex_t"));
              return res;
            }
          }.invoke();
          final SNode node_3348893923579976535 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArbitraryTextType", null);
              SPropertyOperations.set(res, "requiredStdHeader", ("<pthread.h>"));
              ListSequence.fromList(SLinkOperations.getTargets(res, "items", true)).addElement(node_3348893923579976538);
              return res;
            }
          }.invoke();
          final SNode node_3348893923577152109 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.PointerType", null);
              SLinkOperations.setTarget(res, "baseType", node_3348893923579976535, true);
              return res;
            }
          }.invoke();
          SNode node_3348893923577146139 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.Argument", null);
              SPropertyOperations.set(res, "name", (genContext.createUniqueName("mutex", null)));
              SLinkOperations.setTarget(res, "type", node_3348893923577152109, true);
              return res;
            }
          }.invoke();
          return node_3348893923577146139;
        }
      }.invoke();
      ListSequence.fromList(arguments).addElement(argument);

      final SNode argumentRef = new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          SNode node_3348893923577452494 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.ArgumentRef", null);
              SLinkOperations.setTarget(res, "arg", argument, false);
              return res;
            }
          }.invoke();
          return node_3348893923577452494;
        }
      }.invoke();
      SNode conditionalLock = new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          final SNode node_3348893923577562266 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.Int32tType", null);
              return res;
            }
          }.invoke();
          final SNode node_5853110027229257734 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SNodeOperations.copyNode(argumentRef);
              return res;
            }
          }.invoke();
          final SNode node_3348893923577554580 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArbitraryFunctionCall", null);
              SPropertyOperations.set(res, "requiredStdHeader", ("<pthread.h>"));
              SPropertyOperations.set(res, "calledFunctionName", ("mutex_trylock"));
              SLinkOperations.setTarget(res, "dummyType", node_3348893923577562266, true);
              ListSequence.fromList(SLinkOperations.getTargets(res, "arguments", true)).addElement(node_5853110027229257734);
              return res;
            }
          }.invoke();
          final SNode node_3348893923577580300 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.NumberLiteral", null);
              SPropertyOperations.set(res, "value", ("0"));
              return res;
            }
          }.invoke();
          final SNode node_3348893923577554141 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.NotEqualsExpression", null);
              SLinkOperations.setTarget(res, "left", node_3348893923577554580, true);
              SLinkOperations.setTarget(res, "right", node_3348893923577580300, true);
              return res;
            }
          }.invoke();
          final SNode node_3348893923577588883 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ContinueStatement", null);
              return res;
            }
          }.invoke();
          final SNode node_3348893923577588461 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.StatementList", null);
              ListSequence.fromList(SLinkOperations.getTargets(res, "statements", true)).addElement(node_3348893923577588883);
              return res;
            }
          }.invoke();
          SNode node_3348893923577553459 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.IfStatement", null);
              SLinkOperations.setTarget(res, "condition", node_3348893923577554141, true);
              SLinkOperations.setTarget(res, "thenPart", node_3348893923577588461, true);
              return res;
            }
          }.invoke();
          return node_3348893923577553459;
        }
      }.invoke();

      for (final SNode previousArgRef : ListSequence.fromList(argumentRefs).reversedList()) {
        ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(conditionalLock, "thenPart", true), "statements", true)).insertElement(0, new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            final SNode node_3348893923577833650 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = SNodeOperations.copyNode(previousArgRef);
                return res;
              }
            }.invoke();
            final SNode node_3348893923577817961 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArbitraryFunctionCall", null);
                SPropertyOperations.set(res, "requiredStdHeader", ("<pthread.h>"));
                SPropertyOperations.set(res, "calledFunctionName", ("mutex_unlock"));
                ListSequence.fromList(SLinkOperations.getTargets(res, "arguments", true)).addElement(node_3348893923577833650);
                return res;
              }
            }.invoke();
            SNode node_3348893923577802329 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ExpressionStatement", null);
                SLinkOperations.setTarget(res, "expr", node_3348893923577817961, true);
                return res;
              }
            }.invoke();
            return node_3348893923577802329;
          }
        }.invoke());
      }

      ListSequence.fromList(argumentRefs).addElement(argumentRef);
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(whileLoop, "body", true), "statements", true)).addElement(conditionalLock);
    }

    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(whileLoop, "body", true), "statements", true)).addElement(SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.BreakStatement", null));

    SNode startSyncFunction = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_3348893923577071897 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.VoidType", null);
            return res;
          }
        }.invoke();
        final SNode node_3348893923577836405 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = whileLoop;
            return res;
          }
        }.invoke();
        final SNode node_3348893923577342514 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.StatementList", null);
            ListSequence.fromList(SLinkOperations.getTargets(res, "statements", true)).addElement(node_3348893923577836405);
            return res;
          }
        }.invoke();
        SNode node_3348893923577066539 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.Function", null);
            SPropertyOperations.set(res, "exported", "" + ((true)));
            SPropertyOperations.set(res, "name", (genContext.createUniqueName("startSync", null)));
            SPropertyOperations.set(res, "__inlinetext", (""));
            SPropertyOperations.set(res, "contextModelId", (null));
            SPropertyOperations.set(res, "contextNodeId", (null));
            SPropertyOperations.set(res, "overriddenCodeLocation", (null));
            SLinkOperations.setTarget(res, "type", node_3348893923577071897, true);
            SLinkOperations.setTarget(res, "body", node_3348893923577342514, true);
            return res;
          }
        }.invoke();
        return node_3348893923577066539;
      }
    }.invoke();

    ListSequence.fromList(SLinkOperations.getTargets(startSyncFunction, "arguments", true)).addSequence(ListSequence.fromList(arguments));

    return startSyncFunction;
  }



  public static SNode buildStopSyncFunction(final TemplateQueryContext genContext, int numberOfArguments) {
    SNode stopSyncFunction = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_3348893923577842215 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.VoidType", null);
            return res;
          }
        }.invoke();
        final SNode node_3348893923577842222 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.StatementList", null);
            return res;
          }
        }.invoke();
        SNode node_3348893923577842214 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.Function", null);
            SPropertyOperations.set(res, "exported", "" + ((true)));
            SPropertyOperations.set(res, "name", (genContext.createUniqueName("stopSync", null)));
            SPropertyOperations.set(res, "__inlinetext", (""));
            SPropertyOperations.set(res, "contextModelId", (null));
            SPropertyOperations.set(res, "contextNodeId", (null));
            SPropertyOperations.set(res, "overriddenCodeLocation", (null));
            SLinkOperations.setTarget(res, "type", node_3348893923577842215, true);
            SLinkOperations.setTarget(res, "body", node_3348893923577842222, true);
            return res;
          }
        }.invoke();
        return node_3348893923577842214;
      }
    }.invoke();

    List<SNode> arguments = new ArrayList<SNode>();
    List<SNode> unlockStatements = new ArrayList<SNode>();
    for (int i = 0; i < numberOfArguments; ++i) {
      final SNode argument = new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          final SNode node_3348893923579966801 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.AbritraryTextItem", null);
              SPropertyOperations.set(res, "text", ("pthread_mutex_t"));
              return res;
            }
          }.invoke();
          final SNode node_3348893923577842107 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArbitraryTextType", null);
              SPropertyOperations.set(res, "requiredStdHeader", ("<pthread.h>"));
              ListSequence.fromList(SLinkOperations.getTargets(res, "items", true)).addElement(node_3348893923579966801);
              return res;
            }
          }.invoke();
          final SNode node_3348893923577842106 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.PointerType", null);
              SLinkOperations.setTarget(res, "baseType", node_3348893923577842107, true);
              return res;
            }
          }.invoke();
          SNode node_3348893923577842100 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.Argument", null);
              SPropertyOperations.set(res, "name", (genContext.createUniqueName("mutex", null)));
              SLinkOperations.setTarget(res, "type", node_3348893923577842106, true);
              return res;
            }
          }.invoke();
          return node_3348893923577842100;
        }
      }.invoke();
      ListSequence.fromList(arguments).addElement(argument);

      ListSequence.fromList(unlockStatements).addElement(new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          final SNode node_3348893923578045724 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.ArgumentRef", null);
              SLinkOperations.setTarget(res, "arg", argument, false);
              return res;
            }
          }.invoke();
          final SNode node_3348893923578045719 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArbitraryFunctionCall", null);
              SPropertyOperations.set(res, "requiredStdHeader", ("<pthread.h>"));
              SPropertyOperations.set(res, "calledFunctionName", ("mutex_unlock"));
              ListSequence.fromList(SLinkOperations.getTargets(res, "arguments", true)).addElement(node_3348893923578045724);
              return res;
            }
          }.invoke();
          SNode node_3348893923578043494 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ExpressionStatement", null);
              SLinkOperations.setTarget(res, "expr", node_3348893923578045719, true);
              return res;
            }
          }.invoke();
          return node_3348893923578043494;
        }
      }.invoke());
    }

    ListSequence.fromList(SLinkOperations.getTargets(stopSyncFunction, "arguments", true)).addSequence(ListSequence.fromList(arguments));
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(stopSyncFunction, "body", true), "statements", true)).addSequence(ListSequence.fromList(unlockStatements));

    return stopSyncFunction;
  }




  /**
   * TODO: remove
   */
  public static Tuples._2<List<SNode>, List<SNode>> buildMutexDeclarationsAndReferences(final TemplateQueryContext genContext, List<SNode> ressources) {
    List<SNode> references = new ArrayList<SNode>();
    final List<SNode> mutexDeclarations = new ArrayList<SNode>();

    for (final SNode ressource : ListSequence.fromList(ressources)) {
      final Wrappers._T<SNode> wrappedExpression = new Wrappers._T<SNode>();
      // preserve the binding of * for dereferences in the output: (*foo).mutex 
      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(ressource, "expression", true), "com.mbeddr.core.pointers.structure.DerefExpr")) {
        wrappedExpression.value = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            final SNode node_3018789929293339415 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = SLinkOperations.getTarget(ressource, "expression", true);
                return res;
              }
            }.invoke();
            SNode node_3018789929293338739 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.ParensExpression", null);
                SLinkOperations.setTarget(res, "expression", node_3018789929293339415, true);
                return res;
              }
            }.invoke();
            return node_3018789929293338739;
          }
        }.invoke();
      } else {
        wrappedExpression.value = SLinkOperations.getTarget(ressource, "expression", true);
      }

      ListSequence.fromList(mutexDeclarations).addElement(new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          final SNode node_3348893923581290756 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.AbritraryTextItem", null);
              SPropertyOperations.set(res, "text", ("pthread_mutex_t"));
              return res;
            }
          }.invoke();
          final SNode node_3348893923581290753 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArbitraryTextType", null);
              SPropertyOperations.set(res, "requiredStdHeader", ("<pthread.h>"));
              ListSequence.fromList(SLinkOperations.getTargets(res, "items", true)).addElement(node_3348893923581290756);
              return res;
            }
          }.invoke();
          final SNode node_3348893923581290752 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.PointerType", null);
              SLinkOperations.setTarget(res, "baseType", node_3348893923581290753, true);
              return res;
            }
          }.invoke();
          final SNode node_3348893923593330342 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = wrappedExpression.value;
              return res;
            }
          }.invoke();
          final SNode node_3348893923593329989 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.AnyNodeItem", null);
              SLinkOperations.setTarget(res, "theNode", node_3348893923593330342, true);
              return res;
            }
          }.invoke();
          final SNode node_3348893923581290771 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.AbritraryTextItem", null);
              SPropertyOperations.set(res, "text", (".mutex"));
              return res;
            }
          }.invoke();
          final SNode node_3348893923592714362 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArbitraryTextExpression", null);
              SPropertyOperations.set(res, "requiredStdHeader", (null));
              ListSequence.fromList(SLinkOperations.getTargets(res, "items", true)).addElement(node_3348893923593329989);
              ListSequence.fromList(SLinkOperations.getTargets(res, "items", true)).addElement(node_3348893923581290771);
              return res;
            }
          }.invoke();
          final SNode node_3348893923581290762 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.ReferenceExpr", null);
              SLinkOperations.setTarget(res, "expression", node_3348893923592714362, true);
              return res;
            }
          }.invoke();
          SNode node_3348893923581290746 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.LocalVariableDeclaration", null);
              SPropertyOperations.set(res, "name", (genContext.createUniqueName("mutex", null)));
              SLinkOperations.setTarget(res, "type", node_3348893923581290752, true);
              SLinkOperations.setTarget(res, "init", node_3348893923581290762, true);
              return res;
            }
          }.invoke();
          return node_3348893923581290746;
        }
      }.invoke());
      ListSequence.fromList(references).addElement(new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          SNode node_3018789929289411618 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.LocalVarRef", null);
              SLinkOperations.setTarget(res, "var", ListSequence.fromList(mutexDeclarations).last(), false);
              return res;
            }
          }.invoke();
          return node_3018789929289411618;
        }
      }.invoke());
    }

    return MultiTuple.<List<SNode>,List<SNode>>from(mutexDeclarations, references);
  }



  public static List<SNode> buildMutexRefs(TemplateQueryContext genContext, List<SNode> ressources) {
    List<SNode> mutexReferences = new ArrayList<SNode>();

    for (final SNode ressource : ListSequence.fromList(ressources)) {
      final Wrappers._T<SNode> wrappedExpression = new Wrappers._T<SNode>();
      // preserve the binding of * for dereferences in the output: (*foo).mutex 
      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(ressource, "expression", true), "com.mbeddr.core.pointers.structure.DerefExpr")) {
        wrappedExpression.value = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            final SNode node_5853110027229907128 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = SLinkOperations.getTarget(ressource, "expression", true);
                return res;
              }
            }.invoke();
            SNode node_5853110027229907127 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.ParensExpression", null);
                SLinkOperations.setTarget(res, "expression", node_5853110027229907128, true);
                return res;
              }
            }.invoke();
            return node_5853110027229907127;
          }
        }.invoke();
      } else {
        wrappedExpression.value = SLinkOperations.getTarget(ressource, "expression", true);
      }

      final Wrappers._T<String> mutexAccessSign = new Wrappers._T<String>();
      if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(ressource, "expression", true)), "com.mbeddr.core.pointers.structure.PointerType")) {
        mutexAccessSign.value = "->";
      } else {
        mutexAccessSign.value = ".";
      }

      ListSequence.fromList(mutexReferences).addElement(new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          final SNode node_5853110027231590363 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = wrappedExpression.value;
              return res;
            }
          }.invoke();
          final SNode node_5853110027231590361 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.AnyNodeItem", null);
              SLinkOperations.setTarget(res, "theNode", node_5853110027231590363, true);
              return res;
            }
          }.invoke();
          final SNode node_5853110027231590366 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.AbritraryTextItem", null);
              SPropertyOperations.set(res, "text", (mutexAccessSign.value + "mutex"));
              return res;
            }
          }.invoke();
          final SNode node_5853110027232305191 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArbitraryTextExpression", null);
              SPropertyOperations.set(res, "requiredStdHeader", (null));
              ListSequence.fromList(SLinkOperations.getTargets(res, "items", true)).addElement(node_5853110027231590361);
              ListSequence.fromList(SLinkOperations.getTargets(res, "items", true)).addElement(node_5853110027231590366);
              return res;
            }
          }.invoke();
          final SNode node_5853110027232303628 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.ParensExpression", null);
              SLinkOperations.setTarget(res, "expression", node_5853110027232305191, true);
              return res;
            }
          }.invoke();
          SNode node_5853110027231590358 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.ReferenceExpr", null);
              SLinkOperations.setTarget(res, "expression", node_5853110027232303628, true);
              return res;
            }
          }.invoke();
          return node_5853110027231590358;
        }
      }.invoke());
    }

    return mutexReferences;
  }



  public static SNode buildFunctionCall(List<SNode> arguments, final SNode function) {
    SNode functionCall = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_3348893923578843468 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.FunctionCall", null);
            SLinkOperations.setTarget(res, "function", function, false);
            return res;
          }
        }.invoke();
        SNode node_3348893923578604134 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ExpressionStatement", null);
            SLinkOperations.setTarget(res, "expr", node_3348893923578843468, true);
            return res;
          }
        }.invoke();
        return node_3348893923578604134;
      }
    }.invoke();
    ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(functionCall, "expr", true), "com.mbeddr.core.modules.structure.FunctionCall"), "actuals", true)).addSequence(ListSequence.fromList(arguments));
    return functionCall;
  }



  public static void copyList(List<SNode> source, List<SNode> target) {
    for (SNode element : ListSequence.fromList(source)) {
      ListSequence.fromList(target).addElement(SNodeOperations.copyNode(element));
    }
  }
}
