package TasksAndSyncs.generator.util;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.generator.template.TemplateQueryContext;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import com.mbeddr.core.expressions.behavior.Type_Behavior;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class SyncDefinitionBuilder {


  public static SNode addStructForType(TemplateQueryContext genContext, List<Pair<SNode, SNode>> typesAndStructs, SNode sharedType) {
    // create a new entry 
    Pair<SNode, SNode> typeAndStruct = new Pair(SLinkOperations.getTarget(sharedType, "baseType", true), buildSharedStruct(genContext, sharedType));
    ListSequence.fromList(typesAndStructs).addElement(typeAndStruct);
    return typeAndStruct.second;
  }



  public static SNode getStructForType(TemplateQueryContext genContext, List<Pair<SNode, SNode>> typesAndStructs, SNode sharedType) {
    // try to find an existing entry in the list 
    for (Pair<SNode, SNode> typeAndStruct : ListSequence.fromList(typesAndStructs)) {
      SNode currentType = typeAndStruct.first;
      SNode baseType = SLinkOperations.getTarget(sharedType, "baseType", true);
      if (Type_Behavior.call_isSubtypeOf_2124837493917340416(currentType, baseType) && Type_Behavior.call_isSubtypeOf_2124837493917340416(baseType, currentType)) {
        return typeAndStruct.second;
      }
    }
    return null;
  }



  public static SNode buildSharedStruct(final TemplateQueryContext genContext, final SNode sharedType) {
    String rawName = BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(sharedType, "baseType", true), "virtual_getPresentation_1213877396640", new Object[]{}).replaceAll("\\s", "").replaceAll("\\*", "Pointer");
    String namePart1 = "Shared" + rawName.substring(0, 1).toUpperCase();
    String namePart2 = rawName.substring(1);
    final String name = namePart1 + namePart2;
    return new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_2852056939580659788 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.AbritraryTextItem", null);
            SPropertyOperations.set(res, "text", ("pthread_mutexattr_t"));
            return res;
          }
        }.invoke();
        final SNode node_2852056939580657256 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArbitraryTextType", null);
            SPropertyOperations.set(res, "requiredStdHeader", ("<pthread.h>"));
            ListSequence.fromList(SLinkOperations.getTargets(res, "items", true)).addElement(node_2852056939580659788);
            return res;
          }
        }.invoke();
        final SNode node_2852056939580655953 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.Member", null);
            SPropertyOperations.set(res, "name", ("mutexAttribute"));
            SLinkOperations.setTarget(res, "type", node_2852056939580657256, true);
            return res;
          }
        }.invoke();
        final SNode node_2852056939580667987 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.AbritraryTextItem", null);
            SPropertyOperations.set(res, "text", ("pthread_mutex_t"));
            return res;
          }
        }.invoke();
        final SNode node_2852056939580667984 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArbitraryTextType", null);
            SPropertyOperations.set(res, "requiredStdHeader", ("<pthread.h>"));
            ListSequence.fromList(SLinkOperations.getTargets(res, "items", true)).addElement(node_2852056939580667987);
            return res;
          }
        }.invoke();
        final SNode node_2852056939580666649 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.Member", null);
            SPropertyOperations.set(res, "name", ("mutex"));
            SLinkOperations.setTarget(res, "type", node_2852056939580667984, true);
            return res;
          }
        }.invoke();
        final SNode node_2852056939580671093 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SNodeOperations.copyNode(SLinkOperations.getTarget(sharedType, "baseType", true));
            return res;
          }
        }.invoke();
        final SNode node_2852056939580671092 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.Member", null);
            SPropertyOperations.set(res, "name", ("value"));
            SLinkOperations.setTarget(res, "type", node_2852056939580671093, true);
            return res;
          }
        }.invoke();
        SNode node_2852056939580462351 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.StructDeclaration", null);
            SPropertyOperations.set(res, "exported", "" + ((true)));
            SPropertyOperations.set(res, "name", (genContext.createUniqueName(name, null)));
            ListSequence.fromList(SLinkOperations.getTargets(res, "members", true)).addElement(node_2852056939580655953);
            ListSequence.fromList(SLinkOperations.getTargets(res, "members", true)).addElement(node_2852056939580666649);
            ListSequence.fromList(SLinkOperations.getTargets(res, "members", true)).addElement(node_2852056939580671092);
            return res;
          }
        }.invoke();
        return node_2852056939580462351;
      }
    }.invoke();
  }
}
