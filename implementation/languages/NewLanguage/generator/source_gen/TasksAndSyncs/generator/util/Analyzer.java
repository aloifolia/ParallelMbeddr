package TasksAndSyncs.generator.util;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class Analyzer {


  public static boolean isLValue(SNode expression) {
    if (SNodeOperations.isInstanceOf(expression, "com.mbeddr.core.statements.structure.LocalVarRef") || SNodeOperations.isInstanceOf(expression, "com.mbeddr.core.modules.structure.GlobalVarRef") || SNodeOperations.isInstanceOf(expression, "com.mbeddr.core.pointers.structure.DerefExpr")) {
      return true;
    }
    {
      SNode referenceExpression = expression;
      if (SNodeOperations.isInstanceOf(referenceExpression, "com.mbeddr.core.pointers.structure.ReferenceExpr")) {
        return isLValue(SLinkOperations.getTarget(referenceExpression, "expression", true));
      }
    }
    {
      SNode genericDotExpression = expression;
      if (SNodeOperations.isInstanceOf(genericDotExpression, "com.mbeddr.core.expressions.structure.GenericDotExpression")) {
        return isLValue(SLinkOperations.getTarget(genericDotExpression, "expression", true));
      }
    }
    {
      SNode arrayAccessExpression = expression;
      if (SNodeOperations.isInstanceOf(arrayAccessExpression, "com.mbeddr.core.pointers.structure.ArrayAccessExpr")) {
        return isLValue(SLinkOperations.getTarget(arrayAccessExpression, "expression", true));
      }
    }
    return false;
  }


}
