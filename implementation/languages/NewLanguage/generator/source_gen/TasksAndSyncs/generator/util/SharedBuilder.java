package TasksAndSyncs.generator.util;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import com.mbeddr.core.expressions.behavior.Type_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import com.mbeddr.core.udt.behavior.SUDeclaration_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.IMapping;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.generator.template.TemplateQueryContext;
import jetbrains.mps.typesystem.inference.TypeChecker;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import com.mbeddr.core.statements.behavior.BreakStatement_Behavior;
import com.mbeddr.core.statements.behavior.ContinueStatement_Behavior;
import com.mbeddr.core.modules.behavior.ReturnStatement_Behavior;

public class SharedBuilder {
  /**
   * @type: a type that does not contain any typedefs
   */
  public static SNode getStructForSharedType(List<Pair<SNode, SNode>> typesAndStructs, SNode type) {
    // try to find an existing entry in the list 
    for (Pair<SNode, SNode> typeAndStruct : ListSequence.fromList(typesAndStructs)) {
      SNode currentType = typeAndStruct.first;
      if (Type_Behavior.call_isSubtypeOf_2124837493917340416(currentType, type) && Type_Behavior.call_isSubtypeOf_2124837493917340416(type, currentType)) {
        return typeAndStruct.second;
      }
    }
    return null;
  }

  /**
   * @type: a type that does not contain any typedefs
   */
  public static <T, U extends SNode, V extends U> T getValueForType(List<Pair<U, T>> typesToValues, V type) {
    // try to find an existing entry in the list 
    for (Pair<U, T> typeAndStruct : ListSequence.fromList(typesToValues)) {
      SNode currentType = typeAndStruct.first;
      if (Type_Behavior.call_isSubtypeOf_2124837493917340416(currentType, type) && Type_Behavior.call_isSubtypeOf_2124837493917340416(SNodeOperations.cast(type, "com.mbeddr.core.expressions.structure.Type"), currentType)) {
        List<SNode> subPoiLikes1 = getPointerLikeTypes(currentType);
        List<SNode> subPoiLikes2 = getPointerLikeTypes(type);
        if (ListSequence.fromList(subPoiLikes1).count() == ListSequence.fromList(subPoiLikes2).count()) {
          boolean noCoincidingPointerAndArrayTypes = true;
          for (int i = 0; i < ListSequence.fromList(subPoiLikes1).count(); ++i) {
            noCoincidingPointerAndArrayTypes &= areNotPointerAndArrayTypes(ListSequence.fromList(subPoiLikes1).getElement(i), ListSequence.fromList(subPoiLikes2).getElement(i));
          }
          if (noCoincidingPointerAndArrayTypes) {
            return typeAndStruct.second;
          }
        }
      }
    }
    return null;
  }



  public static boolean areNotPointerAndArrayTypes(SNode type1, SNode type2) {
    if (SNodeOperations.isInstanceOf(type1, "com.mbeddr.core.pointers.structure.ArrayType") && SNodeOperations.isInstanceOf(type2, "com.mbeddr.core.pointers.structure.PointerType")) {
      return false;
    }
    if (SNodeOperations.isInstanceOf(type1, "com.mbeddr.core.pointers.structure.PointerType") && SNodeOperations.isInstanceOf(type2, "com.mbeddr.core.pointers.structure.ArrayType")) {
      return false;
    }
    return true;
  }



  private static List<SNode> getPointerLikeTypes(SNode type) {
    List<SNode> pointerLikeTypes = new ArrayList<SNode>();
    if (SNodeOperations.isInstanceOf(type, "com.mbeddr.core.pointers.structure.ArrayType") || SNodeOperations.isInstanceOf(type, "com.mbeddr.core.pointers.structure.PointerType")) {
      ListSequence.fromList(pointerLikeTypes).addElement(type);
    }
    return ListSequence.fromList(pointerLikeTypes).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(type, "com.mbeddr.core.expressions.structure.Type", false, new String[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "com.mbeddr.core.pointers.structure.ArrayType") || SNodeOperations.isInstanceOf(it, "com.mbeddr.core.pointers.structure.PointerType");
      }
    }));
  }



  public Set<SNode> getStructsWithNestedSharedData() {
    final Set<SNode> structs = SetSequence.fromSet(new HashSet<SNode>());
    ListSequence.fromList(SModelOperations.getRoots(model, "com.mbeddr.core.modules.structure.ImplementationModule")).visitAll(new IVisitor<SNode>() {
      public void visit(SNode module) {
        ListSequence.fromList(SNodeOperations.getDescendants(module, "com.mbeddr.core.udt.structure.StructDeclaration", false, new String[]{})).visitAll(new IVisitor<SNode>() {
          public void visit(SNode struct) {
            SetSequence.fromSet(structs).addSequence(SetSequence.fromSet(getStructsWithNestedSharedDataRec(struct)));
          }
        });
      }
    });
    return structs;
  }



  private Set<SNode> getStructsWithNestedSharedDataRec(SNode struct) {
    Set<SNode> structsWithNestedSharedData = SetSequence.fromSet(new HashSet<SNode>());
    for (SNode member : ListSequence.fromList(SUDeclaration_Behavior.call_members_9101132143318613823(struct))) {
      SNode strippedMemberType = resolveAndStripArrayTypes(SLinkOperations.getTarget(member, "type", true));
      if (SNodeOperations.isInstanceOf(strippedMemberType, "TasksAndSyncs.structure.SharedType")) {
        SetSequence.fromSet(structsWithNestedSharedData).addElement(struct);
      } else if (SNodeOperations.isInstanceOf(strippedMemberType, "com.mbeddr.core.udt.structure.StructType")) {
        SetSequence.fromSet(structsWithNestedSharedData).addSequence(SetSequence.fromSet(getStructsWithNestedSharedDataRec(SLinkOperations.getTarget(SNodeOperations.cast(strippedMemberType, "com.mbeddr.core.udt.structure.StructType"), "struct", false))));
      }
    }
    return structsWithNestedSharedData;
  }



  private static SNode resolveAndStripArrayTypes(SNode type) {
    SNode typeCopy = resolveType(type);
    while (SNodeOperations.isInstanceOf(typeCopy, "com.mbeddr.core.pointers.structure.ArrayType")) {
      typeCopy = SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(typeCopy, "com.mbeddr.core.pointers.structure.ArrayType"), "baseType", true), "com.mbeddr.core.expressions.structure.Type");
    }
    return typeCopy;
  }



  public Map<SNode, SNode> getSharedToResolvedTypes() {
    final Map<SNode, SNode> sharedToResolvedTypes = MapSequence.fromMap(new HashMap<SNode, SNode>());
    ListSequence.fromList(SModelOperations.getRoots(model, "com.mbeddr.core.modules.structure.ImplementationModule")).visitAll(new IVisitor<SNode>() {
      public void visit(SNode module) {
        ListSequence.fromList(SNodeOperations.getDescendants(module, "TasksAndSyncs.structure.SharedType", false, new String[]{})).visitAll(new IVisitor<SNode>() {
          public void visit(SNode orig) {
            MapSequence.fromMap(sharedToResolvedTypes).put(orig, SNodeOperations.cast(resolveType(orig), "TasksAndSyncs.structure.SharedType"));
          }
        });
      }
    });
    return sharedToResolvedTypes;
  }



  public static void resolveTypeInline(SNode type) {
    SNodeOperations.replaceWithAnother(type, resolveType(type));
  }



  public static SNode resolveType(SNode type) {
    SNode replacementType = SNodeOperations.copyNode(type);
    while (SNodeOperations.isInstanceOf(replacementType, "com.mbeddr.core.udt.structure.TypeDefType")) {
      replacementType = SNodeOperations.copyNode(SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(replacementType, "com.mbeddr.core.udt.structure.TypeDefType"), "typeDef", false), "original", true));
    }
    while (true) {
      ListSequence.fromList(SNodeOperations.getDescendants(replacementType, "com.mbeddr.core.modules.structure.GlobalConstantRef", false, new String[]{})).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          SNodeOperations.replaceWithAnother(it, exprToNoConstantExpr(SLinkOperations.getTarget(SLinkOperations.getTarget(it, "constant", false), "value", true)));
        }
      });
      ListSequence.fromList(SNodeOperations.getDescendants(replacementType, "com.mbeddr.core.udt.structure.TypeDefType", false, new String[]{})).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          SNodeOperations.replaceWithAnother(it, SNodeOperations.copyNode(SLinkOperations.getTarget(SLinkOperations.getTarget(it, "typeDef", false), "original", true)));
        }
      });
      if (ListSequence.fromList(SNodeOperations.getDescendants(replacementType, "com.mbeddr.core.modules.structure.GlobalConstantRef", false, new String[]{})).count() == 0 && ListSequence.fromList(SNodeOperations.getDescendants(replacementType, "com.mbeddr.core.udt.structure.TypeDefType", false, new String[]{})).count() == 0) {
        break;
      }
    }
    return replacementType;
  }



  public void buildStructsForSharedTypes(Map<SNode, SNode> sharedToResolvedTypes, Map<SNode, SNode> structToSharedModule, SNode genericSharedModule) {
    for (IMapping<SNode, SNode> sharedToResolved : MapSequence.fromMap(sharedToResolvedTypes).sort(new ISelector<IMapping<SNode, SNode>, Integer>() {
      public Integer select(IMapping<SNode, SNode> it) {
        return ListSequence.fromList(SNodeOperations.getDescendants(it.value(), "TasksAndSyncs.structure.SharedType", false, new String[]{})).count();
      }
    }, true)) {
      if (getValueForType(sharedTypeToStructType, sharedToResolved.value()) != null) {
        continue;
      }

      SNode structType = mapSharedToStructType(sharedToResolved.value());
      SNode definitionModule;

      // for user defined types (i.e. struct types) the definitions of shared types thereof should  
      // take place in the same implementation (actually upper) modules so that they will be imported correctly 
      SNode nestedStructType = ListSequence.fromList(SNodeOperations.getDescendants(sharedToResolved.value(), "com.mbeddr.core.udt.structure.StructType", false, new String[]{})).first();
      if ((nestedStructType != null)) {
        SNode structModule = SNodeOperations.getAncestor(SLinkOperations.getTarget(nestedStructType, "struct", false), "com.mbeddr.core.modules.structure.ImplementationModule", false, false);
        if (!(MapSequence.fromMap(structToSharedModule).containsKey(SLinkOperations.getTarget(nestedStructType, "struct", false)))) {
          MapSequence.fromMap(structToSharedModule).put(SLinkOperations.getTarget(nestedStructType, "struct", false), MapSequence.fromMap(moduleToSharedModule).get(structModule));
        }
        definitionModule = MapSequence.fromMap(structToSharedModule).get(SLinkOperations.getTarget(nestedStructType, "struct", false));
      } else {
        // for all other types the generic implementation module can be used 
        definitionModule = genericSharedModule;
      }
      MapSequence.fromMap(structToSharedModule).put(SLinkOperations.getTarget(structType, "struct", false), definitionModule);
    }
  }



  /**
   * @returns: An equivalent struct type that does not contain any shared types but corresponding struct types; 
   * the latter are generated on the fly during the process (or reused if a mapping from a shared to a struct type 
   * is already existant.
   * 
   * @param sharedType A shared type that does not contain any typedefs.
   */
  public SNode mapSharedToStructType(SNode sharedType) {
    SNode knownStructType = getValueForType(sharedTypeToStructType, sharedType);
    if (knownStructType == null) {
      final Wrappers._T<SNode> knownStruct = new Wrappers._T<SNode>();
      SNode sharedTypeCopy = SNodeOperations.copyNode(sharedType);
      SNode nestedSharedType = ListSequence.fromList(SNodeOperations.getDescendants(sharedTypeCopy, "TasksAndSyncs.structure.SharedType", false, new String[]{})).first();
      if ((nestedSharedType == null)) {
        knownStruct.value = buildSharedStruct(SLinkOperations.getTarget(sharedType, "baseType", true));
      } else {
        SNodeOperations.replaceWithAnother(nestedSharedType, mapSharedToStructType(nestedSharedType));
        knownStruct.value = buildSharedStruct(SLinkOperations.getTarget(sharedTypeCopy, "baseType", true));
      }
      knownStructType = new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          SNode node_2098891715739699809 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.StructType", null);
              SLinkOperations.setTarget(res, "struct", knownStruct.value, false);
              return res;
            }
          }.invoke();
          return node_2098891715739699809;
        }
      }.invoke();
      ListSequence.fromList(sharedTypeToStructType).addElement(new Pair(sharedType, knownStructType));
    }
    return knownStructType;
  }



  /**
   * replace all sharedtypes by their corresponding struct types in ascending order of shared types
   * -> intention: replace outer most shared types first (otherwise they will not be found in the type-to-struct map)
   */
  public void substituteSharedByStructTypes() {
    MapSequence.fromMap(getSharedToResolvedTypes()).sort(new ISelector<IMapping<SNode, SNode>, Integer>() {
      public Integer select(IMapping<SNode, SNode> it) {
        return ListSequence.fromList(SNodeOperations.getDescendants(it.value(), "TasksAndSyncs.structure.SharedType", false, new String[]{})).count();
      }
    }, false).visitAll(new IVisitor<IMapping<SNode, SNode>>() {
      public void visit(IMapping<SNode, SNode> sharedToResolved) {
        SNodeOperations.replaceWithAnother(sharedToResolved.key(), SNodeOperations.copyNode(getValueForType(sharedTypeToStructType, sharedToResolved.value())));
      }
    });
  }



  public static void addNewStructTypesToModules(Map<SNode, SNode> structToSharedModule) {
    List<Pair<SNode, SNode>> addedStructsAndModules = ListSequence.fromList(new ArrayList<Pair<SNode, SNode>>());
    for (IMapping<SNode, SNode> structAndModule : MapSequence.fromMap(structToSharedModule)) {
      if (addOrLiftStruct(structAndModule.key(), SNodeOperations.getAncestor(structAndModule.key(), "com.mbeddr.core.modules.structure.ImplementationModule", false, false), structAndModule.value())) {
        ListSequence.fromList(addedStructsAndModules).addElement(new Pair(structAndModule.key(), structAndModule.value()));
      }
    }
    for (Pair<SNode, SNode> structAndModule : ListSequence.fromList(addedStructsAndModules)) {
      addOrLiftStructMembers(structAndModule.first, SNodeOperations.getAncestor(structAndModule.first, "com.mbeddr.core.modules.structure.ImplementationModule", false, false), structAndModule.second);
    }
  }



  public static boolean addOrLiftStruct(SNode struct, SNode moduleToLiftFrom, SNode targetModule) {
    if (targetModule == null || targetModule == SNodeOperations.getAncestor(struct, "com.mbeddr.core.modules.structure.ImplementationModule", false, false)) {
      return false;
    }

    ListSequence.fromList(SLinkOperations.getTargets(targetModule, "contents", true)).addElement(struct);
    SPropertyOperations.set(struct, "exported", "" + (true));
    ListSequence.fromList(SUDeclaration_Behavior.call_members_9101132143318613823(struct)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode member) {
        resolveTypeInline(SLinkOperations.getTarget(member, "type", true));
      }
    });

    return true;
  }



  public static void addOrLiftStructMembers(final SNode struct, final SNode moduleToLiftFrom, final SNode targetModule) {
    for (SNode member : ListSequence.fromList(SUDeclaration_Behavior.call_members_9101132143318613823(struct))) {
      ListSequence.fromList(SNodeOperations.getDescendants(member, "com.mbeddr.core.udt.structure.StructType", false, new String[]{})).visitAll(new IVisitor<SNode>() {
        public void visit(SNode structType) {
          SNode declaringModule = SNodeOperations.getAncestor(SLinkOperations.getTarget(structType, "struct", false), "com.mbeddr.core.modules.structure.ImplementationModule", false, false);
          if (declaringModule == targetModule) {
            return;
          }
          if (declaringModule == moduleToLiftFrom && !(targetModule == SNodeOperations.getAncestor(SLinkOperations.getTarget(structType, "struct", false), "com.mbeddr.core.modules.structure.ImplementationModule", false, false))) {
            ListSequence.fromList(SLinkOperations.getTargets(targetModule, "contents", true)).addElement(SLinkOperations.getTarget(structType, "struct", false));
            SPropertyOperations.set(SLinkOperations.getTarget(structType, "struct", false), "exported", "" + (true));
            ListSequence.fromList(SUDeclaration_Behavior.call_members_9101132143318613823(struct)).visitAll(new IVisitor<SNode>() {
              public void visit(SNode member) {
                resolveTypeInline(SLinkOperations.getTarget(member, "type", true));
              }
            });
            addOrLiftStructMembers(SLinkOperations.getTarget(structType, "struct", false), moduleToLiftFrom, targetModule);
          } else {
            ModuleBuilder.importModule(declaringModule, targetModule);
          }
        }
      });
    }
  }



  public static SNode buildVoidExportedFunction(List<SNode> statements, List<SNode> arguments, String name) {
    return buildVoidFunction(statements, arguments, name, false, true);
  }



  public static SNode buildVoidInlineFunction(List<SNode> statements, List<SNode> arguments, String name) {
    return buildVoidFunction(statements, arguments, name, true, false);
  }



  public static SNode buildVoidFunction(List<SNode> statements, List<SNode> arguments, final String name, final boolean inline, final boolean exported) {
    SNode function = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_4335879941186142287 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.VoidType", null);
            return res;
          }
        }.invoke();
        final SNode node_4335879941186142291 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.StatementList", null);
            return res;
          }
        }.invoke();
        SNode node_4335879941186142282 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.Function", null);
            SPropertyOperations.set(res, "exported", "" + ((exported)));
            SPropertyOperations.set(res, "inline", "" + ((inline)));
            SPropertyOperations.set(res, "name", (name));
            SPropertyOperations.set(res, "__inlinetext", (""));
            SPropertyOperations.set(res, "contextModelId", (null));
            SPropertyOperations.set(res, "contextNodeId", (null));
            SPropertyOperations.set(res, "overriddenCodeLocation", (null));
            SLinkOperations.setTarget(res, "type", node_4335879941186142287, true);
            SLinkOperations.setTarget(res, "body", node_4335879941186142291, true);
            return res;
          }
        }.invoke();
        return node_4335879941186142282;
      }
    }.invoke();
    ListSequence.fromList(SLinkOperations.getTargets(function, "arguments", true)).addSequence(ListSequence.fromList(arguments));
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(function, "body", true), "statements", true)).addSequence(ListSequence.fromList(statements));
    return function;
  }



  private SNode buildSharedStruct(final SNode type) {
    final String name = "SharedOf_" + structNameForType(type).replaceAll("\\s", "");
    return new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_4335879941187172858 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.AbritraryTextItem", null);
            SPropertyOperations.set(res, "text", ("pthread_mutex_t"));
            return res;
          }
        }.invoke();
        final SNode node_3271375101703628838 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.VoidType", null);
            return res;
          }
        }.invoke();
        final SNode node_3271375101696967815 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.PointerType", null);
            SLinkOperations.setTarget(res, "baseType", node_3271375101703628838, true);
            return res;
          }
        }.invoke();
        final SNode node_4335879941187172855 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArbitraryTextType", null);
            SPropertyOperations.set(res, "requiredStdHeader", ("<pthread.h>"));
            SLinkOperations.setTarget(res, "dummyType", node_3271375101696967815, true);
            ListSequence.fromList(SLinkOperations.getTargets(res, "items", true)).addElement(node_4335879941187172858);
            return res;
          }
        }.invoke();
        final SNode node_4335879941187172854 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.Member", null);
            SPropertyOperations.set(res, "name", ("mutex"));
            SLinkOperations.setTarget(res, "type", node_4335879941187172855, true);
            return res;
          }
        }.invoke();
        final SNode node_4335879941187172867 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SNodeOperations.copyNode(type);
            return res;
          }
        }.invoke();
        final SNode node_4335879941187172866 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.Member", null);
            SPropertyOperations.set(res, "name", ("value"));
            SLinkOperations.setTarget(res, "type", node_4335879941187172867, true);
            return res;
          }
        }.invoke();
        SNode node_4335879941187172834 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.StructDeclaration", null);
            SPropertyOperations.set(res, "exported", "" + ((true)));
            SPropertyOperations.set(res, "name", (genContext.createUniqueName(name, null)));
            ListSequence.fromList(SLinkOperations.getTargets(res, "members", true)).addElement(node_4335879941187172854);
            ListSequence.fromList(SLinkOperations.getTargets(res, "members", true)).addElement(node_4335879941187172866);
            return res;
          }
        }.invoke();
        return node_4335879941187172834;
      }
    }.invoke();
  }



  private static String structNameForType(SNode type) {
    {
      SNode sharedType = type;
      if (SNodeOperations.isInstanceOf(sharedType, "TasksAndSyncs.structure.SharedType")) {
        return "SharedOf_" + structNameForType(SLinkOperations.getTarget(sharedType, "baseType", true));
      }
    }
    {
      SNode arrayType = type;
      if (SNodeOperations.isInstanceOf(arrayType, "com.mbeddr.core.pointers.structure.ArrayType")) {
        return "ArrayOf_" + structNameForType(SNodeOperations.cast(SLinkOperations.getTarget(arrayType, "baseType", true), "com.mbeddr.core.expressions.structure.Type"));
      }
    }
    {
      SNode pointerType = type;
      if (SNodeOperations.isInstanceOf(pointerType, "com.mbeddr.core.pointers.structure.PointerType")) {
        return "PointerOf_" + structNameForType(SNodeOperations.cast(SLinkOperations.getTarget(pointerType, "baseType", true), "com.mbeddr.core.expressions.structure.Type"));
      }
    }
    return BehaviorReflection.invokeVirtual(String.class, type, "virtual_getPresentation_1213877396640", new Object[]{}).replaceAll("[^\\w]", "_");
  }



  public static SNode buildMutexAttribute(final TemplateQueryContext genContext) {
    return new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_8001979070764663763 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.AbritraryTextItem", null);
            SPropertyOperations.set(res, "text", ("pthread_mutexattr_t"));
            return res;
          }
        }.invoke();
        final SNode node_3271375101703635873 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.VoidType", null);
            return res;
          }
        }.invoke();
        final SNode node_3271375101703635872 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.PointerType", null);
            SLinkOperations.setTarget(res, "baseType", node_3271375101703635873, true);
            return res;
          }
        }.invoke();
        final SNode node_8001979070764659655 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArbitraryTextType", null);
            SPropertyOperations.set(res, "requiredStdHeader", ("<pthread.h>"));
            SLinkOperations.setTarget(res, "dummyType", node_3271375101703635872, true);
            ListSequence.fromList(SLinkOperations.getTargets(res, "items", true)).addElement(node_8001979070764663763);
            return res;
          }
        }.invoke();
        SNode node_8001979070764658987 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.GlobalVariableDeclaration", null);
            SPropertyOperations.set(res, "exported", "" + ((true)));
            SPropertyOperations.set(res, "name", (genContext.createUniqueName("mutexAttribute", null)));
            SLinkOperations.setTarget(res, "type", node_8001979070764659655, true);
            return res;
          }
        }.invoke();
        return node_8001979070764658987;
      }
    }.invoke();
  }




  /**
   * create initialization calls for the global mutex attribute and add them to the beginning of the entry function:
   *   pthread_mutex_init(mutex, mutexAttribute);
   *   pthread_mutexattr_settype(mutexAttribute, PTHREAD_MUTEX_RECURSIVE);
   */
  public void buildMutexAttributeInitCalls(final SNode mutexAttribute) {
    final SNode mutexAttributeReference = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_8001979070764883072 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.GlobalVarRef", null);
            SLinkOperations.setTarget(res, "var", mutexAttribute, false);
            return res;
          }
        }.invoke();
        SNode node_8001979070764882604 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.ReferenceExpr", null);
            SLinkOperations.setTarget(res, "expression", node_8001979070764883072, true);
            return res;
          }
        }.invoke();
        return node_8001979070764882604;
      }
    }.invoke();

    List<SNode> initCalls = new ArrayList<SNode>();
    ListSequence.fromList(initCalls).addElement(new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_8001979070764887024 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SNodeOperations.copyNode(mutexAttributeReference);
            return res;
          }
        }.invoke();
        final SNode node_8001979070764702243 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArbitraryFunctionCall", null);
            SPropertyOperations.set(res, "requiredStdHeader", ("<pthread.h>"));
            SPropertyOperations.set(res, "calledFunctionName", ("pthread_mutexattr_init"));
            ListSequence.fromList(SLinkOperations.getTargets(res, "arguments", true)).addElement(node_8001979070764887024);
            return res;
          }
        }.invoke();
        SNode node_8001979070764701427 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ExpressionStatement", null);
            SLinkOperations.setTarget(res, "expr", node_8001979070764702243, true);
            return res;
          }
        }.invoke();
        return node_8001979070764701427;
      }
    }.invoke());
    ListSequence.fromList(initCalls).addElement(new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_8001979070764901519 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SNodeOperations.copyNode(mutexAttributeReference);
            return res;
          }
        }.invoke();
        final SNode node_8001979070764871109 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.AbritraryTextItem", null);
            SPropertyOperations.set(res, "text", ("PTHREAD_MUTEX_RECURSIVE"));
            return res;
          }
        }.invoke();
        final SNode node_8001979070764871106 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArbitraryTextExpression", null);
            SPropertyOperations.set(res, "requiredStdHeader", ("<pthread.h>"));
            ListSequence.fromList(SLinkOperations.getTargets(res, "items", true)).addElement(node_8001979070764871109);
            return res;
          }
        }.invoke();
        final SNode node_8001979070764866879 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArbitraryFunctionCall", null);
            SPropertyOperations.set(res, "requiredStdHeader", ("<pthread.h>"));
            SPropertyOperations.set(res, "calledFunctionName", ("pthread_mutexattr_settype"));
            ListSequence.fromList(SLinkOperations.getTargets(res, "arguments", true)).addElement(node_8001979070764901519);
            ListSequence.fromList(SLinkOperations.getTargets(res, "arguments", true)).addElement(node_8001979070764871106);
            return res;
          }
        }.invoke();
        SNode node_8001979070764864289 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ExpressionStatement", null);
            SLinkOperations.setTarget(res, "expr", node_8001979070764866879, true);
            return res;
          }
        }.invoke();
        return node_8001979070764864289;
      }
    }.invoke());

    ListSequence.fromList(initCalls).reversedList().visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(entryFunction, "body", true), "statements", true)).insertElement(0, it);
      }
    });
  }



  public SNode buildDestroyMutexFunction() {
    final SNode mutex = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_4335879941189134773 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.AbritraryTextItem", null);
            SPropertyOperations.set(res, "text", ("pthread_mutex_t"));
            return res;
          }
        }.invoke();
        final SNode node_3271375101703636019 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.VoidType", null);
            return res;
          }
        }.invoke();
        final SNode node_3271375101703636018 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.PointerType", null);
            SLinkOperations.setTarget(res, "baseType", node_3271375101703636019, true);
            return res;
          }
        }.invoke();
        final SNode node_4335879941189134770 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArbitraryTextType", null);
            SPropertyOperations.set(res, "requiredStdHeader", ("<pthread.h>"));
            SLinkOperations.setTarget(res, "dummyType", node_3271375101703636018, true);
            ListSequence.fromList(SLinkOperations.getTargets(res, "items", true)).addElement(node_4335879941189134773);
            return res;
          }
        }.invoke();
        final SNode node_4335879941189134769 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.PointerType", null);
            SLinkOperations.setTarget(res, "baseType", node_4335879941189134770, true);
            return res;
          }
        }.invoke();
        SNode node_4335879941189134766 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.Argument", null);
            SPropertyOperations.set(res, "name", ("mutex"));
            SLinkOperations.setTarget(res, "type", node_4335879941189134769, true);
            return res;
          }
        }.invoke();
        return node_4335879941189134766;
      }
    }.invoke();
    List<SNode> arguments = new ArrayList<SNode>();
    ListSequence.fromList(arguments).addElement(mutex);

    SNode destroyMutex = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_4335879941189134802 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.ArgumentRef", null);
            SLinkOperations.setTarget(res, "arg", mutex, false);
            return res;
          }
        }.invoke();
        final SNode node_4335879941189134797 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArbitraryFunctionCall", null);
            SPropertyOperations.set(res, "requiredStdHeader", ("<pthread.h>"));
            SPropertyOperations.set(res, "calledFunctionName", ("pthread_mutex_destroy"));
            ListSequence.fromList(SLinkOperations.getTargets(res, "arguments", true)).addElement(node_4335879941189134802);
            return res;
          }
        }.invoke();
        SNode node_4335879941189134796 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ExpressionStatement", null);
            SLinkOperations.setTarget(res, "expr", node_4335879941189134797, true);
            return res;
          }
        }.invoke();
        return node_4335879941189134796;
      }
    }.invoke();
    List<SNode> statements = new ArrayList<SNode>();
    ListSequence.fromList(statements).addElement(destroyMutex);

    String functionName = genContext.createUniqueName("destroyMutex", null);

    return SharedBuilder.buildVoidExportedFunction(statements, arguments, functionName);
  }



  public static SNode sizeOfArray(final SNode arrayDeclaration) {
    if (!(SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), arrayDeclaration, "virtual_getType_704069370490430475", new Object[]{})), "com.mbeddr.core.pointers.structure.ArrayType"))) {
      return null;
    }
    if ((SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), arrayDeclaration, "virtual_getType_704069370490430475", new Object[]{})), "com.mbeddr.core.pointers.structure.ArrayType"), "sizeExpr", true) != null)) {
      return exprToNoConstantExpr(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), arrayDeclaration, "virtual_getType_704069370490430475", new Object[]{})), "com.mbeddr.core.pointers.structure.ArrayType"), "sizeExpr", true));
    }
    if (SNodeOperations.isInstanceOf(arrayDeclaration, "com.mbeddr.core.statements.structure.LocalVariableDeclaration")) {
      return new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          SNode node_4335879941189134880 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.NumberLiteral", null);
              SPropertyOperations.set(res, "value", (String.valueOf(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(arrayDeclaration, "com.mbeddr.core.statements.structure.LocalVariableDeclaration"), "init", true), "com.mbeddr.core.pointers.structure.ArrayInitExpression"), "exprs", true)).count())));
              return res;
            }
          }.invoke();
          return node_4335879941189134880;
        }
      }.invoke();
    }
    if (SNodeOperations.isInstanceOf(arrayDeclaration, "com.mbeddr.core.modules.structure.GlobalVariableDeclaration")) {
      return new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          SNode node_4335879941189134901 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.NumberLiteral", null);
              SPropertyOperations.set(res, "value", (String.valueOf(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(arrayDeclaration, "com.mbeddr.core.modules.structure.GlobalVariableDeclaration"), "init", true), "com.mbeddr.core.pointers.structure.ArrayInitExpression"), "exprs", true)).count())));
              return res;
            }
          }.invoke();
          return node_4335879941189134901;
        }
      }.invoke();
    }
    return null;
  }



  private static SNode exprToNoConstantExpr(SNode expr) {
    {
      SNode constantRef = expr;
      if (SNodeOperations.isInstanceOf(constantRef, "com.mbeddr.core.modules.structure.GlobalConstantRef")) {
        return exprToNoConstantExpr(SNodeOperations.copyNode(SLinkOperations.getTarget(SLinkOperations.getTarget(constantRef, "constant", false), "value", true)));
      }
    }
    return SNodeOperations.copyNode(expr);
  }


  private SNode mutexAttribute;
  private TemplateQueryContext genContext;
  private SModel model;
  private List<Pair<SNode, SNode>> sharedTypeToStructType;
  public List<Pair<SNode, Pair<SNode, SNode>>> typesToMutexFunctions;
  public SNode entryModule;
  public SNode entryFunction;


  public static List<SNode> getAllVariableTypes(SModel model) {
    List<SNode> allTypes = new ArrayList<SNode>();
    for (SNode module : ListSequence.fromList(SModelOperations.getRoots(model, "com.mbeddr.core.modules.structure.ImplementationModule"))) {
      for (SNode declaration : ListSequence.fromList(SNodeOperations.getDescendants(module, "com.mbeddr.core.statements.structure.IVariableDeclaration", false, new String[]{})).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.isInstanceOf(it, "com.mbeddr.core.statements.structure.LocalVariableDeclaration") || SNodeOperations.isInstanceOf(it, "com.mbeddr.core.modules.structure.GlobalVariableDeclaration") || SNodeOperations.isInstanceOf(it, "com.mbeddr.core.modules.structure.Argument");
        }
      })) {
        SNode dataflowType = BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), declaration, "virtual_getType_704069370490430475", new Object[]{});
        if (!(SNodeOperations.isInstanceOf(dataflowType, "com.mbeddr.core.expressions.structure.Type"))) {
          continue;
        }
        SNode resolvedType = resolveType(SNodeOperations.cast(dataflowType, "com.mbeddr.core.expressions.structure.Type"));
        if (SNodeOperations.isInstanceOf(resolvedType, "com.mbeddr.core.pointers.structure.ArrayType") && (SLinkOperations.getTarget(SNodeOperations.cast(resolvedType, "com.mbeddr.core.pointers.structure.ArrayType"), "sizeExpr", true) == null)) {
          SLinkOperations.setTarget(SNodeOperations.cast(resolvedType, "com.mbeddr.core.pointers.structure.ArrayType"), "sizeExpr", sizeOfArray(declaration), true);
          if ((SLinkOperations.getTarget(SNodeOperations.cast(resolvedType, "com.mbeddr.core.pointers.structure.ArrayType"), "sizeExpr", true) == null)) {
            continue;
          }
        }
        ListSequence.fromList(allTypes).addElement(resolvedType);
      }
      for (final SNode struct : ListSequence.fromList(SNodeOperations.getDescendants(module, "com.mbeddr.core.udt.structure.StructDeclaration", false, new String[]{}))) {
        ListSequence.fromList(allTypes).addElement(new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode node_5512582143381636951 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.StructType", null);
                SLinkOperations.setTarget(res, "struct", struct, false);
                return res;
              }
            }.invoke();
            return node_5512582143381636951;
          }
        }.invoke());
      }
    }

    return allTypes;
  }



  public void initData(SNode mutexAttribute, TemplateQueryContext genContext, SModel model, List<Pair<SNode, SNode>> sharedTypeToStructType) {
    this.mutexAttribute = mutexAttribute;
    this.genContext = genContext;
    this.model = model;
    this.sharedTypeToStructType = sharedTypeToStructType;
    typesToMutexFunctions = ListSequence.fromList(new ArrayList<Pair<SNode, Pair<SNode, SNode>>>());
    findAndSetProgramEntries();
  }



  /**
   * find entry function (typically this is 'main') and the corresponding module
   * TODO: might not be the right one
   * TODO: What about C libraries? This is also relevant for global mutex destruction calls.
   */
  private void findAndSetProgramEntries() {
    for (SNode implementationModule : ListSequence.fromList(SModelOperations.getRoots(model, "com.mbeddr.core.modules.structure.ImplementationModule"))) {
      SNode foundFunction = ListSequence.fromList(SNodeOperations.getDescendants(implementationModule, "com.mbeddr.core.modules.structure.Function", false, new String[]{})).findFirst(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return BehaviorReflection.invokeVirtual(Boolean.TYPE, it, "virtual_actsAsMainFunction_3209727427932102770", new Object[]{});
        }
      });
      if (foundFunction != null) {
        entryFunction = foundFunction;
        entryModule = implementationModule;
        break;
      }
    }
  }



  private Pair<SNode, SNode> buildInitAndDestroyBase(SNode baseType, final SNode basePath) {
    final Wrappers._T<SNode> _baseType = new Wrappers._T<SNode>(baseType);
    SNode typeToSearchFor = removeArraySizesShallowly(_baseType.value);
    final Pair<SNode, SNode> baseFunctions = getValueForType(typesToMutexFunctions, typeToSearchFor);
    SNode initBase;
    SNode destroyBase;
    if (baseFunctions != null) {
      final Wrappers._T<SNode> path = new Wrappers._T<SNode>();
      if (SNodeOperations.isInstanceOf(_baseType.value, "com.mbeddr.core.pointers.structure.ArrayType")) {
        path.value = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            final SNode node_3735204333706929984 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = arrayTypeToPointerType(SNodeOperations.cast(_baseType.value, "com.mbeddr.core.pointers.structure.ArrayType"));
                return res;
              }
            }.invoke();
            final SNode node_3735204333707066098 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = basePath;
                return res;
              }
            }.invoke();
            SNode node_3735204333706929420 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.CastExpression", null);
                SLinkOperations.setTarget(res, "targetType", node_3735204333706929984, true);
                SLinkOperations.setTarget(res, "expr", node_3735204333707066098, true);
                return res;
              }
            }.invoke();
            return node_3735204333706929420;
          }
        }.invoke();
      } else {
        path.value = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            final SNode node_3735204333707077858 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = basePath;
                return res;
              }
            }.invoke();
            SNode node_3735204333707077110 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.ReferenceExpr", null);
                SLinkOperations.setTarget(res, "expression", node_3735204333707077858, true);
                return res;
              }
            }.invoke();
            return node_3735204333707077110;
          }
        }.invoke();
      }

      initBase = new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          final SNode node_3735204333707085906 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = path.value;
              return res;
            }
          }.invoke();
          final SNode node_5512582143340458039 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.FunctionCall", null);
              ListSequence.fromList(SLinkOperations.getTargets(res, "actuals", true)).addElement(node_3735204333707085906);
              SLinkOperations.setTarget(res, "function", baseFunctions.first, false);
              return res;
            }
          }.invoke();
          SNode node_5512582143340458038 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ExpressionStatement", null);
              SLinkOperations.setTarget(res, "expr", node_5512582143340458039, true);
              return res;
            }
          }.invoke();
          return node_5512582143340458038;
        }
      }.invoke();
      if (SNodeOperations.isInstanceOf(_baseType.value, "com.mbeddr.core.pointers.structure.ArrayType")) {
        while (SNodeOperations.isInstanceOf(_baseType.value, "com.mbeddr.core.pointers.structure.ArrayType")) {
          ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(initBase, "expr", true), "com.mbeddr.core.modules.structure.FunctionCall"), "actuals", true)).addElement(exprToNoConstantExpr(SLinkOperations.getTarget(SNodeOperations.cast(_baseType.value, "com.mbeddr.core.pointers.structure.ArrayType"), "sizeExpr", true)));
          _baseType.value = SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(_baseType.value, "com.mbeddr.core.pointers.structure.ArrayType"), "baseType", true), "com.mbeddr.core.expressions.structure.Type");
        }
      }

      destroyBase = SNodeOperations.copyNode(initBase);
      SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(destroyBase, "expr", true), "com.mbeddr.core.modules.structure.FunctionCall"), "function", baseFunctions.second, false);
    } else {
      initBase = buildMutexInitCall(basePath, SNodeOperations.cast(_baseType.value, "TasksAndSyncs.structure.SharedType"));
      destroyBase = SNodeOperations.copyNode(initBase);
      mutexInitToDestroyCallInline(destroyBase);
    }
    return new Pair(initBase, destroyBase);
  }



  private SNode arrayTypeToPointerType(SNode arrayType) {
    final Wrappers._T<SNode> pointerType = new Wrappers._T<SNode>(SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.PointerType", null));
    SNode innermostPointerType = pointerType.value;
    SNode baseType = SNodeOperations.cast(SLinkOperations.getTarget(arrayType, "baseType", true), "com.mbeddr.core.expressions.structure.Type");
    while (SNodeOperations.isInstanceOf(baseType, "com.mbeddr.core.pointers.structure.ArrayType")) {
      pointerType.value = new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          final SNode node_3735204333706878248 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = pointerType.value;
              return res;
            }
          }.invoke();
          SNode node_3735204333706878247 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.PointerType", null);
              SLinkOperations.setTarget(res, "baseType", node_3735204333706878248, true);
              return res;
            }
          }.invoke();
          return node_3735204333706878247;
        }
      }.invoke();
      baseType = SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(baseType, "com.mbeddr.core.pointers.structure.ArrayType"), "baseType", true), "com.mbeddr.core.expressions.structure.Type");
    }
    SLinkOperations.setTarget(innermostPointerType, "baseType", SNodeOperations.copyNode(baseType), true);
    return pointerType.value;
  }



  public SNode buildMutexInitCall(final SNode expression, final SNode type) {
    return new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_2098891715710008729 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = expression;
            return res;
          }
        }.invoke();
        final SNode node_2098891715710008732 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.GenericMemberRef", null);
            SLinkOperations.setTarget(res, "member", ListSequence.fromList(SUDeclaration_Behavior.call_members_9101132143318613823(SLinkOperations.getTarget(getValueForType(sharedTypeToStructType, type), "struct", false))).findFirst(new IWhereFilter<SNode>() {
              public boolean accept(SNode it) {
                return SPropertyOperations.getString(it, "name").equals("mutex");
              }
            }), false);
            return res;
          }
        }.invoke();
        final SNode node_2098891715710008728 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.GenericDotExpression", null);
            SLinkOperations.setTarget(res, "expression", node_2098891715710008729, true);
            SLinkOperations.setTarget(res, "target", node_2098891715710008732, true);
            return res;
          }
        }.invoke();
        final SNode node_2098891715710008727 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.ReferenceExpr", null);
            SLinkOperations.setTarget(res, "expression", node_2098891715710008728, true);
            return res;
          }
        }.invoke();
        final SNode node_2098891715710008759 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.GlobalVarRef", null);
            SLinkOperations.setTarget(res, "var", mutexAttribute, false);
            return res;
          }
        }.invoke();
        final SNode node_2098891715710008758 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.ReferenceExpr", null);
            SLinkOperations.setTarget(res, "expression", node_2098891715710008759, true);
            return res;
          }
        }.invoke();
        final SNode node_2098891715710008722 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArbitraryFunctionCall", null);
            SPropertyOperations.set(res, "requiredStdHeader", ("<pthread.h>"));
            SPropertyOperations.set(res, "calledFunctionName", ("pthread_mutex_init"));
            ListSequence.fromList(SLinkOperations.getTargets(res, "arguments", true)).addElement(node_2098891715710008727);
            ListSequence.fromList(SLinkOperations.getTargets(res, "arguments", true)).addElement(node_2098891715710008758);
            return res;
          }
        }.invoke();
        SNode node_2098891715709732475 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ExpressionStatement", null);
            SLinkOperations.setTarget(res, "expr", node_2098891715710008722, true);
            return res;
          }
        }.invoke();
        return node_2098891715709732475;
      }
    }.invoke();
  }



  private void buildMutexInitAndDestroyFunctions(SNode type, List<SNode> arguments, List<SNode> initStatements, List<SNode> destroyStatements) {
    SNode initFunction = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_5512582143363057693 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.VoidType", null);
            return res;
          }
        }.invoke();
        final SNode node_5512582143363057703 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.StatementList", null);
            return res;
          }
        }.invoke();
        SNode node_5512582143363057690 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.Function", null);
            SPropertyOperations.set(res, "exported", "" + ((true)));
            SPropertyOperations.set(res, "name", (genContext.createUniqueName("mutexInit", null)));
            SPropertyOperations.set(res, "__inlinetext", (""));
            SPropertyOperations.set(res, "contextModelId", (null));
            SPropertyOperations.set(res, "contextNodeId", (null));
            SPropertyOperations.set(res, "overriddenCodeLocation", (null));
            SLinkOperations.setTarget(res, "type", node_5512582143363057693, true);
            SLinkOperations.setTarget(res, "body", node_5512582143363057703, true);
            return res;
          }
        }.invoke();
        return node_5512582143363057690;
      }
    }.invoke();
    ListSequence.fromList(SLinkOperations.getTargets(initFunction, "arguments", true)).addSequence(ListSequence.fromList(arguments));
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(initFunction, "body", true), "statements", true)).addSequence(ListSequence.fromList(initStatements));

    SNode destroyFunction = mutexInitToDestroyFunction(initFunction);
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(destroyFunction, "body", true), "statements", true)).clear();
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(destroyFunction, "body", true), "statements", true)).addSequence(ListSequence.fromList(destroyStatements));
    ListSequence.fromList(typesToMutexFunctions).addElement(new Pair(type, new Pair(initFunction, destroyFunction)));
  }



  private static SNode mutexInitToDestroyFunction(SNode initFunction) {
    SNode destroyFunction = SNodeOperations.copyNode(initFunction);
    mutexInitToDestroyCallInline(destroyFunction);
    SPropertyOperations.set(destroyFunction, "name", SPropertyOperations.getString(destroyFunction, "name").replaceAll("Init", "Destroy"));
    return destroyFunction;
  }



  public static void mutexInitToDestroyCallInline(SNode node) {
    List<SNode> subNodes = ListSequence.fromList(SNodeOperations.getDescendants(node, "com.mbeddr.core.statements.structure.ArbitraryFunctionCall", false, new String[]{})).toListSequence();
    if (SNodeOperations.isInstanceOf(node, "com.mbeddr.core.statements.structure.ArbitraryFunctionCall")) {
      ListSequence.fromList(subNodes).addElement(SNodeOperations.cast(node, "com.mbeddr.core.statements.structure.ArbitraryFunctionCall"));
    }
    ListSequence.fromList(subNodes).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.getString(it, "calledFunctionName").equals("pthread_mutex_init");
      }
    }).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        SPropertyOperations.set(it, "calledFunctionName", "pthread_mutex_destroy");
        ListSequence.fromList(SLinkOperations.getTargets(it, "arguments", true)).removeLastElement();
      }
    });
  }



  public void buildAllMutexFunctions(Map<SNode, SNode> moduleToSharedModule, SNode genericSharedModule) {
    for (SNode resolvedDeclarationType : ListSequence.fromList(SharedBuilder.getAllVariableTypes(model))) {
      buildMutexFunctionsForType(resolvedDeclarationType);
    }

    for (Pair<SNode, Pair<SNode, SNode>> typeToMutexFunctions : ListSequence.fromList(typesToMutexFunctions)) {
      SNode nestedStructType = (SNodeOperations.isInstanceOf(typeToMutexFunctions.first, "com.mbeddr.core.udt.structure.StructType") ? SNodeOperations.cast(typeToMutexFunctions.first, "com.mbeddr.core.udt.structure.StructType") : ListSequence.fromList(SNodeOperations.getDescendants(typeToMutexFunctions.first, "com.mbeddr.core.udt.structure.StructType", false, new String[]{})).first());
      SNode definitionModule = ((nestedStructType == null) ? genericSharedModule : MapSequence.fromMap(moduleToSharedModule).get(SNodeOperations.getAncestor(SLinkOperations.getTarget(nestedStructType, "struct", false), "com.mbeddr.core.modules.structure.ImplementationModule", false, false)));
      ListSequence.fromList(SLinkOperations.getTargets(definitionModule, "contents", true)).addElement(typeToMutexFunctions.second.first);
      ListSequence.fromList(SLinkOperations.getTargets(definitionModule, "contents", true)).addElement(typeToMutexFunctions.second.second);
    }
  }



  /**
   * typedefs must already be resolved!
   */
  private void buildMutexFunctionsForType(SNode type) {
    if (getValueForType(typesToMutexFunctions, removeArraySizes(type)) != null) {
      return;
    }

    {
      SNode sharedType = type;
      if (SNodeOperations.isInstanceOf(sharedType, "TasksAndSyncs.structure.SharedType")) {
        buildMutexFunctionsForType(SLinkOperations.getTarget(sharedType, "baseType", true));
        buildMutexFunctionsForSharedType(sharedType);
        return;
      }
    }
    {
      SNode arrayType = type;
      if (SNodeOperations.isInstanceOf(arrayType, "com.mbeddr.core.pointers.structure.ArrayType")) {
        SNode baseType = SNodeOperations.cast(SLinkOperations.getTarget(arrayType, "baseType", true), "com.mbeddr.core.expressions.structure.Type");
        while (SNodeOperations.isInstanceOf(baseType, "com.mbeddr.core.pointers.structure.ArrayType")) {
          baseType = SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(baseType, "com.mbeddr.core.pointers.structure.ArrayType"), "baseType", true), "com.mbeddr.core.expressions.structure.Type");
        }
        buildMutexFunctionsForType(baseType);
        buildMutexFunctionsForArrayType(arrayType);
        return;
      }
    }
    {
      SNode structType = type;
      if (SNodeOperations.isInstanceOf(structType, "com.mbeddr.core.udt.structure.StructType")) {
        ListSequence.fromList(SUDeclaration_Behavior.call_members_9101132143318613823(SLinkOperations.getTarget(structType, "struct", false))).visitAll(new IVisitor<SNode>() {
          public void visit(SNode it) {
            buildMutexFunctionsForType(SLinkOperations.getTarget(it, "type", true));
          }
        });
        buildMutexFunctionsForStructType(structType);
        return;
      }
    }
  }



  /**
   * typedefs must already be resolved!
   */
  private void buildMutexFunctionsForSharedType(SNode sharedType) {
    SNode baseTypeToSearchFor = removeArraySizesShallowly(SLinkOperations.getTarget(sharedType, "baseType", true));
    Pair<SNode, SNode> baseFunctions = getValueForType(typesToMutexFunctions, baseTypeToSearchFor);
    if (baseFunctions == null && !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(sharedType, "baseType", true), "TasksAndSyncs.structure.SharedType"))) {
      return;
    }

    final SNode structTypeCompanion = getValueForType(sharedTypeToStructType, sharedType);
    final SNode argument = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_5512582143337868368 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SNodeOperations.copyNode(structTypeCompanion);
            return res;
          }
        }.invoke();
        final SNode node_5512582143337853868 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.PointerType", null);
            SLinkOperations.setTarget(res, "baseType", node_5512582143337868368, true);
            return res;
          }
        }.invoke();
        SNode node_5512582143337849016 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.Argument", null);
            SPropertyOperations.set(res, "name", ("var"));
            SLinkOperations.setTarget(res, "type", node_5512582143337853868, true);
            return res;
          }
        }.invoke();
        return node_5512582143337849016;
      }
    }.invoke();
    final SNode mutexAccess = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_5512582143338001808 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.ArgumentRef", null);
            SLinkOperations.setTarget(res, "arg", argument, false);
            return res;
          }
        }.invoke();
        final SNode node_5512582143338006373 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.GenericMemberRef", null);
            SLinkOperations.setTarget(res, "member", ListSequence.fromList(SUDeclaration_Behavior.call_members_9101132143318613823(SLinkOperations.getTarget(structTypeCompanion, "struct", false))).findFirst(new IWhereFilter<SNode>() {
              public boolean accept(SNode it) {
                return SPropertyOperations.getString(it, "name").equals("mutex");
              }
            }), false);
            return res;
          }
        }.invoke();
        SNode node_5512582143338479475 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.GenericDotExpression", null);
            SLinkOperations.setTarget(res, "expression", node_5512582143338001808, true);
            SLinkOperations.setTarget(res, "target", node_5512582143338006373, true);
            return res;
          }
        }.invoke();
        return node_5512582143338479475;
      }
    }.invoke();
    SNode initSelf = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_5512582143338001572 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = mutexAccess;
            return res;
          }
        }.invoke();
        final SNode node_5512582143337971637 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.ReferenceExpr", null);
            SLinkOperations.setTarget(res, "expression", node_5512582143338001572, true);
            return res;
          }
        }.invoke();
        final SNode node_5512582143337996645 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.GlobalVarRef", null);
            SLinkOperations.setTarget(res, "var", mutexAttribute, false);
            return res;
          }
        }.invoke();
        final SNode node_5512582143337996644 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.ReferenceExpr", null);
            SLinkOperations.setTarget(res, "expression", node_5512582143337996645, true);
            return res;
          }
        }.invoke();
        final SNode node_5512582143337967330 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArbitraryFunctionCall", null);
            SPropertyOperations.set(res, "requiredStdHeader", ("<pthread.h>"));
            SPropertyOperations.set(res, "calledFunctionName", ("pthread_mutex_init"));
            ListSequence.fromList(SLinkOperations.getTargets(res, "arguments", true)).addElement(node_5512582143337971637);
            ListSequence.fromList(SLinkOperations.getTargets(res, "arguments", true)).addElement(node_5512582143337996644);
            return res;
          }
        }.invoke();
        SNode node_5512582143338281383 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ExpressionStatement", null);
            SLinkOperations.setTarget(res, "expr", node_5512582143337967330, true);
            return res;
          }
        }.invoke();
        return node_5512582143338281383;
      }
    }.invoke();
    SNode destroySelf = SNodeOperations.copyNode(initSelf);
    mutexInitToDestroyCallInline(destroySelf);
    SNode valueAccess = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_5512582143344405167 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.ArgumentRef", null);
            SLinkOperations.setTarget(res, "arg", argument, false);
            return res;
          }
        }.invoke();
        final SNode node_5512582143344405171 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.GenericMemberRef", null);
            SLinkOperations.setTarget(res, "member", ListSequence.fromList(SUDeclaration_Behavior.call_members_9101132143318613823(SLinkOperations.getTarget(structTypeCompanion, "struct", false))).findFirst(new IWhereFilter<SNode>() {
              public boolean accept(SNode it) {
                return SPropertyOperations.getString(it, "name").equals("value");
              }
            }), false);
            return res;
          }
        }.invoke();
        SNode node_5512582143344404575 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.GenericDotExpression", null);
            SLinkOperations.setTarget(res, "expression", node_5512582143344405167, true);
            SLinkOperations.setTarget(res, "target", node_5512582143344405171, true);
            return res;
          }
        }.invoke();
        return node_5512582143344404575;
      }
    }.invoke();

    Pair<SNode, SNode> initAndDestroyBase = buildInitAndDestroyBase(SLinkOperations.getTarget(sharedType, "baseType", true), valueAccess);

    List<SNode> initStatements = new ArrayList<SNode>();
    ListSequence.fromList(initStatements).addElement(initSelf);
    ListSequence.fromList(initStatements).addElement(initAndDestroyBase.first);
    List<SNode> destroyStatements = new ArrayList<SNode>();
    ListSequence.fromList(destroyStatements).addElement(destroySelf);
    ListSequence.fromList(destroyStatements).addElement(initAndDestroyBase.second);
    List<SNode> arguments = new ArrayList<SNode>();
    ListSequence.fromList(arguments).addElement(argument);

    buildMutexInitAndDestroyFunctions(sharedType, arguments, initStatements, destroyStatements);
  }



  /**
   * typedefs must already be resolved!
   */
  private void buildMutexFunctionsForArrayType(SNode arrayType) {
    final SNode argumentType = SNodeFactoryOperations.createNewNode("com.mbeddr.core.pointers.structure.PointerType", null);
    final SNode varArgument = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_5512582143339446617 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = argumentType;
            return res;
          }
        }.invoke();
        SNode node_5512582143339446096 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.Argument", null);
            SPropertyOperations.set(res, "name", ("var"));
            SLinkOperations.setTarget(res, "type", node_5512582143339446617, true);
            return res;
          }
        }.invoke();
        return node_5512582143339446096;
      }
    }.invoke();
    List<SNode> sizeArguments = new ArrayList<SNode>();
    ListSequence.fromList(sizeArguments).addElement(new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_5512582143365691935 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.Int32tType", null);
            return res;
          }
        }.invoke();
        SNode node_5512582143365691934 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.Argument", null);
            SPropertyOperations.set(res, "name", ("size_0"));
            SLinkOperations.setTarget(res, "type", node_5512582143365691935, true);
            return res;
          }
        }.invoke();
        return node_5512582143365691934;
      }
    }.invoke());
    SNode baseType = SNodeOperations.cast(SLinkOperations.getTarget(arrayType, "baseType", true), "com.mbeddr.core.expressions.structure.Type");
    for (final Wrappers._int i = new Wrappers._int(1); SNodeOperations.isInstanceOf(baseType, "com.mbeddr.core.pointers.structure.ArrayType"); ++i.value) {
      baseType = SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(baseType, "com.mbeddr.core.pointers.structure.ArrayType"), "baseType", true), "com.mbeddr.core.expressions.structure.Type");
      SLinkOperations.setTarget(varArgument, "type", new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          final SNode node_5512582143339467115 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SLinkOperations.getTarget(varArgument, "type", true);
              return res;
            }
          }.invoke();
          SNode node_5512582143339461880 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.PointerType", null);
              SLinkOperations.setTarget(res, "baseType", node_5512582143339467115, true);
              return res;
            }
          }.invoke();
          return node_5512582143339461880;
        }
      }.invoke(), true);
      ListSequence.fromList(sizeArguments).addElement(new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          final SNode node_5512582143343143685 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.Int32tType", null);
              return res;
            }
          }.invoke();
          SNode node_5512582143342961165 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.Argument", null);
              SPropertyOperations.set(res, "name", ("size_" + i.value));
              SLinkOperations.setTarget(res, "type", node_5512582143343143685, true);
              return res;
            }
          }.invoke();
          return node_5512582143342961165;
        }
      }.invoke());
    }
    SLinkOperations.setTarget(argumentType, "baseType", SNodeOperations.copyNode(baseType), true);
    Pair<SNode, SNode> baseFunctions = getValueForType(typesToMutexFunctions, baseType);

    if (baseFunctions == null && !(SNodeOperations.isInstanceOf(baseType, "TasksAndSyncs.structure.SharedType"))) {
      return;
    }

    Pair<SNode, SNode> initAndDestroyRanges = buildNestedForRanges(arrayType, sizeArguments, new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        SNode node_5512582143340698153 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.ArgumentRef", null);
            SLinkOperations.setTarget(res, "arg", varArgument, false);
            return res;
          }
        }.invoke();
        return node_5512582143340698153;
      }
    }.invoke());
    List<SNode> initStatements = new ArrayList<SNode>();
    ListSequence.fromList(initStatements).addElement(initAndDestroyRanges.first);
    List<SNode> destroyStatements = new ArrayList<SNode>();
    ListSequence.fromList(destroyStatements).addElement(initAndDestroyRanges.second);
    List<SNode> allArguments = new ArrayList<SNode>();
    ListSequence.fromList(allArguments).addElement(varArgument);
    ListSequence.fromList(allArguments).addSequence(ListSequence.fromList(sizeArguments));
    buildMutexInitAndDestroyFunctions(removeArraySizes(arrayType), allArguments, initStatements, destroyStatements);
  }



  private Pair<SNode, SNode> buildNestedForRanges(SNode arrayType, final List<SNode> sizeArguments, final SNode path) {
    final SNode nestedForInitRange = SNodeFactoryOperations.createNewNode("com.mbeddr.core.util.structure.ForRangeStatement", null);
    SPropertyOperations.set(nestedForInitRange, "name", genContext.createUniqueName("i_", null));
    SLinkOperations.setTarget(SLinkOperations.getTarget(nestedForInitRange, "range", true), "left", new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        SNode node_5512582143339965225 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.NumberLiteral", null);
            SPropertyOperations.set(res, "value", ("0"));
            return res;
          }
        }.invoke();
        return node_5512582143339965225;
      }
    }.invoke(), true);
    SLinkOperations.setTarget(SLinkOperations.getTarget(nestedForInitRange, "range", true), "right", SNodeOperations.copyNode(SLinkOperations.getTarget(arrayType, "sizeExpr", true)), true);
    SLinkOperations.setTarget(SLinkOperations.getTarget(nestedForInitRange, "range", true), "right", new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        SNode node_5512582143343361929 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.ArgumentRef", null);
            SLinkOperations.setTarget(res, "arg", ListSequence.fromList(sizeArguments).first(), false);
            return res;
          }
        }.invoke();
        return node_5512582143343361929;
      }
    }.invoke(), true);
    SNode extendedPath = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_5512582143339972769 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = path;
            return res;
          }
        }.invoke();
        final SNode node_5512582143339973406 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.util.structure.ForRangeRef", null);
            SLinkOperations.setTarget(res, "forRange", nestedForInitRange, false);
            return res;
          }
        }.invoke();
        SNode node_5512582143339972299 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.ArrayAccessExpr", null);
            SLinkOperations.setTarget(res, "expression", node_5512582143339972769, true);
            SLinkOperations.setTarget(res, "index", node_5512582143339973406, true);
            return res;
          }
        }.invoke();
        return node_5512582143339972299;
      }
    }.invoke();
    SNode nestedForDestroyRange = SNodeOperations.copyNode(nestedForInitRange);
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(arrayType, "baseType", true), "com.mbeddr.core.pointers.structure.ArrayType")) {
      Pair<SNode, SNode> subRanges = buildNestedForRanges(SNodeOperations.cast(SLinkOperations.getTarget(arrayType, "baseType", true), "com.mbeddr.core.pointers.structure.ArrayType"), ListSequence.fromList(sizeArguments).tail(ListSequence.fromList(sizeArguments).count() - 1).toListSequence(), extendedPath);
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(nestedForInitRange, "body", true), "statements", true)).addElement(subRanges.first);
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(nestedForDestroyRange, "body", true), "statements", true)).addElement(subRanges.second);
    } else {
      Pair<SNode, SNode> initAndDestroyBase = buildInitAndDestroyBase(SNodeOperations.cast(SLinkOperations.getTarget(arrayType, "baseType", true), "com.mbeddr.core.expressions.structure.Type"), extendedPath);
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(nestedForInitRange, "body", true), "statements", true)).addElement(initAndDestroyBase.first);
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(nestedForDestroyRange, "body", true), "statements", true)).addElement(initAndDestroyBase.second);
    }
    return new Pair(nestedForInitRange, nestedForDestroyRange);
  }



  /**
   * typedefs must already be resolved!
   */
  private void buildMutexFunctionsForStructType(final SNode structType) {
    if (!(ListSequence.fromList(SUDeclaration_Behavior.call_members_9101132143318613823(SLinkOperations.getTarget(structType, "struct", false))).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode member) {
        SNode resolvedMemType = removeArraySizesShallowly(resolveType(SLinkOperations.getTarget(member, "type", true)));
        return getValueForType(typesToMutexFunctions, resolvedMemType) != null || SNodeOperations.isInstanceOf(resolvedMemType, "TasksAndSyncs.structure.SharedType");
      }
    }))) {
      return;
    }

    final SNode varArgument = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_5512582143345771884 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SNodeOperations.copyNode(structType);
            return res;
          }
        }.invoke();
        final SNode node_5512582143345771492 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.PointerType", null);
            SLinkOperations.setTarget(res, "baseType", node_5512582143345771884, true);
            return res;
          }
        }.invoke();
        SNode node_5512582143345766042 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.Argument", null);
            SPropertyOperations.set(res, "name", ("var"));
            SLinkOperations.setTarget(res, "type", node_5512582143345771492, true);
            return res;
          }
        }.invoke();
        return node_5512582143345766042;
      }
    }.invoke();
    List<SNode> initStatements = new ArrayList<SNode>();
    List<SNode> destroyStatements = new ArrayList<SNode>();
    for (final SNode member : ListSequence.fromList(SUDeclaration_Behavior.call_members_9101132143318613823(SLinkOperations.getTarget(structType, "struct", false)))) {
      SNode resolvedType = resolveType(SLinkOperations.getTarget(member, "type", true));
      if (getValueForType(typesToMutexFunctions, removeArraySizes(resolvedType)) != null || SNodeOperations.isInstanceOf(resolvedType, "TasksAndSyncs.structure.SharedType")) {
        Pair<SNode, SNode> initAndDestroyField = buildInitAndDestroyBase(resolvedType, new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            final SNode node_5512582143345904219 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.ArgumentRef", null);
                SLinkOperations.setTarget(res, "arg", varArgument, false);
                return res;
              }
            }.invoke();
            final SNode node_5512582143345921940 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.GenericMemberRef", null);
                SLinkOperations.setTarget(res, "member", member, false);
                return res;
              }
            }.invoke();
            SNode node_5512582143345888922 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.GenericDotExpression", null);
                SLinkOperations.setTarget(res, "expression", node_5512582143345904219, true);
                SLinkOperations.setTarget(res, "target", node_5512582143345921940, true);
                return res;
              }
            }.invoke();
            return node_5512582143345888922;
          }
        }.invoke());
        ListSequence.fromList(initStatements).addElement(initAndDestroyField.first);
        ListSequence.fromList(destroyStatements).addElement(initAndDestroyField.second);
      }
    }

    List<SNode> arguments = new ArrayList<SNode>();
    ListSequence.fromList(arguments).addElement(varArgument);

    buildMutexInitAndDestroyFunctions(structType, arguments, initStatements, destroyStatements);
  }



  public static SNode removeArraySizesShallowly(SNode type) {
    if (SNodeOperations.isInstanceOf(type, "com.mbeddr.core.pointers.structure.ArrayType")) {
      return removeArraySizes(type);
    }
    return SNodeOperations.copyNode(type);
  }



  public static SNode removeArraySizes(SNode type) {
    SNode simplifiedType = SNodeOperations.copyNode(type);
    {
      SNode arrayType = simplifiedType;
      if (SNodeOperations.isInstanceOf(arrayType, "com.mbeddr.core.pointers.structure.ArrayType")) {
        SLinkOperations.setTarget(arrayType, "sizeExpr", null, true);
      }
    }
    for (SNode nestedArrayType : ListSequence.fromList(SNodeOperations.getDescendants(simplifiedType, "com.mbeddr.core.pointers.structure.ArrayType", false, new String[]{}))) {
      SLinkOperations.setTarget(nestedArrayType, "sizeExpr", null, true);
    }
    return simplifiedType;
  }



  public void buildGlobalMutexCalls() {
    List<SNode> mutexCallsForModules = buildGlobalMutexCallsForModules();
    if (ListSequence.fromList(mutexCallsForModules).count() > 0) {
      SNode initAllGlobals = buildGlobalMutexContainerCall("initAllGlobalMutexes", mutexCallsForModules, entryModule);
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(entryFunction, "body", true), "statements", true)).insertElement(0, initAllGlobals);
    }
  }



  private List<SNode> buildGlobalMutexCallsForModules() {
    List<SNode> globalMutexCallsForModules = new ArrayList<SNode>();
    for (SNode implementationModule : ListSequence.fromList(SModelOperations.getRoots(model, "com.mbeddr.core.modules.structure.ImplementationModule"))) {
      List<SNode> moduleSpecificCalls = buildGlobalMutexCallsForModule(implementationModule);
      if (ListSequence.fromList(moduleSpecificCalls).isEmpty()) {
        continue;
      }

      // ensure that the module corresponding to the entry function imports all other modules that have 
      // global data with shared ressources (hence, mutexes therein need to be initialized); 
      // this way the entry module has access to all exported mutex management functions  
      ModuleBuilder.importModule(implementationModule, entryModule);

      // create init function for global mutexes of the current module 
      ListSequence.fromList(globalMutexCallsForModules).addElement(buildGlobalMutexContainerCall("initGlobalMutexesFor1Module", moduleSpecificCalls, implementationModule));
    }
    return globalMutexCallsForModules;
  }



  private List<SNode> buildGlobalMutexCallsForModule(SNode implementationModule) {
    List<SNode> moduleSpecificCalls = new ArrayList<SNode>();

    for (final SNode declaration : ListSequence.fromList(SNodeOperations.getDescendants(implementationModule, "com.mbeddr.core.modules.structure.GlobalVariableDeclaration", false, new String[]{}))) {
      Pair<SNode, SNode> mutexCalls = buildMutexCallsForVariable(new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          SNode node_2098891715754888966 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.GlobalVarRef", null);
              SLinkOperations.setTarget(res, "var", declaration, false);
              return res;
            }
          }.invoke();
          return node_2098891715754888966;
        }
      }.invoke(), declaration);
      if (mutexCalls == null) {
        continue;
      }

      ListSequence.fromList(moduleSpecificCalls).addElement(mutexCalls.first);
    }

    return moduleSpecificCalls;
  }



  private SNode buildGlobalMutexContainerCall(String name, List<SNode> calls, SNode targetModule) {
    String uniqueName = genContext.createUniqueName(name, null);
    final SNode mutexFunction = buildVoidExportedFunction(calls, null, uniqueName);
    ListSequence.fromList(SLinkOperations.getTargets(targetModule, "contents", true)).addElement(mutexFunction);
    return new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_2098891715707326852 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.FunctionCall", null);
            SLinkOperations.setTarget(res, "function", mutexFunction, false);
            return res;
          }
        }.invoke();
        SNode node_2098891715706831216 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ExpressionStatement", null);
            SLinkOperations.setTarget(res, "expr", node_2098891715707326852, true);
            return res;
          }
        }.invoke();
        return node_2098891715706831216;
      }
    }.invoke();
  }



  public void buildLocalMutexCalls() {
    final Set<SNode> functionsToAvoid = SetSequence.fromSet(new HashSet<SNode>());

    ListSequence.fromList(typesToMutexFunctions).visitAll(new IVisitor<Pair<SNode, Pair<SNode, SNode>>>() {
      public void visit(Pair<SNode, Pair<SNode, SNode>> it) {
        SetSequence.fromSet(functionsToAvoid).addElement(it.second.first);
        SetSequence.fromSet(functionsToAvoid).addElement(it.second.second);
      }
    });

    for (SNode implementationModule : ListSequence.fromList(SModelOperations.getRoots(model, "com.mbeddr.core.modules.structure.ImplementationModule"))) {
      for (SNode function : ListSequence.fromList(SNodeOperations.getDescendants(implementationModule, "com.mbeddr.core.modules.structure.Function", false, new String[]{})).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return !(SetSequence.fromSet(functionsToAvoid).contains(it));
        }
      })) {
        buildLocalMutexCallsForFunction(function);
      }
    }
  }



  public void buildLocalMutexCallsForFunction(final SNode function) {
    for (final SNode declaration : ListSequence.fromList(SNodeOperations.getDescendants(function, "com.mbeddr.core.statements.structure.IVariableDeclaration", false, new String[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "com.mbeddr.core.statements.structure.LocalVariableDeclaration") || SNodeOperations.isInstanceOf(it, "com.mbeddr.core.modules.structure.IArgumentLike") && ListSequence.fromList(SLinkOperations.getTargets(function, "arguments", true)).contains(SNodeOperations.cast(it, "com.mbeddr.core.modules.structure.IArgumentLike"));
      }
    })) {
      if (SNodeOperations.isInstanceOf(declaration, "com.mbeddr.core.statements.structure.LocalVariableDeclaration")) {
        Pair<SNode, SNode> mutexCalls = buildMutexCallsForVariable(new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode node_2098891715754853667 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.LocalVarRef", null);
                SLinkOperations.setTarget(res, "var", SNodeOperations.cast(declaration, "com.mbeddr.core.statements.structure.LocalVariableDeclaration"), false);
                return res;
              }
            }.invoke();
            return node_2098891715754853667;
          }
        }.invoke(), declaration);
        if (mutexCalls == null) {
          continue;
        }

        // add init call right behind the declaration 
        SNodeOperations.insertNextSiblingChild(declaration, mutexCalls.first);

        // no mutex destruction  
        if (BehaviorReflection.invokeVirtual(Boolean.TYPE, function, "virtual_actsAsMainFunction_3209727427932102770", new Object[]{})) {
          continue;
        }
        // add destruction statements before any following relevant control flow breaking statements 
        addMutexDestroyCallsForLocalVariable(mutexCalls.second, SNodeOperations.cast(declaration, "com.mbeddr.core.statements.structure.LocalVariableDeclaration"));

        // add destruction calls before the end of the variable's scope 
        SNode lastNextSibling = ListSequence.fromList(SNodeOperations.getNextSiblings(declaration, false)).last();
        if (!(SNodeOperations.isInstanceOf(lastNextSibling, "com.mbeddr.core.modules.structure.ReturnStatement") || SNodeOperations.isInstanceOf(lastNextSibling, "com.mbeddr.core.statements.structure.BreakStatement") || SNodeOperations.isInstanceOf(lastNextSibling, "com.mbeddr.core.statements.structure.ContinueStatement") || SNodeOperations.isInstanceOf(lastNextSibling, "com.mbeddr.core.modules.structure.GotoStatement"))) {
          SNodeOperations.insertNextSiblingChild(ListSequence.fromList(SNodeOperations.getNextSiblings(declaration, false)).last(), mutexCalls.second);
        }
      } else if (SNodeOperations.isInstanceOf(declaration, "com.mbeddr.core.modules.structure.IArgumentLike")) {
        // for array arguments nothing needs to be done as they are copied by address 
        if (SNodeOperations.isInstanceOf(resolveType(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), declaration, "virtual_getType_704069370490430475", new Object[]{})), "com.mbeddr.core.expressions.structure.Type")), "com.mbeddr.core.pointers.structure.ArrayType")) {
          continue;
        }

        Pair<SNode, SNode> mutexCalls = buildMutexCallsForVariable(new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode node_2098891715754818062 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.ArgumentRef", null);
                SLinkOperations.setTarget(res, "arg", SNodeOperations.cast(declaration, "com.mbeddr.core.modules.structure.IArgumentLike"), false);
                return res;
              }
            }.invoke();
            return node_2098891715754818062;
          }
        }.invoke(), declaration);
        if (mutexCalls == null) {
          continue;
        }

        // add init call to the beginning of the function 
        ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(function, "body", true), "statements", true)).insertElement(0, mutexCalls.first);

        // add destruction calls before every return statement of the function 
        for (SNode nestedReturnStatement : ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(function, "body", true), "com.mbeddr.core.modules.structure.ReturnStatement", false, new String[]{}))) {
          SNode functionOrClosure = getFunctionOrClosureForReturn(nestedReturnStatement);
          maybeAddMutexDestroyBefore(SNodeOperations.copyNode(mutexCalls.second), nestedReturnStatement, declaration, functionOrClosure);
        }

        // add destruction calls before the end of function body 
        if (!(SNodeOperations.isInstanceOf(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(function, "body", true), "statements", true)).last(), "com.mbeddr.core.modules.structure.ReturnStatement")) && !(BehaviorReflection.invokeVirtual(Boolean.TYPE, function, "virtual_actsAsMainFunction_3209727427932102770", new Object[]{}))) {
          ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(function, "body", true), "statements", true)).addElement(SNodeOperations.copyNode(mutexCalls.second));
        }
      }
    }
  }



  private void addMutexDestroyCallsForLocalVariable(SNode mutexDestroyCall, SNode declaration) {
    // add a destruction statement before each following (nested) return statement that refers to the same function or 
    // closure that 'declaration' is also nested in 
    for (SNode followingStatement : ListSequence.fromList(SNodeOperations.getNextSiblings(declaration, false))) {
      for (SNode nestedReturnStatement : ListSequence.fromList(SNodeOperations.getDescendants(followingStatement, "com.mbeddr.core.modules.structure.ReturnStatement", false, new String[]{}))) {
        SNode functionOrClosure = getFunctionOrClosureForReturn(nestedReturnStatement);
        maybeAddMutexDestroyBefore(mutexDestroyCall, nestedReturnStatement, declaration, functionOrClosure);
      }
    }
    for (SNode followingReturnStatement : Sequence.fromIterable(SNodeOperations.ofConcept(SNodeOperations.getNextSiblings(declaration, false), "com.mbeddr.core.modules.structure.ReturnStatement"))) {
      SNode functionOrClosure = getFunctionOrClosureForReturn(followingReturnStatement);
      maybeAddMutexDestroyBefore(mutexDestroyCall, followingReturnStatement, declaration, functionOrClosure);
    }
    // add a destruction statement before each follwing (nested) break statement that refers to the same loop or  
    // switch case that 'declaration' is also nested in 
    for (SNode followingStatement : ListSequence.fromList(SNodeOperations.getNextSiblings(declaration, false))) {
      for (SNode nestedBreakStatement : ListSequence.fromList(SNodeOperations.getDescendants(followingStatement, "com.mbeddr.core.statements.structure.BreakStatement", false, new String[]{}))) {
        SNode loopOrSwitch = BreakStatement_Behavior.call_getLoopOrSwitch_1213877377041(nestedBreakStatement);
        maybeAddMutexDestroyBefore(mutexDestroyCall, nestedBreakStatement, declaration, loopOrSwitch);
      }
    }
    for (SNode followingBreakStatement : Sequence.fromIterable(SNodeOperations.ofConcept(SNodeOperations.getNextSiblings(declaration, false), "com.mbeddr.core.statements.structure.BreakStatement"))) {
      SNode loopOrSwitch = BreakStatement_Behavior.call_getLoopOrSwitch_1213877377041(followingBreakStatement);
      maybeAddMutexDestroyBefore(mutexDestroyCall, followingBreakStatement, declaration, loopOrSwitch);
    }
    // add a destruction statement before each follwing (nested) continue statement that refers to the same loop  
    // that 'declaration' is also nested in 
    for (SNode followingStatement : ListSequence.fromList(SNodeOperations.getNextSiblings(declaration, false))) {
      for (SNode nestedContinueStatement : ListSequence.fromList(SNodeOperations.getDescendants(followingStatement, "com.mbeddr.core.statements.structure.ContinueStatement", false, new String[]{}))) {
        SNode loop = ContinueStatement_Behavior.call_getLoop_2496938924389293350(nestedContinueStatement);
        maybeAddMutexDestroyBefore(mutexDestroyCall, nestedContinueStatement, declaration, loop);
      }
    }
    for (SNode followingContinueStatement : Sequence.fromIterable(SNodeOperations.ofConcept(SNodeOperations.getNextSiblings(declaration, false), "com.mbeddr.core.statements.structure.ContinueStatement"))) {
      SNode loop = ContinueStatement_Behavior.call_getLoop_2496938924389293350(followingContinueStatement);
      maybeAddMutexDestroyBefore(mutexDestroyCall, followingContinueStatement, declaration, loop);
    }
    // add a destruction statement before each follwing (nested) goto statement that refers to a label outside any 
    // AST of the statements that follow 'declaration' 
    for (SNode followingStatement : ListSequence.fromList(SNodeOperations.getNextSiblings(declaration, false))) {
      for (final SNode nestedGotoStatement : ListSequence.fromList(SNodeOperations.getDescendants(followingStatement, "com.mbeddr.core.modules.structure.GotoStatement", false, new String[]{}))) {
        if (!(ListSequence.fromList(SNodeOperations.getNextSiblings(declaration, false)).any(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return it == SLinkOperations.getTarget(nestedGotoStatement, "label", false) || ListSequence.fromList(SNodeOperations.getDescendants(it, "com.mbeddr.core.modules.structure.LabelStatement", false, new String[]{})).contains(SLinkOperations.getTarget(nestedGotoStatement, "label", false));
          }
        }))) {
          addMutexDestroyBefore(mutexDestroyCall, nestedGotoStatement);
        }
      }
    }
    for (final SNode followingGotoStatement : Sequence.fromIterable(SNodeOperations.ofConcept(SNodeOperations.getNextSiblings(declaration, false), "com.mbeddr.core.modules.structure.GotoStatement"))) {
      if (!(ListSequence.fromList(SNodeOperations.getNextSiblings(declaration, false)).any(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return it == SLinkOperations.getTarget(followingGotoStatement, "label", false) || ListSequence.fromList(SNodeOperations.getDescendants(it, "com.mbeddr.core.modules.structure.LabelStatement", false, new String[]{})).contains(SLinkOperations.getTarget(followingGotoStatement, "label", false));
        }
      }))) {
        addMutexDestroyBefore(mutexDestroyCall, followingGotoStatement);
      }
    }
  }



  private SNode getFunctionOrClosureForReturn(SNode returnStatement) {
    if (ReturnStatement_Behavior.call_isInClosure_8709258261381626604(returnStatement)) {
      return SNodeOperations.getAncestor(returnStatement, "com.mbeddr.core.modules.structure.Closure", false, false);
    }
    if (ReturnStatement_Behavior.call_isInFunction_8709258261381626617(returnStatement)) {
      return SNodeOperations.getAncestor(returnStatement, "com.mbeddr.core.modules.structure.Function", false, false);
    }
    return null;
  }



  private void maybeAddMutexDestroyBefore(SNode mutexDestroyCall, SNode flowBreaker, SNode declaration, SNode flowBreakerTarget) {
    if ((declaration != null) && ListSequence.fromList(SNodeOperations.getAncestors(declaration, null, false)).contains(flowBreakerTarget)) {
      if (SNodeOperations.isInstanceOf(flowBreakerTarget, "com.mbeddr.core.modules.structure.Function") && BehaviorReflection.invokeVirtual(Boolean.TYPE, SNodeOperations.cast(flowBreakerTarget, "com.mbeddr.core.modules.structure.Function"), "virtual_actsAsMainFunction_3209727427932102770", new Object[]{})) {
        return;
      }
      addMutexDestroyBefore(mutexDestroyCall, flowBreaker);
    }
  }



  public void addMutexDestroyBefore(SNode mutexDestroyCall, SNode flowBreaker) {
    SNodeOperations.insertPrevSiblingChild(flowBreaker, SNodeOperations.copyNode(mutexDestroyCall));
  }



  public Pair<SNode, SNode> buildMutexCallsForVariable(final SNode varRef, SNode declaration) {
    SNode type = resolveType(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), declaration, "virtual_getType_704069370490430475", new Object[]{})), "com.mbeddr.core.expressions.structure.Type"));
    if (SNodeOperations.isInstanceOf(type, "com.mbeddr.core.pointers.structure.PointerType")) {
      return null;
    }

    SNode baseTypeToSearchFor = (SNodeOperations.isInstanceOf(type, "com.mbeddr.core.pointers.structure.ArrayType") ? removeArraySizes(type) : type);
    final Pair<SNode, SNode> mutexFunctions = getValueForType(typesToMutexFunctions, baseTypeToSearchFor);

    if (mutexFunctions == null) {
      if (!(SNodeOperations.isInstanceOf(type, "TasksAndSyncs.structure.SharedType"))) {
        return null;
      }
      // declaration must be of type shared<> 
      SNode initCall = buildMutexInitCall(varRef, SNodeOperations.cast(type, "TasksAndSyncs.structure.SharedType"));
      SNode destroyCall = SNodeOperations.copyNode(initCall);
      mutexInitToDestroyCallInline(destroyCall);
      return new Pair(initCall, destroyCall);
    }

    List<SNode> arguments = new ArrayList<SNode>();
    final List<SNode> destroyArguments = new ArrayList<SNode>();
    if (SNodeOperations.isInstanceOf(type, "com.mbeddr.core.pointers.structure.ArrayType")) {
      SNode baseType = SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(type, "com.mbeddr.core.pointers.structure.ArrayType"), "baseType", true), "com.mbeddr.core.expressions.structure.Type");
      final SNode castBaseType = SNodeFactoryOperations.createNewNode("com.mbeddr.core.pointers.structure.PointerType", null);
      final SNode castExpr = new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          final SNode node_2098891715788984932 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = castBaseType;
              return res;
            }
          }.invoke();
          final SNode node_2098891715788986572 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = varRef;
              return res;
            }
          }.invoke();
          SNode node_2098891715788984106 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.CastExpression", null);
              SLinkOperations.setTarget(res, "targetType", node_2098891715788984932, true);
              SLinkOperations.setTarget(res, "expr", node_2098891715788986572, true);
              return res;
            }
          }.invoke();
          return node_2098891715788984106;
        }
      }.invoke();
      ListSequence.fromList(arguments).insertElement(0, sizeOfArray(declaration));
      while (SNodeOperations.isInstanceOf(baseType, "com.mbeddr.core.pointers.structure.ArrayType")) {
        ListSequence.fromList(arguments).insertElement(0, SLinkOperations.getTarget(SNodeOperations.cast(baseType, "com.mbeddr.core.pointers.structure.ArrayType"), "sizeExpr", true));
        baseType = SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(baseType, "com.mbeddr.core.pointers.structure.ArrayType"), "baseType", true), "com.mbeddr.core.expressions.structure.Type");
        SLinkOperations.setTarget(castExpr, "targetType", new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            final SNode node_2098891715789017576 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = SLinkOperations.getTarget(castExpr, "targetType", true);
                return res;
              }
            }.invoke();
            SNode node_2098891715789016890 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.PointerType", null);
                SLinkOperations.setTarget(res, "baseType", node_2098891715789017576, true);
                return res;
              }
            }.invoke();
            return node_2098891715789016890;
          }
        }.invoke(), true);
      }
      SLinkOperations.setTarget(castBaseType, "baseType", SNodeOperations.copyNode(baseType), true);
      ListSequence.fromList(arguments).insertElement(0, castExpr);
    } else {
      ListSequence.fromList(arguments).addElement(new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          final SNode node_2098891715748745630 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = varRef;
              return res;
            }
          }.invoke();
          SNode node_2098891715748745629 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.ReferenceExpr", null);
              SLinkOperations.setTarget(res, "expression", node_2098891715748745630, true);
              return res;
            }
          }.invoke();
          return node_2098891715748745629;
        }
      }.invoke());
    }
    ListSequence.fromList(arguments).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        ListSequence.fromList(destroyArguments).addElement(SNodeOperations.copyNode(it));
      }
    });

    SNode initCall = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_2098891715749425770 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.FunctionCall", null);
            SLinkOperations.setTarget(res, "function", mutexFunctions.first, false);
            return res;
          }
        }.invoke();
        SNode node_2098891715749425769 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ExpressionStatement", null);
            SLinkOperations.setTarget(res, "expr", node_2098891715749425770, true);
            return res;
          }
        }.invoke();
        return node_2098891715749425769;
      }
    }.invoke();
    ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(initCall, "expr", true), "com.mbeddr.core.modules.structure.FunctionCall"), "actuals", true)).addSequence(ListSequence.fromList(arguments));
    SNode destroyCall = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_2098891715749750286 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.FunctionCall", null);
            SLinkOperations.setTarget(res, "function", mutexFunctions.second, false);
            return res;
          }
        }.invoke();
        SNode node_2098891715749750285 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ExpressionStatement", null);
            SLinkOperations.setTarget(res, "expr", node_2098891715749750286, true);
            return res;
          }
        }.invoke();
        return node_2098891715749750285;
      }
    }.invoke();
    ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(destroyCall, "expr", true), "com.mbeddr.core.modules.structure.FunctionCall"), "actuals", true)).addSequence(ListSequence.fromList(destroyArguments));

    return new Pair(initCall, destroyCall);
  }


  /**
   * Every implementation module that has a struct type which is involved in a shared type (by being ancestor
   * or by being descendant) and on whose path to the shared type only lie shared types, struct types or array types
   * gets its own shared implementation module: Modules of this kind define shared types and mutex init/destruct 
   * functions.
   */
  public Map<SNode, SNode> moduleToSharedModule;


  public Map<SNode, SNode> buildSharedModules(List<SNode> resolvedSharedTypes, Set<SNode> structsWithNestedSharedData) {
    moduleToSharedModule = MapSequence.fromMap(new HashMap<SNode, SNode>());
    ListSequence.fromList(resolvedSharedTypes).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        buildSharedModulesRec(it, false);
      }
    });
    SetSequence.fromSet(structsWithNestedSharedData).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        buildSharedModuleForStruct(it);
      }
    });
    return moduleToSharedModule;
  }



  private boolean buildSharedModulesRec(SNode type, boolean buildInAnyCase) {
    {
      SNode sharedType = type;
      if (SNodeOperations.isInstanceOf(sharedType, "TasksAndSyncs.structure.SharedType")) {
        return buildSharedModulesRec(SLinkOperations.getTarget(sharedType, "baseType", true), true);
      }
    }
    {
      SNode arrayType = type;
      if (SNodeOperations.isInstanceOf(arrayType, "com.mbeddr.core.pointers.structure.ArrayType")) {
        return buildSharedModulesRec(SNodeOperations.cast(SLinkOperations.getTarget(arrayType, "baseType", true), "com.mbeddr.core.expressions.structure.Type"), buildInAnyCase);
      }
    }
    {
      SNode structType = type;
      if (SNodeOperations.isInstanceOf(structType, "com.mbeddr.core.udt.structure.StructType")) {
        final Wrappers._boolean membersHaveNestedShared = new Wrappers._boolean();
        ListSequence.fromList(SUDeclaration_Behavior.call_members_9101132143318613823(SLinkOperations.getTarget(structType, "struct", false))).visitAll(new IVisitor<SNode>() {
          public void visit(SNode it) {
            membersHaveNestedShared.value = buildSharedModulesRec(SLinkOperations.getTarget(it, "type", true), false) || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it, "type", true), "TasksAndSyncs.structure.SharedType") || membersHaveNestedShared.value;
          }
        });

        SNode structModule = SNodeOperations.getAncestor(SLinkOperations.getTarget(structType, "struct", false), "com.mbeddr.core.modules.structure.ImplementationModule", false, false);
        if ((buildInAnyCase || membersHaveNestedShared.value) && !(MapSequence.fromMap(moduleToSharedModule).containsKey(structModule))) {
          MapSequence.fromMap(moduleToSharedModule).put(structModule, ModuleBuilder.buildSharedModuleFor(structModule, genContext, model));
        }
        return membersHaveNestedShared.value;
      }
    }
    return false;
  }



  public void buildSharedModulesForStructs(Set<SNode> structsWithNestedSharedData) {
    SetSequence.fromSet(structsWithNestedSharedData).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        buildSharedModuleForStruct(it);
      }
    });
  }



  private void buildSharedModuleForStruct(SNode struct) {
    SNode structModule = SNodeOperations.getAncestor(struct, "com.mbeddr.core.modules.structure.ImplementationModule", false, false);
    if (SetSequence.fromSet(MapSequence.fromMap(moduleToSharedModule).keySet()).contains(structModule)) {
      return;
    }
    MapSequence.fromMap(moduleToSharedModule).put(structModule, ModuleBuilder.buildSharedModuleFor(structModule, genContext, model));
  }
}
