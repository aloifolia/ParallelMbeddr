package TasksAndSyncs.generator.template.main;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.generator.template.BaseMappingRuleContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import TasksAndSyncs.generator.util.Analyzer;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.generator.template.ReferenceMacroContext;
import TasksAndSyncs.generator.util.NameGenerator;
import jetbrains.mps.generator.template.IfMacroContext;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;
import TasksAndSyncs.generator.util.TaskBuilder;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.generator.template.WeavingMappingRuleContext;
import jetbrains.mps.generator.template.MappingScriptContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import java.util.List;
import TasksAndSyncs.generator.util.Pair;
import java.util.ArrayList;
import TasksAndSyncs.generator.util.SharedBuilder;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import TasksAndSyncs.generator.util.ModuleBuilder;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import TasksAndSyncs.generator.util.SyncBuilder;
import com.mbeddr.core.statements.behavior.BreakStatement_Behavior;
import com.mbeddr.core.statements.behavior.ContinueStatement_Behavior;
import com.mbeddr.core.modules.behavior.ReturnStatement_Behavior;
import TasksAndSyncs.generator.util.Optimizer;
import TasksAndSyncs.generator.util.OptimizerData;
import jetbrains.mps.generator.template.TemplateQueryContextWithMacro;
import com.mbeddr.core.udt.behavior.SUDeclaration_Behavior;

@Generated
public class QueriesGenerated {
  public final boolean NEEDS_OPCONTEXT = false;

  public static boolean baseMappingRule_Condition_483189195624888344(final BaseMappingRuleContext _context) {
    // Beware: In a former version the generation needed to be deferred until after any surrounding .run  
    // (GDE with Future target) had been reduced. Thus the weaving rules (args struct and function)  for Task would be executed 
    // for Task would be executed only once (since Task copies were not generated(?)). 
    // => This is not necessary any more, since any |.|.run is now reduced all at once into an optimized 
    //    expression which spares one malloc/free pair of task arguments. 
    // But: wait for the reduction of nested named sync ressources in order to avoid broken references. 
    return ListSequence.fromList(SNodeOperations.getDescendants(_context.getNode(), "TasksAndSyncs.structure.SyncResourceRef", false, new String[]{})).isEmpty();
  }

  public static boolean baseMappingRule_Condition_961131662868723683(final BaseMappingRuleContext _context) {
    return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "TasksAndSyncs.structure.TaskType"), "returnType", true), "com.mbeddr.core.expressions.structure.VoidType")) && ListSequence.fromList(SNodeOperations.getDescendants(_context.getNode(), "TasksAndSyncs.structure.SyncResourceRef", false, new String[]{})).isEmpty();
  }

  public static boolean baseMappingRule_Condition_482600553440859534(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "TasksAndSyncs.structure.TaskType"), "returnType", true), "com.mbeddr.core.expressions.structure.VoidType") && ListSequence.fromList(SNodeOperations.getDescendants(_context.getNode(), "TasksAndSyncs.structure.SyncResourceRef", false, new String[]{})).isEmpty();
  }

  public static boolean baseMappingRule_Condition_5853110027249952918(final BaseMappingRuleContext _context) {
    return Analyzer.taskExprContainsRebindableRefs(SLinkOperations.getTarget(_context.getNode(), "expression", true)) && ListSequence.fromList(SNodeOperations.getDescendants(_context.getNode(), "TasksAndSyncs.structure.SyncResourceRef", false, new String[]{})).isEmpty();
  }

  public static boolean baseMappingRule_Condition_5853110027250126745(final BaseMappingRuleContext _context) {
    return !(Analyzer.taskExprContainsRebindableRefs(SLinkOperations.getTarget(_context.getNode(), "expression", true))) && ListSequence.fromList(SNodeOperations.getDescendants(_context.getNode(), "TasksAndSyncs.structure.SyncResourceRef", false, new String[]{})).isEmpty();
  }

  public static boolean baseMappingRule_Condition_7341014709910168203(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "target", true), "TasksAndSyncs.structure.Future") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "expression", true), "TasksAndSyncs.structure.Task") && ListSequence.fromList(SNodeOperations.getDescendants(_context.getNode(), "TasksAndSyncs.structure.SyncResourceRef", false, new String[]{})).isEmpty() && !(Analyzer.taskExprContainsRebindableRefs(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "expression", true), "TasksAndSyncs.structure.Task"), "expression", true)));
  }

  public static boolean baseMappingRule_Condition_7341014709914872659(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "target", true), "TasksAndSyncs.structure.Future") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "expression", true), "TasksAndSyncs.structure.Task") && ListSequence.fromList(SNodeOperations.getDescendants(_context.getNode(), "TasksAndSyncs.structure.SyncResourceRef", false, new String[]{})).isEmpty() && Analyzer.taskExprContainsRebindableRefs(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "expression", true), "TasksAndSyncs.structure.Task"), "expression", true));
  }

  public static boolean baseMappingRule_Condition_5853110027239779865(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "target", true), "TasksAndSyncs.structure.TaskClear") && SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "expression", true)), "com.mbeddr.core.udt.structure.StructType");
  }

  public static boolean baseMappingRule_Condition_8001979070750347224(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "target", true), "TasksAndSyncs.structure.Future") && ListSequence.fromList(SNodeOperations.getDescendants(_context.getNode(), "TasksAndSyncs.structure.SyncResourceRef", false, new String[]{})).count() == 0;
  }

  public static boolean baseMappingRule_Condition_5853110027240890680(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "target", true), "TasksAndSyncs.structure.FutureJoin");
  }

  public static boolean baseMappingRule_Condition_5853110027241105549(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "target", true), "TasksAndSyncs.structure.FutureResult");
  }

  public static boolean baseMappingRule_Condition_3348893923574157399(final BaseMappingRuleContext _context) {
    // second condition: due to the reduction of named ressources refs to ressource refs by name 
    // (which are untyped) the reduction of .get/.set has to be delayed until the refs by name are 
    // reduced to normal variable references (which are typed) 
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "target", true), "TasksAndSyncs.structure.SharedGet") && (TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "expression", true)) != null);
  }

  public static boolean baseMappingRule_Condition_3348893923573330646(final BaseMappingRuleContext _context) {
    // second condition: due to the reduction of named ressources refs to ressource refs by name 
    // (which are untyped) the reduction of .get/.set has to be delayed until the refs by name are 
    // reduced to normal variable references (which are typed) 
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "target", true), "TasksAndSyncs.structure.SharedSet") && (TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "expression", true)) != null);
  }

  public static boolean baseMappingRule_Condition_4335879941139772582(final BaseMappingRuleContext _context) {
    // no statements => nothing needs to be synchronized 
    return ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(_context.getNode(), "body", true), "statements", true)).count() == 0;
  }

  public static boolean baseMappingRule_Condition_4335879941139985725(final BaseMappingRuleContext _context) {
    // nothing to synchronize => just execute the body 
    return ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(_context.getNode(), "body", true), "statements", true)).count() > 0 && ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "resources", true)).count() == 0;
  }

  public static boolean baseMappingRule_Condition_4335879941140872150(final BaseMappingRuleContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(_context.getNode(), "body", true), "statements", true)).count() > 0 && ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "resources", true)).count() > 0;
  }

  public static Object propertyMacro_GetPropertyValue_6480032978533298609(final PropertyMacroContext _context) {
    return _context.createUniqueName(_context.getTemplateValue(), null);
  }

  public static Object propertyMacro_GetPropertyValue_4335879941137276069(final PropertyMacroContext _context) {
    return _context.createUniqueName(_context.getTemplateValue(), null);
  }

  public static Object propertyMacro_GetPropertyValue_7341014709914634544(final PropertyMacroContext _context) {
    return _context.createUniqueName(_context.getTemplateValue(), null);
  }

  public static Object propertyMacro_GetPropertyValue_7341014709915088014(final PropertyMacroContext _context) {
    return _context.createUniqueName(_context.getTemplateValue(), null);
  }

  public static Object propertyMacro_GetPropertyValue_7341014709914872652(final PropertyMacroContext _context) {
    return _context.createUniqueName(_context.getTemplateValue(), null);
  }

  public static Object propertyMacro_GetPropertyValue_4644263955273508749(final PropertyMacroContext _context) {
    return _context.createUniqueName(_context.getTemplateValue(), null);
  }

  public static Object propertyMacro_GetPropertyValue_4644263955273722005(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), _context.getNode(), "virtual_getVariable_2486081302460156153", new Object[]{}), "name");
  }

  public static Object propertyMacro_GetPropertyValue_4644263955274589810(final PropertyMacroContext _context) {
    return _context.createUniqueName(_context.getTemplateValue(), null);
  }

  public static Object propertyMacro_GetPropertyValue_482600553440749847(final PropertyMacroContext _context) {
    return _context.createUniqueName(_context.getTemplateValue(), null);
  }

  public static Object referenceMacro_GetReferent_4644263955272622644(final ReferenceMacroContext _context) {
    return NameGenerator.getTaskStructName();
  }

  public static Object referenceMacro_GetReferent_9181285766590306602(final ReferenceMacroContext _context) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "returnType", true), "com.mbeddr.core.expressions.structure.VoidType")) {
      return NameGenerator.getVoidFutureStructName();
    } else {
      return NameGenerator.getFutureStructName();
    }
  }

  public static Object referenceMacro_GetReferent_6480032978533298601(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "argsStruct");
  }

  public static Object referenceMacro_GetReferent_6480032978533298622(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "argsStruct");
  }

  public static Object referenceMacro_GetReferent_6480032978533298634(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "argsStruct");
  }

  public static Object referenceMacro_GetReferent_483189195638037800(final ReferenceMacroContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "var", false);
  }

  public static Object referenceMacro_GetReferent_483189195633917582(final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), _context.getNode(), "virtual_getVariable_2486081302460156153", new Object[]{}), "name");
  }

  public static Object referenceMacro_GetReferent_483189195638139877(final ReferenceMacroContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "arg", false);
  }

  public static Object referenceMacro_GetReferent_483189195637971588(final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), _context.getNode(), "virtual_getVariable_2486081302460156153", new Object[]{}), "name");
  }

  public static Object referenceMacro_GetReferent_9181285766593538799(final ReferenceMacroContext _context) {
    return NameGenerator.getTaskStructName();
  }

  public static Object referenceMacro_GetReferent_9181285766593469286(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "funDecl");
  }

  public static Object referenceMacro_GetReferent_9181285766593469295(final ReferenceMacroContext _context) {
    return NameGenerator.getTaskStructName();
  }

  public static Object referenceMacro_GetReferent_8001979070748498254(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "argsStruct");
  }

  public static Object referenceMacro_GetReferent_6480032978533298708(final ReferenceMacroContext _context) {
    return NameGenerator.getTaskStructName();
  }

  public static Object referenceMacro_GetReferent_9181285766593002228(final ReferenceMacroContext _context) {
    return NameGenerator.getTaskStructName();
  }

  public static Object referenceMacro_GetReferent_9181285766592990110(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "funDecl");
  }

  public static Object referenceMacro_GetReferent_9181285766592990119(final ReferenceMacroContext _context) {
    return NameGenerator.getTaskStructName();
  }

  public static Object referenceMacro_GetReferent_7341014709910994305(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "expression", true), "TasksAndSyncs.structure.Task"), "funDecl");
  }

  public static Object referenceMacro_GetReferent_7341014709911141259(final ReferenceMacroContext _context) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "TasksAndSyncs.structure.FutureType"), "returnType", true), "com.mbeddr.core.expressions.structure.VoidType")) {
      return NameGenerator.getVoidFutureStructName();
    } else {
      return NameGenerator.getFutureStructName();
    }
  }

  public static Object referenceMacro_GetReferent_7341014709912483000(final ReferenceMacroContext _context) {
    return NameGenerator.getFutureStructName();
  }

  public static Object referenceMacro_GetReferent_7341014709918695236(final ReferenceMacroContext _context) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "TasksAndSyncs.structure.FutureType"), "returnType", true), "com.mbeddr.core.expressions.structure.VoidType")) {
      return NameGenerator.getVoidFutureStructName();
    } else {
      return NameGenerator.getFutureStructName();
    }
  }

  public static Object referenceMacro_GetReferent_7341014709915088003(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "expression", true), "TasksAndSyncs.structure.Task"), "argsStruct");
  }

  public static Object referenceMacro_GetReferent_7341014709915088027(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "expression", true), "TasksAndSyncs.structure.Task"), "argsStruct");
  }

  public static Object referenceMacro_GetReferent_7341014709915088042(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "expression", true), "TasksAndSyncs.structure.Task"), "argsStruct");
  }

  public static Object referenceMacro_GetReferent_7341014709915212869(final ReferenceMacroContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "var", false);
  }

  public static Object referenceMacro_GetReferent_7341014709915212878(final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), _context.getNode(), "virtual_getVariable_2486081302460156153", new Object[]{}), "name");
  }

  public static Object referenceMacro_GetReferent_7341014709915319282(final ReferenceMacroContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "arg", false);
  }

  public static Object referenceMacro_GetReferent_7341014709915319291(final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), _context.getNode(), "virtual_getVariable_2486081302460156153", new Object[]{}), "name");
  }

  public static Object referenceMacro_GetReferent_7341014709914872619(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "expression", true), "TasksAndSyncs.structure.Task"), "funDecl");
  }

  public static Object referenceMacro_GetReferent_7341014709914872636(final ReferenceMacroContext _context) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "TasksAndSyncs.structure.FutureType"), "returnType", true), "com.mbeddr.core.expressions.structure.VoidType")) {
      return NameGenerator.getVoidFutureStructName();
    } else {
      return NameGenerator.getFutureStructName();
    }
  }

  public static Object referenceMacro_GetReferent_7341014709914872646(final ReferenceMacroContext _context) {
    return NameGenerator.getFutureStructName();
  }

  public static Object referenceMacro_GetReferent_7341014709918700101(final ReferenceMacroContext _context) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "TasksAndSyncs.structure.FutureType"), "returnType", true), "com.mbeddr.core.expressions.structure.VoidType")) {
      return NameGenerator.getVoidFutureStructName();
    } else {
      return NameGenerator.getFutureStructName();
    }
  }

  public static Object referenceMacro_GetReferent_8001979070750438980(final ReferenceMacroContext _context) {
    return "args";
  }

  public static Object referenceMacro_GetReferent_8001979070750347197(final ReferenceMacroContext _context) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "TasksAndSyncs.structure.FutureType"), "returnType", true), "com.mbeddr.core.expressions.structure.VoidType")) {
      return NameGenerator.getVoidFutureFunctionName();
    } else {
      return NameGenerator.getFutureFunctionName();
    }
  }

  public static Object referenceMacro_GetReferent_5853110027240890658(final ReferenceMacroContext _context) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "expression", true)), "TasksAndSyncs.structure.FutureType"), "returnType", true), "com.mbeddr.core.expressions.structure.VoidType")) {
      return NameGenerator.getVoidFutureSaveAndJoinFunctionName();
    } else {
      return NameGenerator.getFutureSaveAndJoinFunctionName();
    }
  }

  public static Object referenceMacro_GetReferent_5853110027246348662(final ReferenceMacroContext _context) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "expression", true)), "TasksAndSyncs.structure.FutureType"), "returnType", true), "com.mbeddr.core.expressions.structure.VoidType")) {
      return NameGenerator.getVoidFutureJoinFunctionName();
    } else {
      return NameGenerator.getFutureJoinFunctionName();
    }
  }

  public static Object referenceMacro_GetReferent_5853110027241054311(final ReferenceMacroContext _context) {
    return NameGenerator.getFutureSaveAndResultFunctionName();
  }

  public static Object referenceMacro_GetReferent_5853110027245226874(final ReferenceMacroContext _context) {
    return NameGenerator.getFutureResultFunctionName();
  }

  public static Object referenceMacro_GetReferent_4644263955274749574(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "argsStruct");
  }

  public static Object referenceMacro_GetReferent_4644263955274683221(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "argsStruct");
  }

  public static Object referenceMacro_GetReferent_7288607883539663801(final ReferenceMacroContext _context) {
    return NameGenerator.getFutureStructName();
  }

  public static Object referenceMacro_GetReferent_7288607883539589338(final ReferenceMacroContext _context) {
    return "fun";
  }

  public static Object referenceMacro_GetReferent_7288607883539589346(final ReferenceMacroContext _context) {
    return "args";
  }

  public static Object referenceMacro_GetReferent_7288607883539589354(final ReferenceMacroContext _context) {
    return NameGenerator.getFutureStructName();
  }

  public static Object referenceMacro_GetReferent_7288607883539589365(final ReferenceMacroContext _context) {
    return NameGenerator.getFutureStructName();
  }

  public static Object referenceMacro_GetReferent_7288607883539679450(final ReferenceMacroContext _context) {
    return NameGenerator.getTaskStructName();
  }

  public static Object referenceMacro_GetReferent_482600553440749753(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "argsStruct");
  }

  public static Object referenceMacro_GetReferent_482600553440749765(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "argsStruct");
  }

  public static boolean ifMacro_Condition_5853110027246336879(final IfMacroContext _context) {
    return !(Analyzer.isLValue(SLinkOperations.getTarget(_context.getNode(), "expression", true)));
  }

  public static boolean ifMacro_Condition_5853110027245199982(final IfMacroContext _context) {
    return !(Analyzer.isLValue(SLinkOperations.getTarget(_context.getNode(), "expression", true)));
  }

  public static boolean ifMacro_Condition_5853110027233552314(final IfMacroContext _context) {
    return !(SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "expression", true)), "com.mbeddr.core.pointers.structure.PointerType"));
  }

  public static boolean ifMacro_Condition_5853110027225425714(final IfMacroContext _context) {
    return !(SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "expression", true)), "com.mbeddr.core.pointers.structure.PointerType"));
  }

  public static boolean ifMacro_Condition_3227138667944846625(final IfMacroContext _context) {
    return SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(_context.getNode()), "com.mbeddr.core.pointers.structure.PointerType");
  }

  public static boolean ifMacro_Condition_4335879941140872237(final IfMacroContext _context) {
    return SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(_context.getNode()), "com.mbeddr.core.pointers.structure.PointerType");
  }

  public static boolean ifMacro_Condition_5853110027247092330(final IfMacroContext _context) {
    return Analyzer.taskExprContainsRebindableRefs(SLinkOperations.getTarget(_context.getNode(), "expression", true));
  }

  public static boolean ifMacro_Condition_5853110027254624687(final IfMacroContext _context) {
    return Analyzer.taskExprContainsRebindableRefs(SLinkOperations.getTarget(_context.getNode(), "expression", true));
  }

  public static boolean ifMacro_Condition_7341014709904554441(final IfMacroContext _context) {
    return Analyzer.taskExprContainsRebindableRefs(SLinkOperations.getTarget(_context.getNode(), "expression", true));
  }

  public static boolean ifMacro_Condition_5853110027248214520(final IfMacroContext _context) {
    return Analyzer.taskExprContainsRebindableRefs(SLinkOperations.getTarget(_context.getNode(), "expression", true));
  }

  public static boolean ifMacro_Condition_5853110027256497950(final IfMacroContext _context) {
    return Analyzer.taskExprContainsRebindableRefs(SLinkOperations.getTarget(_context.getNode(), "expression", true));
  }

  public static boolean ifMacro_Condition_7341014709904572607(final IfMacroContext _context) {
    return Analyzer.taskExprContainsRebindableRefs(SLinkOperations.getTarget(_context.getNode(), "expression", true));
  }

  public static SNode sourceNodeQuery_5853110027240890651(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode sourceNodeQuery_5853110027246348655(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode sourceNodeQuery_5853110027241054287(final SourceSubstituteMacroNodeContext _context) {
    return SNodeOperations.copyNode(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "expression", true)), "TasksAndSyncs.structure.FutureType"), "returnType", true));
  }

  public static SNode sourceNodeQuery_5853110027241054304(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode sourceNodeQuery_5853110027245222906(final SourceSubstituteMacroNodeContext _context) {
    return SNodeOperations.copyNode(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "expression", true)), "TasksAndSyncs.structure.FutureType"), "returnType", true));
  }

  public static SNode sourceNodeQuery_5853110027245226867(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode sourceNodeQuery_4335879941141180837(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "body", true);
  }

  public static SNode sourceNodeQuery_4644263955274064956(final SourceSubstituteMacroNodeContext _context) {
    if (!(SNodeOperations.isInstanceOf(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), _context.getNode(), "virtual_getVariable_2486081302460156153", new Object[]{}), "virtual_getType_704069370490430475", new Object[]{}), "com.mbeddr.core.pointers.structure.ArrayType"))) {
      return SNodeOperations.copyNode(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), _context.getNode(), "virtual_getVariable_2486081302460156153", new Object[]{}), "virtual_getType_704069370490430475", new Object[]{}));
    }

    SNode innerPointerType = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.PointerType", null);
    final Wrappers._T<SNode> outerPointerType = new Wrappers._T<SNode>(innerPointerType);
    SNode typeOfArg = SNodeOperations.cast(SNodeOperations.copyNode(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), _context.getNode(), "virtual_getVariable_2486081302460156153", new Object[]{}), "virtual_getType_704069370490430475", new Object[]{})), "com.mbeddr.core.pointers.structure.ArrayType");
    while (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(typeOfArg, "baseType", true), "com.mbeddr.core.pointers.structure.ArrayType")) {
      typeOfArg = SNodeOperations.cast(SLinkOperations.getTarget(typeOfArg, "baseType", true), "com.mbeddr.core.pointers.structure.ArrayType");
      outerPointerType.value = new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          final SNode node_4470518958269667255 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = outerPointerType.value;
              return res;
            }
          }.invoke();
          SNode node_4470518958269667254 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.PointerType", null);
              SLinkOperations.setTarget(res, "baseType", node_4470518958269667255, true);
              return res;
            }
          }.invoke();
          return node_4470518958269667254;
        }
      }.invoke();
    }
    SLinkOperations.setTarget(innerPointerType, "baseType", SLinkOperations.getTarget(typeOfArg, "baseType", true), true);
    return outerPointerType.value;
  }

  public static SNode sourceNodeQuery_483189195639578001(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode sourceNodeQuery_483189195640429924(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static Iterable<SNode> sourceNodesQuery_483189195633917592(final SourceSubstituteMacroNodesContext _context) {
    return SNodeOperations.ofConcept(TaskBuilder.getIVarRefsFromTaskExpr(_context.getNode()), "com.mbeddr.core.statements.structure.LocalVarRef");
  }

  public static Iterable<SNode> sourceNodesQuery_483189195637971610(final SourceSubstituteMacroNodesContext _context) {
    return SNodeOperations.ofConcept(TaskBuilder.getIVarRefsFromTaskExpr(_context.getNode()), "com.mbeddr.core.modules.structure.ArgumentRef");
  }

  public static Iterable<SNode> sourceNodesQuery_7341014709915212888(final SourceSubstituteMacroNodesContext _context) {
    return SNodeOperations.ofConcept(TaskBuilder.getIVarRefsFromTaskExpr(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "expression", true), "TasksAndSyncs.structure.Task")), "com.mbeddr.core.statements.structure.LocalVarRef");
  }

  public static Iterable<SNode> sourceNodesQuery_7341014709915319301(final SourceSubstituteMacroNodesContext _context) {
    return SNodeOperations.ofConcept(TaskBuilder.getIVarRefsFromTaskExpr(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "expression", true), "TasksAndSyncs.structure.Task")), "com.mbeddr.core.modules.structure.ArgumentRef");
  }

  public static Iterable<SNode> sourceNodesQuery_3227138667944846638(final SourceSubstituteMacroNodesContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "resources", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (SLinkOperations.getTarget(it, "expression", true) != null);
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(it, "expression", true);
      }
    });
  }

  public static Iterable<SNode> sourceNodesQuery_4335879941140872250(final SourceSubstituteMacroNodesContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "resources", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (SLinkOperations.getTarget(it, "expression", true) != null);
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(it, "expression", true);
      }
    });
  }

  public static Iterable<SNode> sourceNodesQuery_4644263955273538232(final SourceSubstituteMacroNodesContext _context) {
    return TaskBuilder.getIVarRefsFromTaskExpr(_context.getNode());
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_4644263955273501386(final WeavingMappingRuleContext _context) {
    return _context.getCopiedOutputNodeForInputNode(SNodeOperations.getAncestor(_context.getNode(), "com.mbeddr.core.modules.structure.ImplementationModule", false, false));
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_4644263955274607916(final WeavingMappingRuleContext _context) {
    return _context.getCopiedOutputNodeForInputNode(SNodeOperations.getAncestor(_context.getNode(), "com.mbeddr.core.modules.structure.ImplementationModule", false, false));
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_482600553440859523(final WeavingMappingRuleContext _context) {
    return _context.getCopiedOutputNodeForInputNode(SNodeOperations.getAncestor(_context.getNode(), "com.mbeddr.core.modules.structure.ImplementationModule", false, false));
  }

  public static void mappingScript_CodeBlock_6340335959758487422(final MappingScriptContext _context) {
    SNode genericTaskModule = ListSequence.fromList(SModelOperations.getRoots(_context.getModel(), "com.mbeddr.core.modules.structure.ImplementationModule")).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.getString(it, "name").equals(NameGenerator.getGenericTaskModuleName());
      }
    });

    SNode taskStruct = TaskBuilder.buildTaskStruct(false, NameGenerator.getTaskStructName());
    ListSequence.fromList(SLinkOperations.getTargets(genericTaskModule, "contents", true)).addElement(taskStruct);

    SNode futureStruct = TaskBuilder.buildFutureStruct(false, NameGenerator.getFutureStructName());
    ListSequence.fromList(SLinkOperations.getTargets(genericTaskModule, "contents", true)).addElement(futureStruct);

    SNode voidFutureStruct = TaskBuilder.buildFutureStruct(true, NameGenerator.getVoidFutureStructName());
    ListSequence.fromList(SLinkOperations.getTargets(genericTaskModule, "contents", true)).addElement(voidFutureStruct);

    SNode futureFunction = TaskBuilder.buildFutureFunction(taskStruct, futureStruct, NameGenerator.getFutureFunctionName());
    ListSequence.fromList(SLinkOperations.getTargets(genericTaskModule, "contents", true)).addElement(futureFunction);

    SNode voidFutureFunction = TaskBuilder.buildFutureFunction(taskStruct, voidFutureStruct, NameGenerator.getVoidFutureFunctionName());
    ListSequence.fromList(SLinkOperations.getTargets(genericTaskModule, "contents", true)).addElement(voidFutureFunction);

    SNode voidFutureJoinFunction = TaskBuilder.buildFutureJoinFunction(voidFutureStruct, NameGenerator.getVoidFutureJoinFunctionName());
    ListSequence.fromList(SLinkOperations.getTargets(genericTaskModule, "contents", true)).addElement(voidFutureJoinFunction);

    // If the future to join is not saved in a variable like "varName = |..|.run; varName.join" 
    // the resulting join function cannot take the address of the future since it is not an lvalue. 
    // Therefore a helper method is generated:  
    //   
    //   void saveAndJoinFuture(Future future) {  // future is now an lvalue 
    //     join(&future);                         // the address can be taken 
    //   } 
    SNode voidFutureSaveAndJoinFunction = TaskBuilder.buildFutureSaveAndJoinFunction(voidFutureStruct, voidFutureJoinFunction, NameGenerator.getVoidFutureSaveAndJoinFunctionName());
    ListSequence.fromList(SLinkOperations.getTargets(genericTaskModule, "contents", true)).addElement(voidFutureSaveAndJoinFunction);

    SNode futureResultFunction = TaskBuilder.buildFutureResultFunction(futureStruct, NameGenerator.getFutureResultFunctionName());
    ListSequence.fromList(SLinkOperations.getTargets(genericTaskModule, "contents", true)).addElement(futureResultFunction);

    // for explanations concerning the "save" see voidFutureSaveAndJoinFunction 
    SNode futureSaveAndResultFunction = TaskBuilder.buildFutureSaveAndResultFunction(futureStruct, futureResultFunction, NameGenerator.getFutureSaveAndResultFunctionName());
    ListSequence.fromList(SLinkOperations.getTargets(genericTaskModule, "contents", true)).addElement(futureSaveAndResultFunction);
  }

  public static void mappingScript_CodeBlock_2852056939580752791(final MappingScriptContext _context) {
    final SNode genericSharedModule = ListSequence.fromList(SModelOperations.getRoots(_context.getModel(), "com.mbeddr.core.modules.structure.ImplementationModule")).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.getString(it, "name").equals(NameGenerator.getGenericSharedModuleName());
      }
    });

    List<Pair<SNode, SNode>> sharedTypeToStructType = ListSequence.fromList(new ArrayList<Pair<SNode, SNode>>());

    // create mutex attribute that will be re-used for every (recursive) mutex  
    SNode mutexAttribute = SharedBuilder.buildMutexAttribute(_context);

    SharedBuilder sharedBuilder = new SharedBuilder();
    sharedBuilder.initData(mutexAttribute, _context, _context.getModel(), sharedTypeToStructType);

    Map<SNode, SNode> sharedToResolvedTypes = sharedBuilder.getSharedToResolvedTypes();

    if (MapSequence.fromMap(sharedToResolvedTypes).count() == 0) {
      return;
    }

    ListSequence.fromList(SLinkOperations.getTargets(genericSharedModule, "contents", true)).addElement(mutexAttribute);

    Set<SNode> structsWithNestedSharedData = sharedBuilder.getStructsWithNestedSharedData();

    // build module specific "shared modules" that are used to store user-defined shared structs and mutex functions 
    final Map<SNode, SNode> moduleToSharedModule = sharedBuilder.buildSharedModules(Sequence.fromIterable(MapSequence.fromMap(sharedToResolvedTypes).values()).toListSequence(), structsWithNestedSharedData);
    Sequence.fromIterable(MapSequence.fromMap(moduleToSharedModule).values()).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        ModuleBuilder.importModule(genericSharedModule, it);
      }
    });

    // additionally build module specific "shared modules" for  

    // One store per module which defines a struct which is at least once used in a shared type. 
    // The store is a module that contains all related shared struct definitions. To make the struct 
    // type visible in the imported module the struct declaration is lifted into the upper module later on. 
    Map<SNode, SNode> structToSharedModule = MapSequence.fromMap(new HashMap<SNode, SNode>());

    sharedBuilder.buildStructsForSharedTypes(sharedToResolvedTypes, structToSharedModule, genericSharedModule);
    sharedBuilder.buildAllMutexFunctions(moduleToSharedModule, genericSharedModule);
    sharedBuilder.buildGlobalMutexCalls();
    sharedBuilder.buildLocalMutexCalls();
    sharedBuilder.buildMutexAttributeInitCalls(mutexAttribute);

    sharedBuilder.substituteSharedByStructTypes();
    // add struct declarations that substitute the shared types and lift struct declarations  
    // that are used in shared types to the corresponding shared type module 
    SharedBuilder.addNewStructTypesToModules(structToSharedModule);
    // likewise lift structs that contain members of shared types 
    SetSequence.fromSet(structsWithNestedSharedData).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        SNode structModule = SNodeOperations.getAncestor(it, "com.mbeddr.core.modules.structure.ImplementationModule", false, false);
        if (SharedBuilder.addOrLiftStruct(it, structModule, MapSequence.fromMap(moduleToSharedModule).get(structModule))) {
          SharedBuilder.addOrLiftStructMembers(it, structModule, MapSequence.fromMap(moduleToSharedModule).get(structModule));
        }
      }
    });
  }

  public static void mappingScript_CodeBlock_3348893923579063300(final MappingScriptContext _context) {
    SNode genericSyncModule = ListSequence.fromList(SModelOperations.getRoots(_context.getModel(), "com.mbeddr.core.modules.structure.ImplementationModule")).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.getString(it, "name").equals(NameGenerator.getGenericSyncModuleName());
      }
    });

    final Map<Integer, SNode> argCountToStartSyncFunc = MapSequence.fromMap(new HashMap<Integer, SNode>());
    final Map<Integer, SNode> argCountToStopSyncFunc = MapSequence.fromMap(new HashMap<Integer, SNode>());

    SNode randomGeneratorFunction = SyncBuilder.buildRandomNumberGeneratorFunction();
    ListSequence.fromList(SLinkOperations.getTargets(genericSyncModule, "contents", true)).addElement(randomGeneratorFunction);

    SNode backoffExponentiallyFunction = SyncBuilder.buildBackoffExponentiallyFunction(randomGeneratorFunction);
    ListSequence.fromList(SLinkOperations.getTargets(genericSyncModule, "contents", true)).addElement(backoffExponentiallyFunction);

    // generate start and stop functions 
    for (SNode implementationModule : ListSequence.fromList(SModelOperations.getRoots(_context.getModel(), "com.mbeddr.core.modules.structure.ImplementationModule"))) {
      for (SNode syncStart : ListSequence.fromList(SNodeOperations.getDescendants(implementationModule, "TasksAndSyncs.structure.SyncStart", false, new String[]{}))) {
        if (!(MapSequence.fromMap(argCountToStartSyncFunc).containsKey(ListSequence.fromList(SLinkOperations.getTargets(syncStart, "exprs", true)).count()))) {
          MapSequence.fromMap(argCountToStartSyncFunc).put(ListSequence.fromList(SLinkOperations.getTargets(syncStart, "exprs", true)).count(), SyncBuilder.buildStartSyncFunction(_context, ListSequence.fromList(SLinkOperations.getTargets(syncStart, "exprs", true)).count(), backoffExponentiallyFunction));
          ListSequence.fromList(SLinkOperations.getTargets(genericSyncModule, "contents", true)).addElement(MapSequence.fromMap(argCountToStartSyncFunc).get(ListSequence.fromList(SLinkOperations.getTargets(syncStart, "exprs", true)).count()));
        }
      }
      for (SNode syncStop : ListSequence.fromList(SNodeOperations.getDescendants(implementationModule, "TasksAndSyncs.structure.SyncStop", false, new String[]{}))) {
        if (!(MapSequence.fromMap(argCountToStopSyncFunc).containsKey(ListSequence.fromList(SLinkOperations.getTargets(syncStop, "exprs", true)).count()))) {
          MapSequence.fromMap(argCountToStopSyncFunc).put(ListSequence.fromList(SLinkOperations.getTargets(syncStop, "exprs", true)).count(), SyncBuilder.buildStopSyncFunction(_context, ListSequence.fromList(SLinkOperations.getTargets(syncStop, "exprs", true)).count()));
          ListSequence.fromList(SLinkOperations.getTargets(genericSyncModule, "contents", true)).addElement(MapSequence.fromMap(argCountToStopSyncFunc).get(ListSequence.fromList(SLinkOperations.getTargets(syncStop, "exprs", true)).count()));
        }
      }
    }

    // add sync stops for return/break/continue statements that break the synchronization flow inside 
    // a function or loop 
    for (SNode implementationModule : ListSequence.fromList(SModelOperations.getRoots(_context.getModel(), "com.mbeddr.core.modules.structure.ImplementationModule"))) {
      // process the SyncStart statements beginning with the innermost ones and going outwards 
      for (SNode syncStart : ListSequence.fromList(SNodeOperations.getDescendants(implementationModule, "com.mbeddr.core.statements.structure.ExpressionStatement", false, new String[]{})).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it, "expr", true), "TasksAndSyncs.structure.SyncStart");
        }
      }).sort(new ISelector<SNode, Integer>() {
        public Integer select(SNode it) {
          return ListSequence.fromList(SNodeOperations.getAncestors(it, null, false)).count();
        }
      }, false)) {
        final SNode syncBlock = SNodeOperations.cast(SNodeOperations.getNextSibling(syncStart), "com.mbeddr.core.statements.structure.StatementList");
        SNode syncStop = SNodeOperations.cast(SNodeOperations.getNextSibling(syncBlock), "com.mbeddr.core.statements.structure.Statement");
        // add a SyncStop before the break statement if the synchronization block is nested  
        // inside the loop that belongs to this statement (the other statements are treated conceptually equal) 
        for (SNode breakStatement : ListSequence.fromList(SNodeOperations.getDescendants(syncBlock, "com.mbeddr.core.statements.structure.BreakStatement", false, new String[]{}))) {
          SyncBuilder.maybeAddSyncStopBefore(syncStop, breakStatement, BreakStatement_Behavior.call_getLoopOrSwitch_1213877377041(breakStatement));
        }
        for (SNode continueStatement : ListSequence.fromList(SNodeOperations.getDescendants(syncBlock, "com.mbeddr.core.statements.structure.ContinueStatement", false, new String[]{}))) {
          SyncBuilder.maybeAddSyncStopBefore(syncStop, continueStatement, ContinueStatement_Behavior.call_getLoop_2496938924389293350(continueStatement));
        }
        for (SNode returnStatement : ListSequence.fromList(SNodeOperations.getDescendants(syncBlock, "com.mbeddr.core.modules.structure.ReturnStatement", false, new String[]{})).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return ReturnStatement_Behavior.call_isInClosure_8709258261381626604(it);
          }
        })) {
          SyncBuilder.maybeAddSyncStopBefore(syncStop, returnStatement, SNodeOperations.getAncestor(returnStatement, "com.mbeddr.core.modules.structure.Closure", false, false));
        }
        for (SNode returnStatement : ListSequence.fromList(SNodeOperations.getDescendants(syncBlock, "com.mbeddr.core.modules.structure.ReturnStatement", false, new String[]{})).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return !(ReturnStatement_Behavior.call_isInClosure_8709258261381626604(it)) && ReturnStatement_Behavior.call_isInFunction_8709258261381626617(it);
          }
        })) {
          SyncBuilder.maybeAddSyncStopBefore(syncStop, returnStatement, SNodeOperations.getAncestor(returnStatement, "com.mbeddr.core.modules.structure.Function", false, false));
        }
        for (SNode gotoStatement : ListSequence.fromList(SNodeOperations.getDescendants(syncBlock, "com.mbeddr.core.modules.structure.GotoStatement", false, new String[]{})).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return !(ListSequence.fromList(SNodeOperations.getAncestors(SLinkOperations.getTarget(it, "label", false), null, false)).contains(syncBlock));
          }
        })) {
          SyncBuilder.addSynStopBefore(syncStop, gotoStatement);
        }
      }
    }


    // replace syncStart/-Stop by calls to the functions that were generated in the last step 
    for (SNode implementationModule : ListSequence.fromList(SModelOperations.getRoots(_context.getModel(), "com.mbeddr.core.modules.structure.ImplementationModule"))) {
      for (final SNode syncStart : ListSequence.fromList(SNodeOperations.getDescendants(implementationModule, "TasksAndSyncs.structure.SyncStart", false, new String[]{}))) {
        SNode syncStartCall = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode node_4470518958269668090 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.FunctionCall", null);
                SLinkOperations.setTarget(res, "function", MapSequence.fromMap(argCountToStartSyncFunc).get(ListSequence.fromList(SLinkOperations.getTargets(syncStart, "exprs", true)).count()), false);
                return res;
              }
            }.invoke();
            return node_4470518958269668090;
          }
        }.invoke();
        ListSequence.fromList(SLinkOperations.getTargets(syncStartCall, "actuals", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(syncStart, "exprs", true)));
        SNodeOperations.replaceWithAnother(syncStart, syncStartCall);
      }
      for (final SNode syncStop : ListSequence.fromList(SNodeOperations.getDescendants(implementationModule, "TasksAndSyncs.structure.SyncStop", false, new String[]{}))) {
        SNode syncStopCall = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode node_4470518958269668126 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.FunctionCall", null);
                SLinkOperations.setTarget(res, "function", MapSequence.fromMap(argCountToStopSyncFunc).get(ListSequence.fromList(SLinkOperations.getTargets(syncStop, "exprs", true)).count()), false);
                return res;
              }
            }.invoke();
            return node_4470518958269668126;
          }
        }.invoke();
        ListSequence.fromList(SLinkOperations.getTargets(syncStopCall, "actuals", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(syncStop, "exprs", true)));
        SNodeOperations.replaceWithAnother(syncStop, syncStopCall);
      }
    }
  }

  public static void mappingScript_CodeBlock_5853110027234870833(final MappingScriptContext _context) {
    // tasks and futures 
    SNode genericTaskModule = ModuleBuilder.buildGeneric(NameGenerator.getGenericTaskModuleName(), _context.getModel());

    // shared<> types 
    SNode genericSharedModule = ModuleBuilder.buildGeneric(NameGenerator.getGenericSharedModuleName(), _context.getModel());

    // sync statements => mutex locks/unlocks 
    SNode genericSyncModule = ModuleBuilder.buildGeneric(NameGenerator.getGenericSyncModuleName(), _context.getModel());
  }

  public static void mappingScript_CodeBlock_3271375101705763884(final MappingScriptContext _context) {
    for (SNode implementationModule : ListSequence.fromList(SModelOperations.getRoots(_context.getModel(), "com.mbeddr.core.modules.structure.ImplementationModule"))) {
      for (final SNode localVar : ListSequence.fromList(SNodeOperations.getDescendants(implementationModule, "com.mbeddr.core.statements.structure.LocalVariableDeclaration", false, new String[]{})).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it, "type", true), "TasksAndSyncs.structure.SharedType");
        }
      })) {
        final SNode localVarFunction = Analyzer.getSurroundingFunctionOrClosure(localVar);
        // Do conflicting nested(!) shared variables exist? 
        if (ListSequence.fromList(SNodeOperations.getNextSiblings(localVar, false)).any(new IWhereFilter<SNode>() {
          public boolean accept(SNode sibling) {
            return ListSequence.fromList(SNodeOperations.getDescendants(sibling, "com.mbeddr.core.statements.structure.LocalVariableDeclaration", false, new String[]{})).any(new IWhereFilter<SNode>() {
              public boolean accept(SNode nestedLocalVar) {
                // Conflict? (= same name and same function/closure) 
                SNode nestedLocalVarFunction = Analyzer.getSurroundingFunctionOrClosure(nestedLocalVar);
                return SPropertyOperations.getString(nestedLocalVar, "name").equals(SPropertyOperations.getString(localVar, "name")) && localVarFunction == nestedLocalVarFunction;
              }
            });
          }
        })) {
          SPropertyOperations.set(localVar, "name", _context.createUniqueName(SPropertyOperations.getString(localVar, "name"), null));
        }
      }
    }
  }

  public static void mappingScript_CodeBlock_3227138667944301640(final MappingScriptContext _context) {
    for (SNode implementationModule : ListSequence.fromList(SModelOperations.getRoots(_context.getModel(), "com.mbeddr.core.modules.structure.ImplementationModule"))) {
      for (SNode sync : ListSequence.fromList(SNodeOperations.getDescendants(implementationModule, "TasksAndSyncs.structure.SyncStatement", false, new String[]{}))) {
        if (Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getTargets(sync, "resources", true), "TasksAndSyncs.structure.SyncResourceNamed")).isEmpty()) {
          continue;
        }

        SNode syncWrapper = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode node_4470518958269668293 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.StatementList", null);
                return res;
              }
            }.invoke();
            return node_4470518958269668293;
          }
        }.invoke();
        SNodeOperations.replaceWithAnother(sync, syncWrapper);
        ListSequence.fromList(SLinkOperations.getTargets(syncWrapper, "statements", true)).addElement(sync);

        for (final SNode namedRessource : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getTargets(sync, "resources", true), "TasksAndSyncs.structure.SyncResourceNamed"))) {
          final SNode namedRessourceDeclaration = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              final SNode node_4470518958269668322 = TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(namedRessource, "expression", true));
              final SNode node_4470518958269668333 = new _FunctionTypes._return_P0_E0<SNode>() {
                public SNode invoke() {
                  SNode res = SLinkOperations.getTarget(namedRessource, "expression", true);
                  return res;
                }
              }.invoke();
              SNode node_4470518958269668321 = new _FunctionTypes._return_P0_E0<SNode>() {
                public SNode invoke() {
                  SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.LocalVariableDeclaration", null);
                  SPropertyOperations.set(res, "name", (SPropertyOperations.getString(namedRessource, "name")));
                  SLinkOperations.setTarget(res, "type", node_4470518958269668322, true);
                  SLinkOperations.setTarget(res, "init", node_4470518958269668333, true);
                  return res;
                }
              }.invoke();
              return node_4470518958269668321;
            }
          }.invoke();

          System.out.println("?????should replace.....");
          ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(sync, "body", true), "TasksAndSyncs.structure.SyncResourceRef", false, new String[]{})).visitAll(new IVisitor<SNode>() {
            public void visit(SNode it) {
              System.out.println(it + "refers to: " + SLinkOperations.getTarget(it, "syncResource", false));
            }
          });

          for (SNode syncRessourceRef : ListSequence.fromList(SNodeOperations.getDescendants(sync, "TasksAndSyncs.structure.SyncResourceRef", false, new String[]{})).where(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return SLinkOperations.getTarget(it, "syncResource", false) == namedRessource;
            }
          })) {
            System.out.println("......should replace.....");
            SNodeOperations.replaceWithAnother(syncRessourceRef, new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode node_4470518958269668401 = new _FunctionTypes._return_P0_E0<SNode>() {
                  public SNode invoke() {
                    SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.LocalVarRef", null);
                    SLinkOperations.setTarget(res, "var", namedRessourceDeclaration, false);
                    return res;
                  }
                }.invoke();
                return node_4470518958269668401;
              }
            }.invoke());
          }

          SNodeOperations.replaceWithAnother(namedRessource, new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              final SNode node_4470518958269668412 = new _FunctionTypes._return_P0_E0<SNode>() {
                public SNode invoke() {
                  SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.LocalVarRef", null);
                  SLinkOperations.setTarget(res, "var", namedRessourceDeclaration, false);
                  return res;
                }
              }.invoke();
              SNode node_4470518958269668411 = new _FunctionTypes._return_P0_E0<SNode>() {
                public SNode invoke() {
                  SNode res = SConceptOperations.createNewNode("TasksAndSyncs.structure.SyncResource", null);
                  SLinkOperations.setTarget(res, "expression", node_4470518958269668412, true);
                  return res;
                }
              }.invoke();
              return node_4470518958269668411;
            }
          }.invoke());

          SNodeOperations.insertPrevSiblingChild(sync, namedRessourceDeclaration);
        }
      }
    }
  }

  public static void mappingScript_CodeBlock_8946379077063476521(final MappingScriptContext _context) {
    // narrowing => lock contention reduction 

    final Optimizer optimizer = new Optimizer();
    optimizer.init(_context.getModel(), _context);

    List<SNode> localVariables = new ArrayList<SNode>();
    List<SNode> arguments = new ArrayList<SNode>();
    List<SNode> variableRefs = new ArrayList<SNode>();
    List<SNode> syncs = new ArrayList<SNode>();
    List<SNode> allNodes = new ArrayList<SNode>();

    for (SNode implementationModule : ListSequence.fromList(SModelOperations.getRoots(_context.getModel(), "com.mbeddr.core.modules.structure.ImplementationModule"))) {
      ListSequence.fromList(localVariables).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(implementationModule, "com.mbeddr.core.statements.structure.LocalVariableDeclaration", false, new String[]{})).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return optimizer.isSharedType(SLinkOperations.getTarget(it, "type", true));
        }
      }));
      ListSequence.fromList(arguments).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(implementationModule, "com.mbeddr.core.modules.structure.Argument", false, new String[]{})).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return optimizer.isSharedType(SLinkOperations.getTarget(it, "type", true));
        }
      }));
      ListSequence.fromList(variableRefs).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(implementationModule, "com.mbeddr.core.statements.structure.IVariableReference", false, new String[]{})).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return optimizer.isSharedType(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(it), "com.mbeddr.core.expressions.structure.Type"));
        }
      }));
      ListSequence.fromList(syncs).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(implementationModule, "TasksAndSyncs.structure.SyncStatement", false, new String[]{})));
    }

    ListSequence.fromList(allNodes).addSequence(ListSequence.fromList(localVariables));
    ListSequence.fromList(allNodes).addSequence(ListSequence.fromList(arguments));
    ListSequence.fromList(allNodes).addSequence(ListSequence.fromList(variableRefs));

    Map<SNode, Set<SNode>> dataflowGraph = optimizer.createSimpleDataflowGraph(localVariables, arguments, variableRefs);
    System.out.println("---------data flow graph: ");
    for (SNode node : SetSequence.fromSet(MapSequence.fromMap(dataflowGraph).keySet())) {
      System.out.println("> for " + node + " : " + SNodeOperations.getConceptDeclaration(node));
      SetSequence.fromSet(MapSequence.fromMap(dataflowGraph).get(node)).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          System.out.println("--> " + it + " : " + SNodeOperations.getConceptDeclaration(it));
        }
      });
    }
    Map<SNode, Set<SNode>> inverseDataflowGraph = optimizer.invertDataflowGraph(dataflowGraph);
    Map<SNode, Set<SNode>> aliases = optimizer.createAliases(allNodes, dataflowGraph, inverseDataflowGraph, false);
    Map<SNode, Set<SNode>> deepCallGraph = optimizer.createDeepCallGraph(optimizer.createCallGraph());

    optimizer.narrowSyncs(aliases, syncs, deepCallGraph);
  }

  public static void mappingScript_CodeBlock_1469333039385111202(final MappingScriptContext _context) {
    // lock ellision for recursively repeated locks 

    Optimizer optimizer = new Optimizer();
    optimizer.init(_context.getModel(), _context);

    if (1 < 0) {
    }
    while (true) {
      OptimizerData data = OptimizerData.getDataFromModel(_context.getModel(), optimizer);
      Map<SNode, Set<SNode>> dataflowGraph = optimizer.createSimpleDataflowGraph(data.localVariables, data.arguments, data.variableRefs);
      Map<SNode, Set<SNode>> inverseDataflowGraph = optimizer.invertDataflowGraph(dataflowGraph);
      Map<SNode, Set<SNode>> aliases = optimizer.createAliases(data.allNodes, dataflowGraph, inverseDataflowGraph, false);
      if (!(optimizer.removeSingleTaskLocks(aliases, dataflowGraph, data.syncResources, data.allVariables, data.variableRefs, data.functionCalls))) {
        break;
      }
    }

    if (1 < 0) {
    }
    while (true) {
      OptimizerData data = OptimizerData.getDataFromModel(_context.getModel(), optimizer);
      Map<SNode, Set<SNode>> dataflowGraph = optimizer.createSimpleDataflowGraph(data.localVariables, data.arguments, data.variableRefs);
      Map<SNode, Set<SNode>> inverseDataflowGraph = optimizer.invertDataflowGraph(dataflowGraph);
      Map<SNode, Set<SNode>> aliases = optimizer.createAliases(data.allNodes, dataflowGraph, inverseDataflowGraph, false);
      if (!(optimizer.removeReadonlyLocks(aliases, data.syncResources, data.allVariables, data.sharedSets, data.sharedGets, data.functionCalls))) {
        break;
      }
    }


    if (1 < 0) {
    }
    {
      // find main() 
      SNode entryFunction = optimizer.getEntryFunction();
      System.out.println("-------create call graph...");

      Map<SNode, Set<SNode>> callGraph = optimizer.createCallGraph();
      System.out.println("-------remove recursive locks 3...");
      OptimizerData data = OptimizerData.getDataFromModel(_context.getModel(), optimizer);
      Map<SNode, Set<SNode>> dataflowGraph = optimizer.createSimpleDataflowGraph(data.localVariables, data.arguments, data.variableRefs);
      Map<SNode, Set<SNode>> nonRecursiveDataflowGraph = optimizer.removeRecursiveEdges(dataflowGraph, entryFunction, callGraph);
      // only consider sync context flows between nodes of the same task 
      Map<SNode, Set<SNode>> taskSeparatedDataflowGraph = optimizer.separateDataflowGraphByTasks(nonRecursiveDataflowGraph);
      Map<SNode, Set<SNode>> inverseDataflowGraph = optimizer.invertDataflowGraph(taskSeparatedDataflowGraph);
      Map<SNode, Set<SNode>> aliases = optimizer.createAliases(data.allNodes, taskSeparatedDataflowGraph, inverseDataflowGraph, false);
      optimizer.removeRecursiveLocks(dataflowGraph, inverseDataflowGraph, aliases, data.syncResources, entryFunction, callGraph);
    }
  }

  public static SNode insertMacro_Query_3074299910025853496(final TemplateQueryContextWithMacro _context) {
    final SNode exprToBind = SLinkOperations.getTarget(_context.getNode(), "expr", true);
    final SNode structExpression = SLinkOperations.getTarget(_context.getNode(), "structExpr", true);
    final Wrappers._T<SNode> structDeclaration = new Wrappers._T<SNode>();
    // the concepts supports bindings to structs and to structs* 
    if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(structExpression), "com.mbeddr.core.udt.structure.StructType")) {
      structDeclaration.value = SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(structExpression), "com.mbeddr.core.udt.structure.StructType"), "struct", false);
    } else if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(structExpression), "com.mbeddr.core.pointers.structure.PointerType") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(structExpression), "com.mbeddr.core.pointers.structure.PointerType"), "baseType", true), "com.mbeddr.core.udt.structure.StructType")) {
      structDeclaration.value = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(structExpression), "com.mbeddr.core.pointers.structure.PointerType"), "baseType", true), "com.mbeddr.core.udt.structure.StructType"), "struct", false);
    } else {
      return exprToBind;
    }
    // rebind local variable references and function argument references  
    // to equally named struct fields 
    if (SNodeOperations.isInstanceOf(exprToBind, "com.mbeddr.core.statements.structure.IVariableReference") && !(SNodeOperations.isInstanceOf(exprToBind, "com.mbeddr.core.modules.structure.GlobalVarRef"))) {
      // if the complete expression expr is a reference it must instantly be mapped to struct.expr 
      return new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          final SNode node_4470518958269669043 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = structExpression;
              return res;
            }
          }.invoke();
          final SNode node_4470518958269669042 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.ParensExpression", null);
              SLinkOperations.setTarget(res, "expression", node_4470518958269669043, true);
              return res;
            }
          }.invoke();
          final SNode node_4470518958269669047 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.GenericMemberRef", null);
              SLinkOperations.setTarget(res, "member", (ListSequence.fromList(SUDeclaration_Behavior.call_members_9101132143318613823(structDeclaration.value)).findFirst(new IWhereFilter<SNode>() {
                public boolean accept(SNode it) {
                  return SPropertyOperations.hasValue(it, "name", SPropertyOperations.getString(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), SNodeOperations.cast(exprToBind, "com.mbeddr.core.statements.structure.IVariableReference"), "virtual_getVariable_2486081302460156153", new Object[]{}), "name"));
                }
              })), false);
              return res;
            }
          }.invoke();
          SNode node_4470518958269669041 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.GenericDotExpression", null);
              SLinkOperations.setTarget(res, "expression", node_4470518958269669042, true);
              SLinkOperations.setTarget(res, "target", node_4470518958269669047, true);
              return res;
            }
          }.invoke();
          return node_4470518958269669041;
        }
      }.invoke();
    }

    // rebind nested references: to statemachines/local variables/arguments 
    List<SNode> bindableVarRefs = ListSequence.fromList(SNodeOperations.getDescendants(exprToBind, "com.mbeddr.core.statements.structure.IVariableReference", false, new String[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !(SNodeOperations.isInstanceOf(it, "com.mbeddr.core.modules.structure.GlobalVarRef"));
      }
    }).toListSequence();

    for (final SNode varRef : ListSequence.fromList(bindableVarRefs)) {
      SNodeOperations.replaceWithAnother(varRef, new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          final SNode node_4470518958269669121 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SNodeOperations.copyNode(structExpression);
              return res;
            }
          }.invoke();
          final SNode node_4470518958269669119 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.ParensExpression", null);
              SLinkOperations.setTarget(res, "expression", node_4470518958269669121, true);
              return res;
            }
          }.invoke();
          final SNode node_4470518958269669126 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.GenericMemberRef", null);
              SLinkOperations.setTarget(res, "member", ListSequence.fromList(SUDeclaration_Behavior.call_members_9101132143318613823(structDeclaration.value)).findFirst(new IWhereFilter<SNode>() {
                public boolean accept(SNode it) {
                  return SPropertyOperations.hasValue(SNodeOperations.cast(it, "com.mbeddr.core.udt.structure.Member"), "name", SPropertyOperations.getString(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), varRef, "virtual_getVariable_2486081302460156153", new Object[]{}), "name"));
                }
              }), false);
              return res;
            }
          }.invoke();
          SNode node_4470518958269669117 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.GenericDotExpression", null);
              SLinkOperations.setTarget(res, "expression", node_4470518958269669119, true);
              SLinkOperations.setTarget(res, "target", node_4470518958269669126, true);
              return res;
            }
          }.invoke();
          return node_4470518958269669117;
        }
      }.invoke());
    }

    return exprToBind;
  }

  public static SNode insertMacro_Query_8001979070750433960(final TemplateQueryContextWithMacro _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode insertMacro_Query_8001979070750347218(final TemplateQueryContextWithMacro _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode insertMacro_Query_5853110027233552272(final TemplateQueryContextWithMacro _context) {
    {
      SNode sharedType = TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "expression", true));
      if (SNodeOperations.isInstanceOf(sharedType, "TasksAndSyncs.structure.SharedType")) {
        return SNodeOperations.copyNode(SLinkOperations.getTarget(sharedType, "baseType", true));
      }
    }
    return SNodeOperations.copyNode(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "expression", true)), "com.mbeddr.core.pointers.structure.PointerType"), "baseType", true), "TasksAndSyncs.structure.SharedType"), "baseType", true));
  }

  public static SNode insertMacro_Query_5853110027233552306(final TemplateQueryContextWithMacro _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode insertMacro_Query_5853110027223622736(final TemplateQueryContextWithMacro _context) {
    return SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "target", true), "TasksAndSyncs.structure.SharedSet"), "value", true);
  }

  public static SNode insertMacro_Query_5853110027223545169(final TemplateQueryContextWithMacro _context) {
    {
      SNode sharedType = TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "expression", true));
      if (SNodeOperations.isInstanceOf(sharedType, "TasksAndSyncs.structure.SharedType")) {
        return SNodeOperations.copyNode(SLinkOperations.getTarget(sharedType, "baseType", true));
      }
    }
    return SNodeOperations.copyNode(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "expression", true)), "com.mbeddr.core.pointers.structure.PointerType"), "baseType", true), "TasksAndSyncs.structure.SharedType"), "baseType", true));
  }

  public static SNode insertMacro_Query_5853110027224537265(final TemplateQueryContextWithMacro _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode insertMacro_Query_4335879941140144001(final TemplateQueryContextWithMacro _context) {
    return SLinkOperations.getTarget(_context.getNode(), "body", true);
  }

  public static SNode insertMacro_Query_5514347295282597991(final TemplateQueryContextWithMacro _context) {
    SNode resultType = SNodeOperations.copyNode(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "TasksAndSyncs.structure.TaskType"), "returnType", true));
    // just to be careful (usually the type should always be a pointer type, here) 
    if (SNodeOperations.isInstanceOf(resultType, "com.mbeddr.core.pointers.structure.PointerType")) {
      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(resultType, "com.mbeddr.core.pointers.structure.PointerType"), "baseType", true), "com.mbeddr.core.expressions.structure.PC99MeetType")) {
        ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(resultType, "com.mbeddr.core.pointers.structure.PointerType"), "baseType", true), "com.mbeddr.core.expressions.structure.PC99MeetType"), "argument", true)).visitAll(new IVisitor<SNode>() {
          public void visit(SNode it) {
            SPropertyOperations.set(SNodeOperations.cast(it, "com.mbeddr.core.expressions.structure.Type"), "const", "" + (false));
            SPropertyOperations.set(SNodeOperations.cast(it, "com.mbeddr.core.expressions.structure.Type"), "volatile", "" + (false));
          }
        });
      } else {
        SPropertyOperations.set(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(resultType, "com.mbeddr.core.pointers.structure.PointerType"), "baseType", true), "com.mbeddr.core.expressions.structure.Type"), "const", "" + (false));
        SPropertyOperations.set(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(resultType, "com.mbeddr.core.pointers.structure.PointerType"), "baseType", true), "com.mbeddr.core.expressions.structure.Type"), "volatile", "" + (false));
      }
    }
    return resultType;
  }

  public static SNode insertMacro_Query_5514347295282624061(final TemplateQueryContextWithMacro _context) {
    return SNodeOperations.copyNode(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "TasksAndSyncs.structure.TaskType"), "returnType", true), "com.mbeddr.core.pointers.structure.PointerType"), "baseType", true));
  }

  public static SNode insertMacro_Query_5514347295283030968(final TemplateQueryContextWithMacro _context) {
    return SNodeOperations.copyNode(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "TasksAndSyncs.structure.TaskType"), "returnType", true));
  }
}
