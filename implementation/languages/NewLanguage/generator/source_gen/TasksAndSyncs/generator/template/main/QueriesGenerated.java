package TasksAndSyncs.generator.template.main;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.generator.template.PropertyMacroContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.generator.template.WeavingMappingRuleContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.generator.template.MappingScriptContext;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.generator.template.TemplateQueryContextWithMacro;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.typesystem.inference.TypeChecker;
import com.mbeddr.core.udt.behavior.SUDeclaration_Behavior;

@Generated
public class QueriesGenerated {
  public static Object propertyMacro_GetPropertyValue_2744793885340541565(final IOperationContext operationContext, final PropertyMacroContext _context) {
    System.out.println("woven!");
    return _context.createUniqueName(_context.getTemplateValue(), null);
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_2744793885335880553(final IOperationContext operationContext, final WeavingMappingRuleContext _context) {
    return SNodeOperations.getAncestor(_context.getNode(), "com.mbeddr.core.modules.structure.ImplementationModule", false, false);
  }

  public static void mappingScript_CodeBlock_8801852084532547317(final IOperationContext operationContext, final MappingScriptContext _context) {
    List<SNode> tasks = SModelOperations.getNodes(_context.getModel(), "TasksAndSyncs.structure.Future");
    for (SNode task : ListSequence.fromList(tasks)) {
      // TODO: remove node 
      final SNode threadVarName = new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          SNode node_8856330834630381089 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StringLiteral", null);
              SPropertyOperations.set(res, "value", (_context.createUniqueName("task_", null)));
              return res;
            }
          }.invoke();
          return node_8856330834630381089;
        }
      }.invoke();
      SNode embeddingStatement = SNodeOperations.getAncestor(task, "com.mbeddr.core.statements.structure.Statement", false, false);
      SNode threadDeclaration = new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          final SNode node_8856330834630381109 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.AbritraryTextItem", null);
              SPropertyOperations.set(res, "text", ("pthread_t"));
              return res;
            }
          }.invoke();
          final SNode node_8856330834630381108 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArbitraryTextType", null);
              SPropertyOperations.set(res, "requiredStdHeader", ("<pthread.h>"));
              ListSequence.fromList(SLinkOperations.getTargets(res, "items", true)).addElement(node_8856330834630381109);
              return res;
            }
          }.invoke();
          SNode node_8856330834630381107 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.LocalVariableDeclaration", null);
              SPropertyOperations.set(res, "name", (SPropertyOperations.getString(threadVarName, "value")));
              SLinkOperations.setTarget(res, "type", node_8856330834630381108, true);
              return res;
            }
          }.invoke();
          return node_8856330834630381107;
        }
      }.invoke();

      SNodeOperations.insertPrevSiblingChild(embeddingStatement, threadDeclaration);

      SPropertyOperations.set(task, "variableName", SPropertyOperations.getString(threadVarName, "value"));
    }
  }

  public static SNode insertMacro_Query_2744793885329335734(final IOperationContext operationContext, final TemplateQueryContextWithMacro _context) {
    //  some preparation 
    SNode embeddingStatement = SNodeOperations.getAncestor(_context.getNode(), "com.mbeddr.core.statements.structure.Statement", false, false);
    final SNode module = SNodeOperations.getAncestor(_context.getNode(), "com.mbeddr.core.modules.structure.ImplementationModule", false, false);
    final SNode voidPointerType = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_8856330834630381159 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.VoidType", null);
            return res;
          }
        }.invoke();
        SNode node_8856330834630381157 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.PointerType", null);
            SLinkOperations.setTarget(res, "baseType", node_8856330834630381159, true);
            return res;
          }
        }.invoke();
        return node_8856330834630381157;
      }
    }.invoke();
    // build a struct declaration for the variable references 
    final SNode argsStructDeclaration = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.StructDeclaration", null);
    ListSequence.fromList(SLinkOperations.getTargets(module, "contents", true)).addElement(argsStructDeclaration);
    SPropertyOperations.set(argsStructDeclaration, "name", _context.createUniqueName("Args", module));
    for (SNode localVariableDeclaration : ListSequence.fromList(SNodeOperations.getDescendants(_context.getNode(), "com.mbeddr.core.statements.structure.LocalVarRef", false, new String[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (SLinkOperations.getTarget(it, "var", false) != null);
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(it, "var", false);
      }
    })) {
      SNode member = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.Member", null);
      SPropertyOperations.set(member, "name", SPropertyOperations.getString(localVariableDeclaration, "name"));
      SLinkOperations.setTarget(member, "type", SNodeOperations.copyNode(SLinkOperations.getTarget(localVariableDeclaration, "type", true)), true);
      ListSequence.fromList(SLinkOperations.getTargets(argsStructDeclaration, "members", true)).addElement(member);
    }
    // build a function declaration for the parallelized expression 
    final SNode functionDeclaration = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.Function", null);
    ListSequence.fromList(SLinkOperations.getTargets(module, "contents", true)).addElement(functionDeclaration);
    SPropertyOperations.set(functionDeclaration, "name", _context.createUniqueName("par", module));
    SLinkOperations.setTarget(functionDeclaration, "type", new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_8856330834630381254 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.VoidType", null);
            return res;
          }
        }.invoke();
        SNode node_8856330834630381252 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.PointerType", null);
            SLinkOperations.setTarget(res, "baseType", node_8856330834630381254, true);
            return res;
          }
        }.invoke();
        return node_8856330834630381252;
      }
    }.invoke(), true);
    ListSequence.fromList(SLinkOperations.getTargets(functionDeclaration, "arguments", true)).addElement(new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_8856330834630381272 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SNodeOperations.copyNode(voidPointerType);
            return res;
          }
        }.invoke();
        SNode node_8856330834630381266 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.Argument", null);
            SPropertyOperations.set(res, "name", (_context.createUniqueName("voidArgs", null)));
            SLinkOperations.setTarget(res, "type", node_8856330834630381272, true);
            return res;
          }
        }.invoke();
        return node_8856330834630381266;
      }
    }.invoke());
    // add statement: T* args = (T*) argsVoid; 
    final SNode structPointerType = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_8856330834630381285 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.StructType", null);
            SLinkOperations.setTarget(res, "struct", argsStructDeclaration, false);
            return res;
          }
        }.invoke();
        SNode node_8856330834630381283 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.PointerType", null);
            SLinkOperations.setTarget(res, "baseType", node_8856330834630381285, true);
            return res;
          }
        }.invoke();
        return node_8856330834630381283;
      }
    }.invoke();
    final SNode argsCastDecl = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_8856330834630381298 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SNodeOperations.copyNode(structPointerType);
            return res;
          }
        }.invoke();
        final SNode node_8856330834630381305 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SNodeOperations.copyNode(structPointerType);
            return res;
          }
        }.invoke();
        final SNode node_8856330834630381310 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.ArgumentRef", null);
            SLinkOperations.setTarget(res, "arg", ListSequence.fromList(SLinkOperations.getTargets(functionDeclaration, "arguments", true)).first(), false);
            return res;
          }
        }.invoke();
        final SNode node_8856330834630381303 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.CastExpression", null);
            SLinkOperations.setTarget(res, "targetType", node_8856330834630381305, true);
            SLinkOperations.setTarget(res, "expr", node_8856330834630381310, true);
            return res;
          }
        }.invoke();
        SNode node_8856330834630381293 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.LocalVariableDeclaration", null);
            SPropertyOperations.set(res, "name", (_context.createUniqueName("args", null)));
            SLinkOperations.setTarget(res, "type", node_8856330834630381298, true);
            SLinkOperations.setTarget(res, "init", node_8856330834630381303, true);
            return res;
          }
        }.invoke();
        return node_8856330834630381293;
      }
    }.invoke();
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(functionDeclaration, "body", true), "statements", true)).addElement(argsCastDecl);
    // add statement: T* result = malloc(sizeof T);  
    final SNode resultDeclaration = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_8856330834630381342 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SNodeOperations.copyNode(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "TasksAndSyncs.structure.TaskType"), "returnType", true));
            return res;
          }
        }.invoke();
        final SNode node_8856330834630381340 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.PointerType", null);
            SLinkOperations.setTarget(res, "baseType", node_8856330834630381342, true);
            return res;
          }
        }.invoke();
        final SNode node_8856330834630381354 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.AbritraryTextItem", null);
            SPropertyOperations.set(res, "text", ("malloc(sizeof "));
            return res;
          }
        }.invoke();
        final SNode node_8856330834630381360 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SNodeOperations.copyNode(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "TasksAndSyncs.structure.TaskType"), "returnType", true));
            return res;
          }
        }.invoke();
        final SNode node_8856330834630381358 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.AnyNodeItem", null);
            SLinkOperations.setTarget(res, "theNode", node_8856330834630381360, true);
            return res;
          }
        }.invoke();
        final SNode node_8856330834630381369 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.AbritraryTextItem", null);
            SPropertyOperations.set(res, "text", (")"));
            return res;
          }
        }.invoke();
        final SNode node_8856330834630381351 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArbitraryTextExpression", null);
            SPropertyOperations.set(res, "requiredStdHeader", ("<stdlib.h>"));
            ListSequence.fromList(SLinkOperations.getTargets(res, "items", true)).addElement(node_8856330834630381354);
            ListSequence.fromList(SLinkOperations.getTargets(res, "items", true)).addElement(node_8856330834630381358);
            ListSequence.fromList(SLinkOperations.getTargets(res, "items", true)).addElement(node_8856330834630381369);
            return res;
          }
        }.invoke();
        SNode node_8856330834630381334 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.LocalVariableDeclaration", null);
            SPropertyOperations.set(res, "name", (_context.createUniqueName("result", null)));
            SLinkOperations.setTarget(res, "type", node_8856330834630381340, true);
            SLinkOperations.setTarget(res, "init", node_8856330834630381351, true);
            return res;
          }
        }.invoke();
        return node_8856330834630381334;
      }
    }.invoke();
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(functionDeclaration, "body", true), "statements", true)).addElement(resultDeclaration);
    // add statement: *result = e;  
    SNode resultAssignment = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_8856330834630381394 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.LocalVarRef", null);
            SLinkOperations.setTarget(res, "var", resultDeclaration, false);
            return res;
          }
        }.invoke();
        final SNode node_8856330834630381392 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.DerefExpr", null);
            SLinkOperations.setTarget(res, "expression", node_8856330834630381394, true);
            return res;
          }
        }.invoke();
        final SNode node_8856330834630381398 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SLinkOperations.getTarget(_context.getNode(), "expression", true);
            return res;
          }
        }.invoke();
        final SNode node_8856330834630381390 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.AssignmentExpr", null);
            SLinkOperations.setTarget(res, "left", node_8856330834630381392, true);
            SLinkOperations.setTarget(res, "right", node_8856330834630381398, true);
            return res;
          }
        }.invoke();
        SNode node_8856330834630381389 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ExpressionStatement", null);
            SLinkOperations.setTarget(res, "expr", node_8856330834630381390, true);
            return res;
          }
        }.invoke();
        return node_8856330834630381389;
      }
    }.invoke();
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(functionDeclaration, "body", true), "statements", true)).addElement(resultAssignment);
    // add statement: return result; 
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(functionDeclaration, "body", true), "statements", true)).addElement(new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_8856330834630381425 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.LocalVarRef", null);
            SLinkOperations.setTarget(res, "var", resultDeclaration, false);
            return res;
          }
        }.invoke();
        SNode node_8856330834630381423 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.ReturnStatement", null);
            SLinkOperations.setTarget(res, "expression", node_8856330834630381425, true);
            return res;
          }
        }.invoke();
        return node_8856330834630381423;
      }
    }.invoke());
    // build a struct type for the return value: struct Task { void* args; (void* -> void*) fun; } 
    final SNode taskStructDeclaration = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_8856330834630381444 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.StructType", null);
            SLinkOperations.setTarget(res, "struct", argsStructDeclaration, false);
            return res;
          }
        }.invoke();
        final SNode node_8856330834630381441 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.Member", null);
            SPropertyOperations.set(res, "name", ("args"));
            SLinkOperations.setTarget(res, "type", node_8856330834630381444, true);
            return res;
          }
        }.invoke();
        final SNode node_8856330834630381454 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SNodeOperations.copyNode(voidPointerType);
            return res;
          }
        }.invoke();
        final SNode node_8856330834630381459 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SNodeOperations.copyNode(voidPointerType);
            return res;
          }
        }.invoke();
        final SNode node_8856330834630381452 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.FunctionRefType", null);
            SLinkOperations.setTarget(res, "returnType", node_8856330834630381454, true);
            ListSequence.fromList(SLinkOperations.getTargets(res, "argTypes", true)).addElement(node_8856330834630381459);
            return res;
          }
        }.invoke();
        final SNode node_8856330834630381449 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.Member", null);
            SPropertyOperations.set(res, "name", ("fun"));
            SLinkOperations.setTarget(res, "type", node_8856330834630381452, true);
            return res;
          }
        }.invoke();
        SNode node_8856330834630381435 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.StructDeclaration", null);
            SPropertyOperations.set(res, "name", (_context.createUniqueName("Task", module)));
            ListSequence.fromList(SLinkOperations.getTargets(res, "members", true)).addElement(node_8856330834630381441);
            ListSequence.fromList(SLinkOperations.getTargets(res, "members", true)).addElement(node_8856330834630381449);
            return res;
          }
        }.invoke();
        return node_8856330834630381435;
      }
    }.invoke();
    ListSequence.fromList(SLinkOperations.getTargets(module, "contents", true)).addElement(taskStructDeclaration);

    // return an instance of above struct initialized with a pointer to the created function 
    // and a heap-managed struct of the variable references 

    // add statement: Task* task = malloc(sizeof Task); 
    final SNode taskVarDeclaration = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_8856330834630381492 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.StructType", null);
            SLinkOperations.setTarget(res, "struct", taskStructDeclaration, false);
            return res;
          }
        }.invoke();
        final SNode node_8856330834630381490 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.PointerType", null);
            SLinkOperations.setTarget(res, "baseType", node_8856330834630381492, true);
            return res;
          }
        }.invoke();
        final SNode node_8856330834630381499 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.AbritraryTextItem", null);
            SPropertyOperations.set(res, "text", ("malloc(sizeof "));
            return res;
          }
        }.invoke();
        final SNode node_8856330834630381505 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.StructType", null);
            SLinkOperations.setTarget(res, "struct", taskStructDeclaration, false);
            return res;
          }
        }.invoke();
        final SNode node_8856330834630381503 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.AnyNodeItem", null);
            SLinkOperations.setTarget(res, "theNode", node_8856330834630381505, true);
            return res;
          }
        }.invoke();
        final SNode node_8856330834630381509 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.AbritraryTextItem", null);
            SPropertyOperations.set(res, "text", (")"));
            return res;
          }
        }.invoke();
        final SNode node_8856330834630381496 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArbitraryTextExpression", null);
            SPropertyOperations.set(res, "requiredStdHeader", ("<stdlib.h>"));
            ListSequence.fromList(SLinkOperations.getTargets(res, "items", true)).addElement(node_8856330834630381499);
            ListSequence.fromList(SLinkOperations.getTargets(res, "items", true)).addElement(node_8856330834630381503);
            ListSequence.fromList(SLinkOperations.getTargets(res, "items", true)).addElement(node_8856330834630381509);
            return res;
          }
        }.invoke();
        SNode node_8856330834630381485 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.LocalVariableDeclaration", null);
            SPropertyOperations.set(res, "name", (_context.createUniqueName("task", null)));
            SLinkOperations.setTarget(res, "type", node_8856330834630381490, true);
            SLinkOperations.setTarget(res, "init", node_8856330834630381496, true);
            return res;
          }
        }.invoke();
        return node_8856330834630381485;
      }
    }.invoke();
    SNodeOperations.insertPrevSiblingChild(embeddingStatement, taskVarDeclaration);
    // add statements for each accessed variable: task.args.varI = varI 
    for (final SNode localVarRef : ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(resultAssignment, "expr", true), "com.mbeddr.core.expressions.structure.AssignmentExpr"), "right", true), "com.mbeddr.core.statements.structure.LocalVarRef", false, new String[]{}))) {
      SNode assignArgument = new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          final SNode node_8856330834630381544 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.GenericMemberRef", null);
              SLinkOperations.setTarget(res, "member", ListSequence.fromList(SUDeclaration_Behavior.call_members_9101132143318613823(argsStructDeclaration)).findFirst(new IWhereFilter<SNode>() {
                public boolean accept(SNode it) {
                  return SPropertyOperations.hasValue(SNodeOperations.cast(it, "com.mbeddr.core.udt.structure.Member"), "name", SPropertyOperations.getString(SLinkOperations.getTarget(localVarRef, "var", false), "name"));
                }
              }), false);
              return res;
            }
          }.invoke();
          final SNode node_8856330834630381570 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.GenericMemberRef", null);
              SLinkOperations.setTarget(res, "member", ListSequence.fromList(SUDeclaration_Behavior.call_members_9101132143318613823(taskStructDeclaration)).first(), false);
              return res;
            }
          }.invoke();
          final SNode node_8856330834630381578 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.LocalVarRef", null);
              SLinkOperations.setTarget(res, "var", taskVarDeclaration, false);
              return res;
            }
          }.invoke();
          final SNode node_8856330834630381568 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.GenericDotExpression", null);
              SLinkOperations.setTarget(res, "target", node_8856330834630381570, true);
              SLinkOperations.setTarget(res, "expression", node_8856330834630381578, true);
              return res;
            }
          }.invoke();
          final SNode node_8856330834630381542 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.GenericDotExpression", null);
              SLinkOperations.setTarget(res, "target", node_8856330834630381544, true);
              SLinkOperations.setTarget(res, "expression", node_8856330834630381568, true);
              return res;
            }
          }.invoke();
          final SNode node_8856330834630381582 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SNodeOperations.copyNode(localVarRef);
              return res;
            }
          }.invoke();
          final SNode node_8856330834630381541 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.AssignmentExpr", null);
              SLinkOperations.setTarget(res, "left", node_8856330834630381542, true);
              SLinkOperations.setTarget(res, "right", node_8856330834630381582, true);
              return res;
            }
          }.invoke();
          SNode node_8856330834630381539 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ExpressionStatement", null);
              SLinkOperations.setTarget(res, "expr", node_8856330834630381541, true);
              return res;
            }
          }.invoke();
          return node_8856330834630381539;
        }
      }.invoke();
      SNodeOperations.insertPrevSiblingChild(embeddingStatement, assignArgument);
    }
    // add statement: task.fun = &[generated function] 
    SNode assignFunctionPointer = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final SNode node_8856330834630381605 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.GenericMemberRef", null);
            SLinkOperations.setTarget(res, "member", ListSequence.fromList(SUDeclaration_Behavior.call_members_9101132143318613823(taskStructDeclaration)).last(), false);
            return res;
          }
        }.invoke();
        final SNode node_8856330834630381613 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.LocalVarRef", null);
            SLinkOperations.setTarget(res, "var", taskVarDeclaration, false);
            return res;
          }
        }.invoke();
        final SNode node_8856330834630381603 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.GenericDotExpression", null);
            SLinkOperations.setTarget(res, "target", node_8856330834630381605, true);
            SLinkOperations.setTarget(res, "expression", node_8856330834630381613, true);
            return res;
          }
        }.invoke();
        final SNode node_8856330834630381617 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.FunctionRefExpr", null);
            SLinkOperations.setTarget(res, "function", functionDeclaration, false);
            return res;
          }
        }.invoke();
        final SNode node_8856330834630381601 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.AssignmentExpr", null);
            SLinkOperations.setTarget(res, "left", node_8856330834630381603, true);
            SLinkOperations.setTarget(res, "right", node_8856330834630381617, true);
            return res;
          }
        }.invoke();
        SNode node_8856330834630381599 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ExpressionStatement", null);
            SLinkOperations.setTarget(res, "expr", node_8856330834630381601, true);
            return res;
          }
        }.invoke();
        return node_8856330834630381599;
      }
    }.invoke();
    SNodeOperations.insertPrevSiblingChild(embeddingStatement, assignFunctionPointer);

    // replace all variables v in the expression by args.v => re-bind them 
    for (final SNode localVarRef : ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(resultAssignment, "expr", true), "com.mbeddr.core.expressions.structure.AssignmentExpr"), "right", true), "com.mbeddr.core.statements.structure.LocalVarRef", false, new String[]{}))) {
      SNodeOperations.replaceWithAnother(localVarRef, new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          final SNode node_8856330834630381649 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.LocalVarRef", null);
              SLinkOperations.setTarget(res, "var", argsCastDecl, false);
              return res;
            }
          }.invoke();
          final SNode node_8856330834630381653 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.GenericMemberRef", null);
              SLinkOperations.setTarget(res, "member", ListSequence.fromList(SUDeclaration_Behavior.call_members_9101132143318613823(argsStructDeclaration)).findFirst(new IWhereFilter<SNode>() {
                public boolean accept(SNode it) {
                  return SPropertyOperations.hasValue(SNodeOperations.cast(it, "com.mbeddr.core.udt.structure.Member"), "name", SPropertyOperations.getString(SLinkOperations.getTarget(localVarRef, "var", false), "name"));
                }
              }), false);
              return res;
            }
          }.invoke();
          SNode node_8856330834630381647 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.GenericDotExpression", null);
              SLinkOperations.setTarget(res, "expression", node_8856330834630381649, true);
              SLinkOperations.setTarget(res, "target", node_8856330834630381653, true);
              return res;
            }
          }.invoke();
          return node_8856330834630381647;
        }
      }.invoke());
    }

    // return the heap-managed variable of type struct Task 
    SNode temp = new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        SNode node_8856330834630381684 = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.LocalVarRef", null);
            SLinkOperations.setTarget(res, "var", taskVarDeclaration, false);
            return res;
          }
        }.invoke();
        return node_8856330834630381684;
      }
    }.invoke();

    return temp;
  }
}
