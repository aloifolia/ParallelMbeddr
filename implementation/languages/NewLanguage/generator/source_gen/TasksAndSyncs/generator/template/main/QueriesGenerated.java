package TasksAndSyncs.generator.template.main;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.generator.template.BaseMappingRuleContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.generator.template.ReferenceMacroContext;
import TasksAndSyncs.generator.util.NameGenerator;
import jetbrains.mps.generator.template.IfMacroContext;
import TasksAndSyncs.generator.util.Analyzer;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.generator.template.WeavingMappingRuleContext;
import jetbrains.mps.generator.template.MappingScriptContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import TasksAndSyncs.generator.util.TaskDefinitionBuilder;
import TasksAndSyncs.generator.util.Pair;
import TasksAndSyncs.generator.util.SyncDefinitionBuilder;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import TasksAndSyncs.generator.util.ImplementationModuleBuilder;
import jetbrains.mps.generator.template.TemplateQueryContextWithMacro;
import com.mbeddr.core.udt.behavior.SUDeclaration_Behavior;

@Generated
public class QueriesGenerated {
  public static boolean baseMappingRule_Condition_961131662868723683(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "TasksAndSyncs.structure.TaskType"), "returnType", true), "com.mbeddr.core.expressions.structure.VoidType"));
  }

  public static boolean baseMappingRule_Condition_482600553440859534(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "TasksAndSyncs.structure.TaskType"), "returnType", true), "com.mbeddr.core.expressions.structure.VoidType");
  }

  public static boolean baseMappingRule_Condition_5853110027249952918(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "expression", true), "com.mbeddr.core.statements.structure.LocalVarRef") || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "expression", true), "com.mbeddr.core.modules.structure.ArgumentRef") || ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(_context.getNode(), "expression", true), "com.mbeddr.core.statements.structure.LocalVarRef", false, new String[]{})).count() > 0 || ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(_context.getNode(), "expression", true), "com.mbeddr.core.modules.structure.ArgumentRef", false, new String[]{})).count() > 0;
  }

  public static boolean baseMappingRule_Condition_5853110027250126745(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "expression", true), "com.mbeddr.core.statements.structure.LocalVarRef")) && !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "expression", true), "com.mbeddr.core.modules.structure.ArgumentRef")) && ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(_context.getNode(), "expression", true), "com.mbeddr.core.statements.structure.LocalVarRef", false, new String[]{})).count() == 0 && ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(_context.getNode(), "expression", true), "com.mbeddr.core.modules.structure.ArgumentRef", false, new String[]{})).count() == 0;
  }

  public static boolean baseMappingRule_Condition_5853110027239779865(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    // 2nd condition: Defer the reduction until after the Task has been reduced. 
    // Thus, the weaving rules (args struct and function) for Task will be executed 
    // only once (since Task copies are not generated). 
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "target", true), "TasksAndSyncs.structure.Future") && !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "expression", true), "TasksAndSyncs.structure.Task"));
  }

  public static boolean baseMappingRule_Condition_5853110027240890680(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "target", true), "TasksAndSyncs.structure.FutureJoin");
  }

  public static boolean baseMappingRule_Condition_5853110027241105549(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "target", true), "TasksAndSyncs.structure.FutureResult");
  }

  public static boolean baseMappingRule_Condition_3348893923574157399(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "target", true), "TasksAndSyncs.structure.SharedGet");
  }

  public static boolean baseMappingRule_Condition_3348893923573330646(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "target", true), "TasksAndSyncs.structure.SharedSet");
  }

  public static boolean baseMappingRule_Condition_5853110027219890125(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "ressources", true)).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "TasksAndSyncs.structure.SyncRessourceNamed");
      }
    }) && ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(_context.getNode(), "statements", true), "TasksAndSyncs.structure.SyncRessourceRef", false, new String[]{})).isEmpty();
  }

  public static boolean baseMappingRule_Condition_5853110027234386164(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "ressources", true)).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "TasksAndSyncs.structure.SyncRessourceNamed");
      }
    }) && ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(_context.getNode(), "statements", true), "TasksAndSyncs.structure.SyncRessourceRef", false, new String[]{})).isEmpty();
  }

  public static Object propertyMacro_GetPropertyValue_6480032978533298609(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return _context.createUniqueName(_context.getTemplateValue(), null);
  }

  public static Object propertyMacro_GetPropertyValue_6480032978533298713(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return _context.createUniqueName(_context.getTemplateValue(), null);
  }

  public static Object propertyMacro_GetPropertyValue_5853110027249858864(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return _context.createUniqueName(_context.getTemplateValue(), null);
  }

  public static Object propertyMacro_GetPropertyValue_5853110027219942568(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "TasksAndSyncs.structure.SyncRessourceNamed"), "name");
  }

  public static Object propertyMacro_GetPropertyValue_5853110027234446691(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "TasksAndSyncs.structure.SyncRessourceNamed"), "name");
  }

  public static Object propertyMacro_GetPropertyValue_5853110027234482323(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "TasksAndSyncs.structure.SyncRessourceNamed"), "name");
  }

  public static Object propertyMacro_GetPropertyValue_5853110027223158225(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "syncRessource", false), "name");
  }

  public static Object propertyMacro_GetPropertyValue_4644263955273508749(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return _context.createUniqueName(_context.getTemplateValue(), null);
  }

  public static Object propertyMacro_GetPropertyValue_4644263955273722005(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object propertyMacro_GetPropertyValue_4644263955274589810(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return _context.createUniqueName(_context.getTemplateValue(), null);
  }

  public static Object propertyMacro_GetPropertyValue_482600553440749847(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return _context.createUniqueName(_context.getTemplateValue(), null);
  }

  public static Object referenceMacro_GetReferent_4644263955272622644(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "returnType", true), "com.mbeddr.core.expressions.structure.VoidType")) {
      return NameGenerator.getVoidFutureStructName();
    } else {
      return NameGenerator.getFutureStructName();
    }
  }

  public static Object referenceMacro_GetReferent_6480032978533298601(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "argsStruct");
  }

  public static Object referenceMacro_GetReferent_6480032978533298622(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "argsStruct");
  }

  public static Object referenceMacro_GetReferent_6480032978533298634(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "argsStruct");
  }

  public static Object referenceMacro_GetReferent_6480032978533298646(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "var", false), "name");
  }

  public static Object referenceMacro_GetReferent_6480032978533298657(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "var", false);
  }

  public static Object referenceMacro_GetReferent_5853110027249470844(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "arg", false);
  }

  public static Object referenceMacro_GetReferent_5853110027249381637(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "arg", false), "name");
  }

  public static Object referenceMacro_GetReferent_6480032978533298683(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "funDecl");
  }

  public static Object referenceMacro_GetReferent_6480032978533298692(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return NameGenerator.getTaskStructName();
  }

  public static Object referenceMacro_GetReferent_6480032978533298699(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return NameGenerator.getTaskStructName();
  }

  public static Object referenceMacro_GetReferent_6480032978533298708(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return NameGenerator.getTaskStructName();
  }

  public static Object referenceMacro_GetReferent_5853110027249858834(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "funDecl");
  }

  public static Object referenceMacro_GetReferent_5853110027249858843(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return NameGenerator.getTaskStructName();
  }

  public static Object referenceMacro_GetReferent_5853110027249858850(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return NameGenerator.getTaskStructName();
  }

  public static Object referenceMacro_GetReferent_5853110027249858859(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return NameGenerator.getTaskStructName();
  }

  public static Object referenceMacro_GetReferent_5853110027239686735(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "TasksAndSyncs.structure.FutureType"), "returnType", true), "com.mbeddr.core.expressions.structure.VoidType")) {
      return NameGenerator.getVoidFutureFunctionName();
    } else {
      return NameGenerator.getFutureFunctionName();
    }
  }

  public static Object referenceMacro_GetReferent_5853110027240890658(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "expression", true)), "TasksAndSyncs.structure.FutureType"), "returnType", true), "com.mbeddr.core.expressions.structure.VoidType")) {
      return NameGenerator.getVoidFutureSaveAndJoinFunctionName();
    } else {
      return NameGenerator.getFutureSaveAndJoinFunctionName();
    }
  }

  public static Object referenceMacro_GetReferent_5853110027246348662(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "expression", true)), "TasksAndSyncs.structure.FutureType"), "returnType", true), "com.mbeddr.core.expressions.structure.VoidType")) {
      return NameGenerator.getVoidFutureJoinFunctionName();
    } else {
      return NameGenerator.getFutureJoinFunctionName();
    }
  }

  public static Object referenceMacro_GetReferent_5853110027241054311(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return NameGenerator.getFutureSaveAndResultFunctionName();
  }

  public static Object referenceMacro_GetReferent_5853110027245226874(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return NameGenerator.getFutureResultFunctionName();
  }

  public static Object referenceMacro_GetReferent_4644263955274749574(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "argsStruct");
  }

  public static Object referenceMacro_GetReferent_4644263955274683221(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "argsStruct");
  }

  public static Object referenceMacro_GetReferent_7288607883539663801(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return NameGenerator.getFutureStructName();
  }

  public static Object referenceMacro_GetReferent_7288607883539589338(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "fun";
  }

  public static Object referenceMacro_GetReferent_7288607883539589346(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "args";
  }

  public static Object referenceMacro_GetReferent_7288607883539589354(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return NameGenerator.getFutureStructName();
  }

  public static Object referenceMacro_GetReferent_7288607883539589365(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return NameGenerator.getFutureStructName();
  }

  public static Object referenceMacro_GetReferent_7288607883539679450(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return NameGenerator.getTaskStructName();
  }

  public static Object referenceMacro_GetReferent_482600553440749753(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "argsStruct");
  }

  public static Object referenceMacro_GetReferent_482600553440749765(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "argsStruct");
  }

  public static boolean ifMacro_Condition_5853110027246336879(final IOperationContext operationContext, final IfMacroContext _context) {
    return !(Analyzer.isLValue(SLinkOperations.getTarget(_context.getNode(), "expression", true)));
  }

  public static boolean ifMacro_Condition_5853110027245199982(final IOperationContext operationContext, final IfMacroContext _context) {
    return !(Analyzer.isLValue(SLinkOperations.getTarget(_context.getNode(), "expression", true)));
  }

  public static boolean ifMacro_Condition_5853110027233552314(final IOperationContext operationContext, final IfMacroContext _context) {
    return !(SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "expression", true)), "com.mbeddr.core.pointers.structure.PointerType"));
  }

  public static boolean ifMacro_Condition_5853110027225425714(final IOperationContext operationContext, final IfMacroContext _context) {
    return !(SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "expression", true)), "com.mbeddr.core.pointers.structure.PointerType"));
  }

  public static boolean ifMacro_Condition_5853110027247092330(final IOperationContext operationContext, final IfMacroContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "expression", true), "com.mbeddr.core.statements.structure.LocalVarRef") || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "expression", true), "com.mbeddr.core.modules.structure.ArgumentRef") || ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(_context.getNode(), "expression", true), "com.mbeddr.core.statements.structure.LocalVarRef", false, new String[]{})).count() > 0 || ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(_context.getNode(), "expression", true), "com.mbeddr.core.modules.structure.ArgumentRef", false, new String[]{})).count() > 0;
  }

  public static boolean ifMacro_Condition_5853110027254624687(final IOperationContext operationContext, final IfMacroContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "expression", true), "com.mbeddr.core.statements.structure.LocalVarRef") || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "expression", true), "com.mbeddr.core.modules.structure.ArgumentRef") || ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(_context.getNode(), "expression", true), "com.mbeddr.core.statements.structure.LocalVarRef", false, new String[]{})).count() > 0 || ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(_context.getNode(), "expression", true), "com.mbeddr.core.modules.structure.ArgumentRef", false, new String[]{})).count() > 0;
  }

  public static boolean ifMacro_Condition_5853110027248214520(final IOperationContext operationContext, final IfMacroContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "expression", true), "com.mbeddr.core.statements.structure.LocalVarRef") || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "expression", true), "com.mbeddr.core.modules.structure.ArgumentRef") || ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(_context.getNode(), "expression", true), "com.mbeddr.core.statements.structure.LocalVarRef", false, new String[]{})).count() > 0 || ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(_context.getNode(), "expression", true), "com.mbeddr.core.modules.structure.ArgumentRef", false, new String[]{})).count() > 0;
  }

  public static boolean ifMacro_Condition_5853110027256497950(final IOperationContext operationContext, final IfMacroContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "expression", true), "com.mbeddr.core.statements.structure.LocalVarRef") || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "expression", true), "com.mbeddr.core.modules.structure.ArgumentRef") || ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(_context.getNode(), "expression", true), "com.mbeddr.core.statements.structure.LocalVarRef", false, new String[]{})).count() > 0 || ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(_context.getNode(), "expression", true), "com.mbeddr.core.modules.structure.ArgumentRef", false, new String[]{})).count() > 0;
  }

  public static SNode sourceNodeQuery_5853110027240890651(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode sourceNodeQuery_5853110027246348655(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode sourceNodeQuery_5853110027241054287(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SNodeOperations.copyNode(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "expression", true)), "TasksAndSyncs.structure.FutureType"), "returnType", true));
  }

  public static SNode sourceNodeQuery_5853110027241054304(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode sourceNodeQuery_5853110027245222906(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SNodeOperations.copyNode(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "expression", true)), "TasksAndSyncs.structure.FutureType"), "returnType", true));
  }

  public static SNode sourceNodeQuery_5853110027245226867(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode sourceNodeQuery_4644263955274064956(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    if (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "type", true), "com.mbeddr.core.pointers.structure.ArrayType"))) {
      return SLinkOperations.getTarget(_context.getNode(), "type", true);
    }

    SNode innerPointerType = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.PointerType", null);
    final Wrappers._T<SNode> outerPointerType = new Wrappers._T<SNode>(innerPointerType);
    SNode typeOfArg = SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "type", true), "com.mbeddr.core.pointers.structure.ArrayType");
    while (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(typeOfArg, "baseType", true), "com.mbeddr.core.pointers.structure.ArrayType")) {
      typeOfArg = SNodeOperations.cast(SLinkOperations.getTarget(typeOfArg, "baseType", true), "com.mbeddr.core.pointers.structure.ArrayType");
      outerPointerType.value = new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          final SNode node_483189195586600129 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = outerPointerType.value;
              return res;
            }
          }.invoke();
          SNode node_483189195586600128 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.PointerType", null);
              SLinkOperations.setTarget(res, "baseType", node_483189195586600129, true);
              return res;
            }
          }.invoke();
          return node_483189195586600128;
        }
      }.invoke();
    }
    SLinkOperations.setTarget(innerPointerType, "baseType", SLinkOperations.getTarget(typeOfArg, "baseType", true), true);
    return outerPointerType.value;
  }

  public static Iterable<SNode> sourceNodesQuery_6480032978533298664(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "expression", true), "com.mbeddr.core.statements.structure.LocalVarRef")) {
      List<SNode> refs = new ArrayList<SNode>();
      ListSequence.fromList(refs).addElement(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "expression", true), "com.mbeddr.core.statements.structure.LocalVarRef"));
      return refs;
    }
    return SNodeOperations.getDescendants(SLinkOperations.getTarget(_context.getNode(), "expression", true), "com.mbeddr.core.statements.structure.LocalVarRef", false, new String[]{});
  }

  public static Iterable<SNode> sourceNodesQuery_5853110027249316648(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "expression", true), "com.mbeddr.core.modules.structure.ArgumentRef")) {
      List<SNode> refs = new ArrayList<SNode>();
      ListSequence.fromList(refs).addElement(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "expression", true), "com.mbeddr.core.modules.structure.ArgumentRef"));
      return refs;
    }
    return SNodeOperations.getDescendants(SLinkOperations.getTarget(_context.getNode(), "expression", true), "com.mbeddr.core.modules.structure.ArgumentRef", false, new String[]{});
  }

  public static Iterable<SNode> sourceNodesQuery_5853110027219942576(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "ressources", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "TasksAndSyncs.structure.SyncRessourceNamed");
      }
    });
  }

  public static Iterable<SNode> sourceNodesQuery_5853110027234446699(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "ressources", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "TasksAndSyncs.structure.SyncRessourceNamed");
      }
    });
  }

  public static Iterable<SNode> sourceNodesQuery_5853110027234482331(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "ressources", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "TasksAndSyncs.structure.SyncRessourceNamed");
      }
    });
  }

  public static Iterable<SNode> sourceNodesQuery_4644263955273538232(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return ListSequence.fromList(SNodeOperations.getDescendants(_context.getNode(), "com.mbeddr.core.statements.structure.LocalVarRef", false, new String[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (SLinkOperations.getTarget(it, "var", false) != null);
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(it, "var", false);
      }
    });
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_4644263955273501386(final IOperationContext operationContext, final WeavingMappingRuleContext _context) {
    return _context.getCopiedOutputNodeForInputNode(SNodeOperations.getAncestor(_context.getNode(), "com.mbeddr.core.modules.structure.ImplementationModule", false, false));
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_4644263955274607916(final IOperationContext operationContext, final WeavingMappingRuleContext _context) {
    return _context.getCopiedOutputNodeForInputNode(SNodeOperations.getAncestor(_context.getNode(), "com.mbeddr.core.modules.structure.ImplementationModule", false, false));
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_482600553440859523(final IOperationContext operationContext, final WeavingMappingRuleContext _context) {
    return _context.getCopiedOutputNodeForInputNode(SNodeOperations.getAncestor(_context.getNode(), "com.mbeddr.core.modules.structure.ImplementationModule", false, false));
  }

  public static void mappingScript_CodeBlock_6340335959758487422(final IOperationContext operationContext, final MappingScriptContext _context) {
    SNode genericTaskModule = ListSequence.fromList(SModelOperations.getRoots(_context.getModel(), "com.mbeddr.core.modules.structure.ImplementationModule")).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.getString(it, "name").equals(NameGenerator.getGenericTaskModuleName());
      }
    });

    SNode taskStruct = TaskDefinitionBuilder.buildTaskStruct(false, NameGenerator.getTaskStructName());
    ListSequence.fromList(SLinkOperations.getTargets(genericTaskModule, "contents", true)).addElement(taskStruct);

    SNode futureStruct = TaskDefinitionBuilder.buildFutureStruct(false, NameGenerator.getFutureStructName());
    ListSequence.fromList(SLinkOperations.getTargets(genericTaskModule, "contents", true)).addElement(futureStruct);

    SNode voidFutureStruct = TaskDefinitionBuilder.buildFutureStruct(true, NameGenerator.getVoidFutureStructName());
    ListSequence.fromList(SLinkOperations.getTargets(genericTaskModule, "contents", true)).addElement(voidFutureStruct);

    SNode futureFunction = TaskDefinitionBuilder.buildFutureFunction(taskStruct, futureStruct, NameGenerator.getFutureFunctionName());
    ListSequence.fromList(SLinkOperations.getTargets(genericTaskModule, "contents", true)).addElement(futureFunction);

    SNode voidFutureFunction = TaskDefinitionBuilder.buildFutureFunction(taskStruct, voidFutureStruct, NameGenerator.getVoidFutureFunctionName());
    ListSequence.fromList(SLinkOperations.getTargets(genericTaskModule, "contents", true)).addElement(voidFutureFunction);

    SNode futureJoinFunction = TaskDefinitionBuilder.buildFutureJoinFunction(futureStruct, NameGenerator.getFutureJoinFunctionName());
    ListSequence.fromList(SLinkOperations.getTargets(genericTaskModule, "contents", true)).addElement(futureJoinFunction);

    SNode voidFutureJoinFunction = TaskDefinitionBuilder.buildFutureJoinFunction(voidFutureStruct, NameGenerator.getVoidFutureJoinFunctionName());
    ListSequence.fromList(SLinkOperations.getTargets(genericTaskModule, "contents", true)).addElement(voidFutureJoinFunction);

    // If the future to join is not saved in a variable like "varName = |..|.run; varName.join" 
    // the resulting join function cannot take the address of the future since it is not an lvalue. 
    // Therefore a helper method is generated:  
    //   
    //   void saveAndJoinFuture(Future future) {  // future is now an lvalue 
    //     join(&future);                         // the address can be taken 
    //   } 
    SNode voidFutureSaveAndJoinFunction = TaskDefinitionBuilder.buildFutureSaveAndJoinFunction(voidFutureStruct, voidFutureJoinFunction, NameGenerator.getVoidFutureSaveAndJoinFunctionName());
    ListSequence.fromList(SLinkOperations.getTargets(genericTaskModule, "contents", true)).addElement(voidFutureSaveAndJoinFunction);

    // for explanations concerning the "save" see voidFutureSaveAndJoinFunction 
    SNode futureSaveAndJoinFunction = TaskDefinitionBuilder.buildFutureSaveAndJoinFunction(futureStruct, futureJoinFunction, NameGenerator.getFutureSaveAndJoinFunctionName());
    ListSequence.fromList(SLinkOperations.getTargets(genericTaskModule, "contents", true)).addElement(futureSaveAndJoinFunction);

    SNode futureResultFunction = TaskDefinitionBuilder.buildFutureResultFunction(futureStruct, NameGenerator.getFutureResultFunctionName());
    ListSequence.fromList(SLinkOperations.getTargets(genericTaskModule, "contents", true)).addElement(futureResultFunction);

    // for explanations concerning the "save" see voidFutureSaveAndJoinFunction 
    SNode futureSaveAndResultFunction = TaskDefinitionBuilder.buildFutureSaveAndResultFunction(futureStruct, futureResultFunction, NameGenerator.getFutureSaveAndResultFunctionName());
    ListSequence.fromList(SLinkOperations.getTargets(genericTaskModule, "contents", true)).addElement(futureSaveAndResultFunction);
  }

  public static void mappingScript_CodeBlock_2852056939580752791(final IOperationContext operationContext, final MappingScriptContext _context) {
    SNode genericSharedModule = ListSequence.fromList(SModelOperations.getRoots(_context.getModel(), "com.mbeddr.core.modules.structure.ImplementationModule")).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.getString(it, "name").equals(NameGenerator.getGenericSharedModuleName());
      }
    });

    List<Pair<SNode, SNode>> typesAndStructs = ListSequence.fromList(new ArrayList<Pair<SNode, SNode>>());

    // create structs for shared types 
    for (SNode implementationModule : ListSequence.fromList(SModelOperations.getRoots(_context.getModel(), "com.mbeddr.core.modules.structure.ImplementationModule"))) {
      for (SNode sharedType : ListSequence.fromList(SNodeOperations.getDescendants(implementationModule, "TasksAndSyncs.structure.SharedType", false, new String[]{}))) {
        SNode structForShared = SyncDefinitionBuilder.getStructForType(_context, typesAndStructs, sharedType);
        if (structForShared == null) {
          structForShared = SyncDefinitionBuilder.addStructForType(_context, typesAndStructs, sharedType);
          SNode definitionModule;
          // for user defined types (structs, typedefs) the definitions of shared types thereof should  
          // take place in the same implementation modules so that they will be imported correctly 
          SNode baseType = SLinkOperations.getTarget(sharedType, "baseType", true);
          if (SNodeOperations.isInstanceOf(baseType, "com.mbeddr.core.udt.structure.StructType")) {
            definitionModule = SNodeOperations.getAncestor(SLinkOperations.getTarget(SNodeOperations.cast(baseType, "com.mbeddr.core.udt.structure.StructType"), "struct", false), "com.mbeddr.core.modules.structure.ImplementationModule", false, false);
          } else if (SNodeOperations.isInstanceOf(baseType, "com.mbeddr.core.udt.structure.TypeDefType")) {
            definitionModule = SNodeOperations.getAncestor(SLinkOperations.getTarget(SNodeOperations.cast(baseType, "com.mbeddr.core.udt.structure.TypeDefType"), "typeDef", false), "com.mbeddr.core.modules.structure.ImplementationModule", false, false);
          } else {
            // for all other types the generic implementation module can be usedd 
            definitionModule = genericSharedModule;
          }
          ListSequence.fromList(SLinkOperations.getTargets(definitionModule, "contents", true)).addElement(structForShared);
        }
      }
    }

    // find entry function (typically this is 'main') and the corresponding module 
    // TODO: might not be the right one 
    SNode entryFunction = null;
    final Wrappers._T<SNode> entryModule = new Wrappers._T<SNode>(null);
    for (SNode implementationModule : ListSequence.fromList(SModelOperations.getRoots(_context.getModel(), "com.mbeddr.core.modules.structure.ImplementationModule"))) {
      SNode foundFunction = ListSequence.fromList(SNodeOperations.getDescendants(implementationModule, "com.mbeddr.core.modules.structure.Function", false, new String[]{})).findFirst(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SPropertyOperations.getString(it, "name").equals("main");
        }
      });
      if (foundFunction != null) {
        entryFunction = foundFunction;
        entryModule.value = implementationModule;
        break;
      }
    }

    // create generic function:  
    // initMutex(pthread_mutexattr_t* mutexAttribute, pthread_mutex_t* mutex) { 
    //   pthread_mutexattr_settype(mutexAttribute, PTHREAD_MUTEX_RECURSIVE); 
    //   pthread_mutex_init(mutex, mutexAttribute); 
    // } 
    SNode initMutexFunction = SyncDefinitionBuilder.buildInitMutexFunction(_context);
    ListSequence.fromList(SLinkOperations.getTargets(genericSharedModule, "contents", true)).addElement(initMutexFunction);

    // create generic function:  
    // destroyMutex(pthread_mutex_t* mutex) { 
    //   pthread_mutex_destroy(mutex); 
    // } 
    SNode destroyMutexFunction = SyncDefinitionBuilder.buildDestroyMutexFunction(_context);
    ListSequence.fromList(SLinkOperations.getTargets(genericSharedModule, "contents", true)).addElement(destroyMutexFunction);

    // create initialization and destruction statements for global shared ressources 
    List<SNode> callsOfInitGlobalMutexesForAllModules = new ArrayList<SNode>();
    List<SNode> callsOfDestroyGlobalMutexesForAllModules = new ArrayList<SNode>();
    List<SNode> modulesWithGlobalMutexes = new ArrayList<SNode>();

    // for each implementation module create separate mutex initialization/destruction functions 
    for (SNode implementationModule : ListSequence.fromList(SModelOperations.getRoots(_context.getModel(), "com.mbeddr.core.modules.structure.ImplementationModule"))) {
      List<SNode> callsOfInitGlobalMutexesFor1Module = new ArrayList<SNode>();
      for (final SNode globalVariableDeclaration : ListSequence.fromList(SNodeOperations.getDescendants(implementationModule, "com.mbeddr.core.modules.structure.GlobalVariableDeclaration", false, new String[]{}))) {
        SNode varType = SLinkOperations.getTarget(globalVariableDeclaration, "type", true);
        SNode varRef = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode node_483189195586600755 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.GlobalVarRef", null);
                SLinkOperations.setTarget(res, "var", globalVariableDeclaration, false);
                return res;
              }
            }.invoke();
            return node_483189195586600755;
          }
        }.invoke();

        ListSequence.fromList(callsOfInitGlobalMutexesFor1Module).addSequence(ListSequence.fromList(SyncDefinitionBuilder.buildInitMutexCallsFor(_context, initMutexFunction, varType, varRef, globalVariableDeclaration)));
      }
      // now we know whether any of the global variables refers to some shared ressource 
      if (ListSequence.fromList(callsOfInitGlobalMutexesFor1Module).isEmpty()) {
        continue;
      }

      ListSequence.fromList(modulesWithGlobalMutexes).addElement(implementationModule);

      // create init function for global mutexes of the current module 
      String initGlobalMutexesFor1ModuleName = _context.createUniqueName("initGlobalMutexesFor1Module", null);
      final SNode initGlobalMutexesFor1Module = SyncDefinitionBuilder.buildVoidExportedFunction(callsOfInitGlobalMutexesFor1Module, null, initGlobalMutexesFor1ModuleName);
      ListSequence.fromList(SLinkOperations.getTargets(implementationModule, "contents", true)).addElement(initGlobalMutexesFor1Module);

      // TODO: remove 
      // create destruction function for global mutexes of the current module 
      String destroyGlobalMutexesFor1ModuleName = _context.createUniqueName("destroyGlobalMutexesFor1Module", null);
      final SNode destroyGlobalMutexesFor1Module = SNodeOperations.copyNode(initGlobalMutexesFor1Module);
      SPropertyOperations.set(destroyGlobalMutexesFor1Module, "name", destroyGlobalMutexesFor1ModuleName);
      SyncDefinitionBuilder.convertInitToDestroyMutexCall(destroyGlobalMutexesFor1Module, initMutexFunction, destroyMutexFunction);
      if (1 < 0) {
        ListSequence.fromList(SLinkOperations.getTargets(implementationModule, "contents", true)).addElement(destroyGlobalMutexesFor1Module);
      }

      // add calls to both functions to the corresponding containers 
      ListSequence.fromList(callsOfInitGlobalMutexesForAllModules).addElement(new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          final SNode node_483189195586600855 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.FunctionCall", null);
              SLinkOperations.setTarget(res, "function", initGlobalMutexesFor1Module, false);
              return res;
            }
          }.invoke();
          SNode node_483189195586600854 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ExpressionStatement", null);
              SLinkOperations.setTarget(res, "expr", node_483189195586600855, true);
              return res;
            }
          }.invoke();
          return node_483189195586600854;
        }
      }.invoke());
      // TODO: remove 
      ListSequence.fromList(callsOfDestroyGlobalMutexesForAllModules).addElement(new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          final SNode node_483189195586600868 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.FunctionCall", null);
              SLinkOperations.setTarget(res, "function", destroyGlobalMutexesFor1Module, false);
              return res;
            }
          }.invoke();
          SNode node_483189195586600867 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ExpressionStatement", null);
              SLinkOperations.setTarget(res, "expr", node_483189195586600868, true);
              return res;
            }
          }.invoke();
          return node_483189195586600867;
        }
      }.invoke());
    }

    // ensure that the module corresponding to the entry function imports all other modules that have 
    // global data with shared ressources (hence, mutexes therein need to be initialized); 
    // this way the entry module has access to all exported mutex management functions  
    for (SNode implementationModule : ListSequence.fromList(modulesWithGlobalMutexes).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return it != entryModule.value;
      }
    })) {
      if (!(ListSequence.fromList(SLinkOperations.getTargets(entryModule.value, "imports", true)).any(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.isInstanceOf(it, "com.mbeddr.core.base.structure.DefaultGenericChunkDependency") && SLinkOperations.getTarget(SNodeOperations.cast(it, "com.mbeddr.core.base.structure.DefaultGenericChunkDependency"), "chunk", false) == entryModule.value;
        }
      }))) {
        SNode moduleImport = SConceptOperations.createNewNode("com.mbeddr.core.base.structure.DefaultGenericChunkDependency", null);
        SLinkOperations.setTarget(moduleImport, "chunk", implementationModule, false);
        ListSequence.fromList(SLinkOperations.getTargets(entryModule.value, "imports", true)).addElement(moduleImport);
      }
    }

    if (ListSequence.fromList(callsOfInitGlobalMutexesForAllModules).count() > 0) {
      // create one main init function that calls all module-specific init functions 
      String initAllFunctionName = _context.createUniqueName("initAllGlobalMutexes", null);
      final SNode initAllFunction = SyncDefinitionBuilder.buildVoidExportedFunction(callsOfInitGlobalMutexesForAllModules, null, initAllFunctionName);
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getAncestor(entryFunction, "com.mbeddr.core.modules.structure.ImplementationModule", false, false), "contents", true)).addElement(initAllFunction);

      // TODO: remove 
      // create one main destruction function that calls all module-specific destruction functions 
      String destroyAllFunctionName = _context.createUniqueName("destroyAllGlobalMutexes", null);
      final SNode destroyAllFunction = SyncDefinitionBuilder.buildVoidExportedFunction(callsOfDestroyGlobalMutexesForAllModules, null, destroyAllFunctionName);
      if (1 < 0) {
        ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getAncestor(entryFunction, "com.mbeddr.core.modules.structure.ImplementationModule", false, false), "contents", true)).addElement(destroyAllFunction);
      }

      // add calls to both functions: 'init' at the beginning of main, 'destroy' before each return (and at the end) 
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(entryFunction, "body", true), "statements", true)).insertElement(0, new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          final SNode node_483189195586601015 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.FunctionCall", null);
              SLinkOperations.setTarget(res, "function", initAllFunction, false);
              return res;
            }
          }.invoke();
          SNode node_483189195586601014 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ExpressionStatement", null);
              SLinkOperations.setTarget(res, "expr", node_483189195586601015, true);
              return res;
            }
          }.invoke();
          return node_483189195586601014;
        }
      }.invoke());

      // TODO: remove 
      if (1 < 0) {
        final SNode callDestroyAllFunction = new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            final SNode node_483189195586601030 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.FunctionCall", null);
                SLinkOperations.setTarget(res, "function", destroyAllFunction, false);
                return res;
              }
            }.invoke();
            SNode node_483189195586601029 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ExpressionStatement", null);
                SLinkOperations.setTarget(res, "expr", node_483189195586601030, true);
                return res;
              }
            }.invoke();
            return node_483189195586601029;
          }
        }.invoke();
        ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(entryFunction, "body", true), "com.mbeddr.core.modules.structure.ReturnStatement", false, new String[]{})).visitAll(new IVisitor<SNode>() {
          public void visit(SNode it) {
            SNodeOperations.insertPrevSiblingChild(it, SNodeOperations.copyNode(callDestroyAllFunction));
          }
        });

        if (BehaviorReflection.invokeVirtual(Boolean.TYPE, SLinkOperations.getTarget(entryFunction, "type", true), "virtual_isVoid_7892328519581699357", new Object[]{}) && !(SNodeOperations.isInstanceOf(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(entryFunction, "body", true), "statements", true)).last(), "com.mbeddr.core.modules.structure.ReturnStatement"))) {
          ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(entryFunction, "body", true), "statements", true)).addElement(callDestroyAllFunction);
        }
      }
    }

    // create initialization statements for local shared ressources and function parameter shared ressources 
    for (SNode implementationModule : ListSequence.fromList(SModelOperations.getRoots(_context.getModel(), "com.mbeddr.core.modules.structure.ImplementationModule"))) {
      for (SNode function : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getTargets(implementationModule, "contents", true), "com.mbeddr.core.modules.structure.Function"))) {
        List<SNode> functionVarDeclarations = new ArrayList<SNode>();
        ListSequence.fromList(functionVarDeclarations).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(function, "com.mbeddr.core.statements.structure.LocalVariableDeclaration", false, new String[]{})));
        ListSequence.fromList(functionVarDeclarations).addSequence(ListSequence.fromList(SLinkOperations.getTargets(function, "arguments", true)));
        for (final SNode functionVarDeclaration : ListSequence.fromList(functionVarDeclarations)) {
          // create statements 
          List<SNode> localInitStatements = new ArrayList<SNode>();
          List<SNode> localDestroyStatements = new ArrayList<SNode>();

          SNode varType = TypeChecker.getInstance().getTypeOf(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), functionVarDeclaration, "virtual_getType_704069370490430475", new Object[]{}));
          final Wrappers._T<SNode> varRef = new Wrappers._T<SNode>();
          if (SNodeOperations.isInstanceOf(functionVarDeclaration, "com.mbeddr.core.statements.structure.LocalVariableDeclaration")) {
            varRef.value = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode node_483189195586601165 = new _FunctionTypes._return_P0_E0<SNode>() {
                  public SNode invoke() {
                    SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.LocalVarRef", null);
                    SLinkOperations.setTarget(res, "var", SNodeOperations.cast(functionVarDeclaration, "com.mbeddr.core.statements.structure.LocalVariableDeclaration"), false);
                    return res;
                  }
                }.invoke();
                return node_483189195586601165;
              }
            }.invoke();
            SLinkOperations.getTarget(SNodeOperations.cast(functionVarDeclaration, "com.mbeddr.core.statements.structure.LocalVariableDeclaration"), "init", true);
          } else {
            varRef.value = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode node_483189195586601185 = new _FunctionTypes._return_P0_E0<SNode>() {
                  public SNode invoke() {
                    SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.ArgumentRef", null);
                    SLinkOperations.setTarget(res, "arg", SNodeOperations.cast(functionVarDeclaration, "com.mbeddr.core.modules.structure.IArgumentLike"), false);
                    return res;
                  }
                }.invoke();
                return node_483189195586601185;
              }
            }.invoke();
          }

          ListSequence.fromList(localInitStatements).addSequence(ListSequence.fromList(SyncDefinitionBuilder.buildInitMutexCallsFor(_context, initMutexFunction, varType, varRef.value, functionVarDeclaration)));
          // if no shared data needs to be initialized skip the current variable 
          if (ListSequence.fromList(localInitStatements).count() == 0) {
            continue;
          }

          // if the variable itself is of a shared type the access to its members must be accomplished by an "->" 
          // instead of a "." 
          if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), functionVarDeclaration, "virtual_getType_704069370490430475", new Object[]{})), "TasksAndSyncs.structure.SharedType")) {
            ListSequence.fromList(SNodeOperations.getDescendants(ListSequence.fromList(localInitStatements).first(), "com.mbeddr.core.statements.structure.AbritraryTextItem", false, new String[]{})).visitAll(new IVisitor<SNode>() {
              public void visit(SNode it) {
                SPropertyOperations.set(it, "text", SPropertyOperations.getString(it, "text").replaceAll("\\.", "->"));
              }
            });
          }

          // map the init statements to destroy statements  
          for (SNode localInitStatement : ListSequence.fromList(localInitStatements)) {
            ListSequence.fromList(localDestroyStatements).addElement(SNodeOperations.copyNode(localInitStatement));
            SyncDefinitionBuilder.convertInitToDestroyMutexCall(ListSequence.fromList(localDestroyStatements).last(), initMutexFunction, destroyMutexFunction);
          }

          // wrap init and destroy statements in inline functions for better legibility 
          final String variableName = SPropertyOperations.getString(functionVarDeclaration, "name");
          SNode variableArgument = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.Argument", null);
          SPropertyOperations.set(variableArgument, "name", variableName);
          if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), functionVarDeclaration, "virtual_getType_704069370490430475", new Object[]{})), "com.mbeddr.core.pointers.structure.ArrayType")) {
            // array types can be used as is since they are treated like pointer types 
            SLinkOperations.setTarget(variableArgument, "type", SNodeOperations.copyNode(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), functionVarDeclaration, "virtual_getType_704069370490430475", new Object[]{})), "com.mbeddr.core.pointers.structure.ArrayType")), true);
          } else {
            // all other types must be wrapped in pointer types in order to avoid pass-by-copy of the actual values 
            SLinkOperations.setTarget(variableArgument, "type", new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                final SNode node_483189195586601330 = new _FunctionTypes._return_P0_E0<SNode>() {
                  public SNode invoke() {
                    SNode res = SNodeOperations.copyNode(TypeChecker.getInstance().getTypeOf(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), functionVarDeclaration, "virtual_getType_704069370490430475", new Object[]{})));
                    return res;
                  }
                }.invoke();
                SNode node_483189195586601329 = new _FunctionTypes._return_P0_E0<SNode>() {
                  public SNode invoke() {
                    SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.PointerType", null);
                    SLinkOperations.setTarget(res, "baseType", node_483189195586601330, true);
                    return res;
                  }
                }.invoke();
                return node_483189195586601329;
              }
            }.invoke(), true);
          }

          final List<SNode> initArgs = new ArrayList<SNode>();
          ListSequence.fromList(initArgs).addElement(SNodeOperations.copyNode(variableArgument));
          final List<SNode> destroyArgs = new ArrayList<SNode>();
          ListSequence.fromList(destroyArgs).addElement(SNodeOperations.copyNode(variableArgument));
          final SNode initVarArgRef = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode node_483189195586601371 = new _FunctionTypes._return_P0_E0<SNode>() {
                public SNode invoke() {
                  SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.ArgumentRef", null);
                  SLinkOperations.setTarget(res, "arg", ListSequence.fromList(initArgs).first(), false);
                  return res;
                }
              }.invoke();
              return node_483189195586601371;
            }
          }.invoke();
          final SNode destroyVarArgRef = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode node_483189195586601381 = new _FunctionTypes._return_P0_E0<SNode>() {
                public SNode invoke() {
                  SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.ArgumentRef", null);
                  SLinkOperations.setTarget(res, "arg", ListSequence.fromList(destroyArgs).first(), false);
                  return res;
                }
              }.invoke();
              return node_483189195586601381;
            }
          }.invoke();

          String localInitFuncName = _context.createUniqueName("init_" + variableName, null);
          final SNode localInitFunction = SyncDefinitionBuilder.buildVoidInlineFunction(localInitStatements, initArgs, localInitFuncName);
          ListSequence.fromList(SLinkOperations.getTargets(implementationModule, "contents", true)).addElement(localInitFunction);
          ListSequence.fromList(SNodeOperations.getDescendants(localInitFunction, "com.mbeddr.core.statements.structure.LocalVarRef", false, new String[]{})).where(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return SPropertyOperations.getString(SLinkOperations.getTarget(it, "var", false), "name").equals(variableName);
            }
          }).visitAll(new IVisitor<SNode>() {
            public void visit(SNode it) {
              SNodeOperations.replaceWithAnother(it, SNodeOperations.copyNode(initVarArgRef));
            }
          });

          String localDestroyFuncName = _context.createUniqueName("destroy_" + variableName, null);
          final SNode localDestroyFunction = SyncDefinitionBuilder.buildVoidInlineFunction(localDestroyStatements, destroyArgs, localDestroyFuncName);
          ListSequence.fromList(SLinkOperations.getTargets(implementationModule, "contents", true)).addElement(localDestroyFunction);
          ListSequence.fromList(SNodeOperations.getDescendants(localDestroyFunction, "com.mbeddr.core.statements.structure.LocalVarRef", false, new String[]{})).where(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return SPropertyOperations.getString(SLinkOperations.getTarget(it, "var", false), "name").equals(variableName);
            }
          }).visitAll(new IVisitor<SNode>() {
            public void visit(SNode it) {
              SNodeOperations.replaceWithAnother(it, SNodeOperations.copyNode(destroyVarArgRef));
            }
          });

          // create call expressions for init and destroy functions 
          final Wrappers._T<SNode> variableAdressReference = new Wrappers._T<SNode>();
          if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), functionVarDeclaration, "virtual_getType_704069370490430475", new Object[]{})), "com.mbeddr.core.pointers.structure.ArrayType")) {
            variableAdressReference.value = SNodeOperations.copyNode(varRef.value);
          } else {
            variableAdressReference.value = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                final SNode node_483189195586601530 = new _FunctionTypes._return_P0_E0<SNode>() {
                  public SNode invoke() {
                    SNode res = SNodeOperations.copyNode(varRef.value);
                    return res;
                  }
                }.invoke();
                SNode node_483189195586601529 = new _FunctionTypes._return_P0_E0<SNode>() {
                  public SNode invoke() {
                    SNode res = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.ReferenceExpr", null);
                    SLinkOperations.setTarget(res, "expression", node_483189195586601530, true);
                    return res;
                  }
                }.invoke();
                return node_483189195586601529;
              }
            }.invoke();
          }
          SNode callLocalInitFunction = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              final SNode node_483189195586601544 = new _FunctionTypes._return_P0_E0<SNode>() {
                public SNode invoke() {
                  SNode res = SNodeOperations.copyNode(variableAdressReference.value);
                  return res;
                }
              }.invoke();
              final SNode node_483189195586601541 = new _FunctionTypes._return_P0_E0<SNode>() {
                public SNode invoke() {
                  SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.FunctionCall", null);
                  ListSequence.fromList(SLinkOperations.getTargets(res, "actuals", true)).addElement(node_483189195586601544);
                  SLinkOperations.setTarget(res, "function", localInitFunction, false);
                  return res;
                }
              }.invoke();
              SNode node_483189195586601540 = new _FunctionTypes._return_P0_E0<SNode>() {
                public SNode invoke() {
                  SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ExpressionStatement", null);
                  SLinkOperations.setTarget(res, "expr", node_483189195586601541, true);
                  return res;
                }
              }.invoke();
              return node_483189195586601540;
            }
          }.invoke();
          SNode callLocalDestroyFunction = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              final SNode node_483189195586601559 = new _FunctionTypes._return_P0_E0<SNode>() {
                public SNode invoke() {
                  SNode res = SNodeOperations.copyNode(variableAdressReference.value);
                  return res;
                }
              }.invoke();
              final SNode node_483189195586601556 = new _FunctionTypes._return_P0_E0<SNode>() {
                public SNode invoke() {
                  SNode res = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.FunctionCall", null);
                  ListSequence.fromList(SLinkOperations.getTargets(res, "actuals", true)).addElement(node_483189195586601559);
                  SLinkOperations.setTarget(res, "function", localDestroyFunction, false);
                  return res;
                }
              }.invoke();
              SNode node_483189195586601555 = new _FunctionTypes._return_P0_E0<SNode>() {
                public SNode invoke() {
                  SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ExpressionStatement", null);
                  SLinkOperations.setTarget(res, "expr", node_483189195586601556, true);
                  return res;
                }
              }.invoke();
              return node_483189195586601555;
            }
          }.invoke();

          // intialization/destruction callls for (1) local variables | (2) function parameters 
          if (SNodeOperations.isInstanceOf(functionVarDeclaration, "com.mbeddr.core.statements.structure.LocalVariableDeclaration")) {
            // add initialization calls after each variable declaration with shared data 
            // before the end of the current block 
            SNodeOperations.insertNextSiblingChild(functionVarDeclaration, SNodeOperations.copyNode(callLocalInitFunction));

            // add destruction statements before each following return statement in the current or some sub scope  
            for (SNode followingStatement : ListSequence.fromList(SNodeOperations.getNextSiblings(functionVarDeclaration, false))) {
              if (SNodeOperations.isInstanceOf(followingStatement, "com.mbeddr.core.modules.structure.ReturnStatement")) {
                SNodeOperations.insertPrevSiblingChild(followingStatement, SNodeOperations.copyNode(callLocalDestroyFunction));
              } else {
                for (SNode nestedReturnStatement : ListSequence.fromList(SNodeOperations.getDescendants(followingStatement, "com.mbeddr.core.modules.structure.ReturnStatement", false, new String[]{}))) {
                  SNodeOperations.insertPrevSiblingChild(nestedReturnStatement, SNodeOperations.copyNode(callLocalDestroyFunction));
                }
              }
            }
            // add destruction calls before the end of the variable's scope 
            if (!(SNodeOperations.isInstanceOf(ListSequence.fromList(SNodeOperations.getNextSiblings(functionVarDeclaration, false)).last(), "com.mbeddr.core.modules.structure.ReturnStatement"))) {
              SNodeOperations.insertNextSiblingChild(ListSequence.fromList(SNodeOperations.getNextSiblings(functionVarDeclaration, false)).last(), SNodeOperations.copyNode(callLocalDestroyFunction));
            }
          } else {
            SNode functionBody = SLinkOperations.getTarget(SNodeOperations.getAncestor(functionVarDeclaration, "com.mbeddr.core.modules.structure.Function", false, false), "body", true);
            // add init call to the beginning of the function 
            ListSequence.fromList(SLinkOperations.getTargets(functionBody, "statements", true)).insertElement(0, SNodeOperations.copyNode(callLocalInitFunction));

            // add destruction calls before every return statement of the function 
            for (SNode nestedReturnStatement : ListSequence.fromList(SNodeOperations.getDescendants(functionBody, "com.mbeddr.core.modules.structure.ReturnStatement", false, new String[]{}))) {
              SNodeOperations.insertPrevSiblingChild(nestedReturnStatement, SNodeOperations.copyNode(callLocalDestroyFunction));
            }

            // add destruction calls before the end of function body 
            if (!(SNodeOperations.isInstanceOf(ListSequence.fromList(SLinkOperations.getTargets(functionBody, "statements", true)).last(), "com.mbeddr.core.modules.structure.ReturnStatement"))) {
              ListSequence.fromList(SLinkOperations.getTargets(functionBody, "statements", true)).addElement(SNodeOperations.copyNode(callLocalDestroyFunction));
            }
          }
        }
      }
    }

    // replace all shared<> types by their corresponding struct types 
    for (SNode implementationModule : ListSequence.fromList(SModelOperations.getRoots(_context.getModel(), "com.mbeddr.core.modules.structure.ImplementationModule"))) {
      for (SNode sharedType : ListSequence.fromList(SNodeOperations.getDescendants(implementationModule, "TasksAndSyncs.structure.SharedType", false, new String[]{}))) {
        final SNode structForShared = SyncDefinitionBuilder.getStructForType(_context, typesAndStructs, sharedType);
        SNodeOperations.replaceWithAnother(sharedType, new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            SNode node_483189195586601740 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.StructType", null);
                SLinkOperations.setTarget(res, "struct", structForShared, false);
                return res;
              }
            }.invoke();
            return node_483189195586601740;
          }
        }.invoke());
      }
    }
  }

  public static void mappingScript_CodeBlock_3348893923579063300(final IOperationContext operationContext, final MappingScriptContext _context) {
    SNode genericSyncModule = ListSequence.fromList(SModelOperations.getRoots(_context.getModel(), "com.mbeddr.core.modules.structure.ImplementationModule")).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.getString(it, "name").equals(NameGenerator.getGenericSyncModuleName());
      }
    });

    Map<Integer, SNode> argCountToStartSyncFunc = MapSequence.fromMap(new HashMap<Integer, SNode>());
    Map<Integer, SNode> argCountToStopSyncFunc = MapSequence.fromMap(new HashMap<Integer, SNode>());

    for (SNode implementationModule : ListSequence.fromList(SModelOperations.getRoots(_context.getModel(), "com.mbeddr.core.modules.structure.ImplementationModule"))) {
      // process syncs by the ascending number of nested other syncs so that the mutex releases are arranged in 
      // the same nested manner 
      for (SNode syncStatement : ListSequence.fromList(SNodeOperations.getDescendants(implementationModule, "TasksAndSyncs.structure.SyncStatement", false, new String[]{})).sort(new ISelector<SNode, Integer>() {
        public Integer select(SNode it) {
          return ListSequence.fromList(SNodeOperations.getDescendants(it, "TasksAndSyncs.structure.SyncStatement", false, new String[]{})).count();
        }
      }, true)) {
        List<SNode> ressources = SLinkOperations.getTargets(syncStatement, "ressources", true);
        List<SNode> statements = SLinkOperations.getTargets(SLinkOperations.getTarget(syncStatement, "statements", true), "statements", true);

        if (ListSequence.fromList(statements).count() == 0) {
          SNodeOperations.detachNode(syncStatement);
        } else {
          if (ListSequence.fromList(ressources).count() > 0) {
            // create functions for mutex locking/unlocking 
            SNode startSyncFunc;
            SNode stopSyncFunc;
            if (MapSequence.fromMap(argCountToStartSyncFunc).containsKey(ListSequence.fromList(ressources).count())) {
              startSyncFunc = MapSequence.fromMap(argCountToStartSyncFunc).get(ListSequence.fromList(ressources).count());
              stopSyncFunc = MapSequence.fromMap(argCountToStopSyncFunc).get(ListSequence.fromList(ressources).count());
            } else {
              startSyncFunc = SyncDefinitionBuilder.buildStartSyncFunction(_context, ListSequence.fromList(ressources).count());
              stopSyncFunc = SyncDefinitionBuilder.buildStopSyncFunction(_context, ListSequence.fromList(ressources).count());
              MapSequence.fromMap(argCountToStartSyncFunc).put(ListSequence.fromList(ressources).count(), startSyncFunc);
              MapSequence.fromMap(argCountToStopSyncFunc).put(ListSequence.fromList(ressources).count(), stopSyncFunc);
              ListSequence.fromList(SLinkOperations.getTargets(genericSyncModule, "contents", true)).addElement(startSyncFunc);
              ListSequence.fromList(SLinkOperations.getTargets(genericSyncModule, "contents", true)).addElement(stopSyncFunc);
            }

            // create pointers to mutexes for lock/unlock calls 
            List<SNode> mutexRefs = SyncDefinitionBuilder.buildMutexRefs(_context, ressources);

            // create a function call for the mutex locking right before the sync statement 
            List<SNode> startSyncRefs = new ArrayList<SNode>();
            SyncDefinitionBuilder.copyList(mutexRefs, startSyncRefs);
            SNode startSyncCall = SyncDefinitionBuilder.buildFunctionCall(startSyncRefs, startSyncFunc);
            SNodeOperations.insertPrevSiblingChild(syncStatement, startSyncCall);

            // create a function call for the mutex unlocking right after the sync statement and right before 
            // every nested return statement (currently synchronization states can not be returned from functions) 
            List<SNode> stopSyncRefs = new ArrayList<SNode>();
            SyncDefinitionBuilder.copyList(mutexRefs, stopSyncRefs);
            final SNode stopSyncCall = SyncDefinitionBuilder.buildFunctionCall(stopSyncRefs, stopSyncFunc);
            SNodeOperations.insertNextSiblingChild(syncStatement, stopSyncCall);
            ListSequence.fromList(SNodeOperations.getDescendants(syncStatement, "com.mbeddr.core.modules.structure.ReturnStatement", false, new String[]{})).visitAll(new IVisitor<SNode>() {
              public void visit(SNode it) {
                SNodeOperations.insertPrevSiblingChild(it, SNodeOperations.copyNode(stopSyncCall));
              }
            });
          }

          SNodeOperations.replaceWithAnother(syncStatement, SLinkOperations.getTarget(syncStatement, "statements", true));
        }
      }
    }
  }

  public static void mappingScript_CodeBlock_5853110027234870833(final IOperationContext operationContext, final MappingScriptContext _context) {
    // tasks and futures 
    SNode genericTaskModule = ImplementationModuleBuilder.buildGeneric(NameGenerator.getGenericTaskModuleName(), _context.getModel());

    // shared<> types 
    SNode genericSharedModule = ImplementationModuleBuilder.buildGeneric(NameGenerator.getGenericSharedModuleName(), _context.getModel());

    // sync statements => mutex locks/unlocks 
    SNode genericSyncModule = ImplementationModuleBuilder.buildGeneric(NameGenerator.getGenericSyncModuleName(), _context.getModel());
  }

  public static SNode insertMacro_Query_3074299910025853496(final IOperationContext operationContext, final TemplateQueryContextWithMacro _context) {
    final SNode exprToBind = SLinkOperations.getTarget(_context.getNode(), "expr", true);
    final SNode structExpression = SLinkOperations.getTarget(_context.getNode(), "structExpr", true);
    final Wrappers._T<SNode> structDeclaration = new Wrappers._T<SNode>();
    // the concepts supports bindings to structs and to structs* 
    if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(structExpression), "com.mbeddr.core.udt.structure.StructType")) {
      structDeclaration.value = SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(structExpression), "com.mbeddr.core.udt.structure.StructType"), "struct", false);
    } else if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(structExpression), "com.mbeddr.core.pointers.structure.PointerType") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(structExpression), "com.mbeddr.core.pointers.structure.PointerType"), "baseType", true), "com.mbeddr.core.udt.structure.StructType")) {
      structDeclaration.value = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(structExpression), "com.mbeddr.core.pointers.structure.PointerType"), "baseType", true), "com.mbeddr.core.udt.structure.StructType"), "struct", false);
    } else {
      return exprToBind;
    }
    // rebind local variable references and function argument references  
    // to equally named struct fields 
    final List<SNode> bindableVarRefs = new ArrayList<SNode>();
    if (SNodeOperations.isInstanceOf(exprToBind, "com.mbeddr.core.statements.structure.LocalVarRef") || SNodeOperations.isInstanceOf(exprToBind, "com.mbeddr.core.modules.structure.ArgumentRef")) {
      // if the complete expression expr is a reference it can instantly mapped to struct.expr 
      return new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          final SNode node_483189195586602124 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = structExpression;
              return res;
            }
          }.invoke();
          final SNode node_483189195586602123 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.ParensExpression", null);
              SLinkOperations.setTarget(res, "expression", node_483189195586602124, true);
              return res;
            }
          }.invoke();
          final SNode node_483189195586602128 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.GenericMemberRef", null);
              SLinkOperations.setTarget(res, "member", (ListSequence.fromList(SUDeclaration_Behavior.call_members_9101132143318613823(structDeclaration.value)).findFirst(new IWhereFilter<SNode>() {
                public boolean accept(SNode it) {
                  return SPropertyOperations.hasValue(it, "name", SPropertyOperations.getString(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), SNodeOperations.cast(exprToBind, "com.mbeddr.core.statements.structure.IVariableReference"), "virtual_getVariable_2486081302460156153", new Object[]{}), "name"));
                }
              })), false);
              return res;
            }
          }.invoke();
          SNode node_483189195586602122 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.GenericDotExpression", null);
              SLinkOperations.setTarget(res, "expression", node_483189195586602123, true);
              SLinkOperations.setTarget(res, "target", node_483189195586602128, true);
              return res;
            }
          }.invoke();
          return node_483189195586602122;
        }
      }.invoke();
    } else {
      ListSequence.fromList(SNodeOperations.getDescendants(exprToBind, "com.mbeddr.core.statements.structure.LocalVarRef", false, new String[]{})).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          ListSequence.fromList(bindableVarRefs).addElement(it);
        }
      });
      ListSequence.fromList(SNodeOperations.getDescendants(exprToBind, "com.mbeddr.core.modules.structure.ArgumentRef", false, new String[]{})).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          ListSequence.fromList(bindableVarRefs).addElement(it);
        }
      });
    }

    for (final SNode varRef : ListSequence.fromList(bindableVarRefs)) {
      SNodeOperations.replaceWithAnother(varRef, new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          final SNode node_483189195586602212 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = structExpression;
              return res;
            }
          }.invoke();
          final SNode node_483189195586602210 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.ParensExpression", null);
              SLinkOperations.setTarget(res, "expression", node_483189195586602212, true);
              return res;
            }
          }.invoke();
          final SNode node_483189195586602215 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.GenericMemberRef", null);
              SLinkOperations.setTarget(res, "member", ListSequence.fromList(SUDeclaration_Behavior.call_members_9101132143318613823(structDeclaration.value)).findFirst(new IWhereFilter<SNode>() {
                public boolean accept(SNode it) {
                  return SPropertyOperations.hasValue(SNodeOperations.cast(it, "com.mbeddr.core.udt.structure.Member"), "name", SPropertyOperations.getString(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), varRef, "virtual_getVariable_2486081302460156153", new Object[]{}), "name"));
                }
              }), false);
              return res;
            }
          }.invoke();
          SNode node_483189195586602208 = new _FunctionTypes._return_P0_E0<SNode>() {
            public SNode invoke() {
              SNode res = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.GenericDotExpression", null);
              SLinkOperations.setTarget(res, "expression", node_483189195586602210, true);
              SLinkOperations.setTarget(res, "target", node_483189195586602215, true);
              return res;
            }
          }.invoke();
          return node_483189195586602208;
        }
      }.invoke());
    }

    return exprToBind;
  }

  public static SNode insertMacro_Query_5853110027239686756(final IOperationContext operationContext, final TemplateQueryContextWithMacro _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode insertMacro_Query_5853110027233552272(final IOperationContext operationContext, final TemplateQueryContextWithMacro _context) {
    {
      SNode sharedType = TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "expression", true));
      if (SNodeOperations.isInstanceOf(sharedType, "TasksAndSyncs.structure.SharedType")) {
        return SNodeOperations.copyNode(SLinkOperations.getTarget(sharedType, "baseType", true));
      }
    }
    return SNodeOperations.copyNode(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "expression", true)), "com.mbeddr.core.pointers.structure.PointerType"), "baseType", true), "TasksAndSyncs.structure.SharedType"), "baseType", true));
  }

  public static SNode insertMacro_Query_5853110027233552306(final IOperationContext operationContext, final TemplateQueryContextWithMacro _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode insertMacro_Query_5853110027223622736(final IOperationContext operationContext, final TemplateQueryContextWithMacro _context) {
    return SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "target", true), "TasksAndSyncs.structure.SharedSet"), "value", true);
  }

  public static SNode insertMacro_Query_5853110027223545169(final IOperationContext operationContext, final TemplateQueryContextWithMacro _context) {
    {
      SNode sharedType = TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "expression", true));
      if (SNodeOperations.isInstanceOf(sharedType, "TasksAndSyncs.structure.SharedType")) {
        return SNodeOperations.copyNode(SLinkOperations.getTarget(sharedType, "baseType", true));
      }
    }
    return SNodeOperations.copyNode(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "expression", true)), "com.mbeddr.core.pointers.structure.PointerType"), "baseType", true), "TasksAndSyncs.structure.SharedType"), "baseType", true));
  }

  public static SNode insertMacro_Query_5853110027224537265(final IOperationContext operationContext, final TemplateQueryContextWithMacro _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode insertMacro_Query_5853110027219942549(final IOperationContext operationContext, final TemplateQueryContextWithMacro _context) {
    return SNodeOperations.copyNode(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "expression", true)));
  }

  public static SNode insertMacro_Query_5853110027219942561(final IOperationContext operationContext, final TemplateQueryContextWithMacro _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode insertMacro_Query_5853110027219951820(final IOperationContext operationContext, final TemplateQueryContextWithMacro _context) {
    Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getTargets(_context.getNode(), "ressources", true), "TasksAndSyncs.structure.SyncRessourceNamed")).visitAll(new IVisitor<SNode>() {
      public void visit(final SNode it) {
        SNodeOperations.replaceWithAnother(it, new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            final SNode node_483189195586602350 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = SNodeOperations.copyNode(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(it, "expression", true)));
                return res;
              }
            }.invoke();
            final SNode node_483189195586602359 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.AbritraryTextItem", null);
                SPropertyOperations.set(res, "text", (SPropertyOperations.getString(it, "name")));
                return res;
              }
            }.invoke();
            final SNode node_483189195586602347 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArbitraryTextExpression", null);
                SPropertyOperations.set(res, "requiredStdHeader", (null));
                SLinkOperations.setTarget(res, "dummyType", node_483189195586602350, true);
                ListSequence.fromList(SLinkOperations.getTargets(res, "items", true)).addElement(node_483189195586602359);
                return res;
              }
            }.invoke();
            SNode node_483189195586602346 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = SConceptOperations.createNewNode("TasksAndSyncs.structure.SyncRessource", null);
                SLinkOperations.setTarget(res, "expression", node_483189195586602347, true);
                return res;
              }
            }.invoke();
            return node_483189195586602346;
          }
        }.invoke());
      }
    });
    return _context.getNode();
  }

  public static SNode insertMacro_Query_5853110027234446672(final IOperationContext operationContext, final TemplateQueryContextWithMacro _context) {
    return SNodeOperations.copyNode(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "expression", true)));
  }

  public static SNode insertMacro_Query_5853110027234446684(final IOperationContext operationContext, final TemplateQueryContextWithMacro _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode insertMacro_Query_5853110027234446719(final IOperationContext operationContext, final TemplateQueryContextWithMacro _context) {
    Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getTargets(_context.getNode(), "ressources", true), "TasksAndSyncs.structure.SyncRessourceNamed")).visitAll(new IVisitor<SNode>() {
      public void visit(final SNode it) {
        SNodeOperations.replaceWithAnother(it, new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            final SNode node_483189195586602402 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = SNodeOperations.copyNode(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(it, "expression", true)));
                return res;
              }
            }.invoke();
            final SNode node_483189195586602411 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.AbritraryTextItem", null);
                SPropertyOperations.set(res, "text", (SPropertyOperations.getString(it, "name")));
                return res;
              }
            }.invoke();
            final SNode node_483189195586602399 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArbitraryTextExpression", null);
                SPropertyOperations.set(res, "requiredStdHeader", (null));
                SLinkOperations.setTarget(res, "dummyType", node_483189195586602402, true);
                ListSequence.fromList(SLinkOperations.getTargets(res, "items", true)).addElement(node_483189195586602411);
                return res;
              }
            }.invoke();
            SNode node_483189195586602398 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = SConceptOperations.createNewNode("TasksAndSyncs.structure.SyncRessource", null);
                SLinkOperations.setTarget(res, "expression", node_483189195586602399, true);
                return res;
              }
            }.invoke();
            return node_483189195586602398;
          }
        }.invoke());
      }
    });
    return _context.getNode();
  }

  public static SNode insertMacro_Query_5853110027234482304(final IOperationContext operationContext, final TemplateQueryContextWithMacro _context) {
    return SNodeOperations.copyNode(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "expression", true)));
  }

  public static SNode insertMacro_Query_5853110027234482316(final IOperationContext operationContext, final TemplateQueryContextWithMacro _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode insertMacro_Query_5853110027234490911(final IOperationContext operationContext, final TemplateQueryContextWithMacro _context) {
    Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getTargets(_context.getNode(), "ressources", true), "TasksAndSyncs.structure.SyncRessourceNamed")).visitAll(new IVisitor<SNode>() {
      public void visit(final SNode it) {
        SNodeOperations.replaceWithAnother(it, new _FunctionTypes._return_P0_E0<SNode>() {
          public SNode invoke() {
            final SNode node_483189195586602454 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = SNodeOperations.copyNode(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(it, "expression", true)));
                return res;
              }
            }.invoke();
            final SNode node_483189195586602463 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.AbritraryTextItem", null);
                SPropertyOperations.set(res, "text", (SPropertyOperations.getString(it, "name")));
                return res;
              }
            }.invoke();
            final SNode node_483189195586602451 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ArbitraryTextExpression", null);
                SPropertyOperations.set(res, "requiredStdHeader", (null));
                SLinkOperations.setTarget(res, "dummyType", node_483189195586602454, true);
                ListSequence.fromList(SLinkOperations.getTargets(res, "items", true)).addElement(node_483189195586602463);
                return res;
              }
            }.invoke();
            SNode node_483189195586602450 = new _FunctionTypes._return_P0_E0<SNode>() {
              public SNode invoke() {
                SNode res = SConceptOperations.createNewNode("TasksAndSyncs.structure.SyncRessource", null);
                SLinkOperations.setTarget(res, "expression", node_483189195586602451, true);
                return res;
              }
            }.invoke();
            return node_483189195586602450;
          }
        }.invoke());
      }
    });
    return _context.getNode();
  }

  public static SNode insertMacro_Query_5853110027223894403(final IOperationContext operationContext, final TemplateQueryContextWithMacro _context) {
    return SNodeOperations.copyNode(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), "syncRessource", false), "expression", true)));
  }

  public static SNode insertMacro_Query_5514347295282597991(final IOperationContext operationContext, final TemplateQueryContextWithMacro _context) {
    return SNodeOperations.copyNode(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "TasksAndSyncs.structure.TaskType"), "returnType", true));
  }

  public static SNode insertMacro_Query_5514347295282624061(final IOperationContext operationContext, final TemplateQueryContextWithMacro _context) {
    return SNodeOperations.copyNode(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "TasksAndSyncs.structure.TaskType"), "returnType", true), "com.mbeddr.core.pointers.structure.PointerType"), "baseType", true));
  }

  public static SNode insertMacro_Query_5514347295283030968(final IOperationContext operationContext, final TemplateQueryContextWithMacro _context) {
    return SNodeOperations.copyNode(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "TasksAndSyncs.structure.TaskType"), "returnType", true));
  }

  public static SNode insertMacro_Query_5853110027254603541(final IOperationContext operationContext, final TemplateQueryContextWithMacro _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode insertMacro_Query_482600553440749830(final IOperationContext operationContext, final TemplateQueryContextWithMacro _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }
}
