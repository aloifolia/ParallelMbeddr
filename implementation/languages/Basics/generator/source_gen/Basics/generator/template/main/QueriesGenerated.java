package Basics.generator.template.main;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.generator.template.MappingScriptContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

@Generated
public class QueriesGenerated {
  public static SNode sourceNodeQuery_482600553445400292(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expr", true);
  }

  public static void mappingScript_CodeBlock_482600553442098038(final IOperationContext operationContext, final MappingScriptContext _context) {
    for (SNode content : ListSequence.fromList(SModelOperations.getRoots(_context.getModel(), "com.mbeddr.core.modules.structure.ImplementationModule")).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode it) {
        return SLinkOperations.getTargets(it, "contents", true);
      }
    })) {
      for (SNode blockExpression : ListSequence.fromList(SNodeOperations.getDescendants(content, "Basics.structure.InvisibleBlockExpression", false, new String[]{}))) {
        SNode surroundingStatement = SNodeOperations.getAncestor(blockExpression, "com.mbeddr.core.statements.structure.Statement", false, false);
        for (SNode statement : ListSequence.fromList(SLinkOperations.getTargets(blockExpression, "statements", true))) {
          SNodeOperations.insertPrevSiblingChild(surroundingStatement, statement);
        }
        SNodeOperations.replaceWithAnother(blockExpression, SLinkOperations.getTarget(blockExpression, "result", true));
      }
    }
  }
}
